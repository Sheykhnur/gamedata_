--[[-----------------------------------------------------------------------------------------------
 File       : dialog_manager.script
 Description: Dialogs Manager
 Copyright  : 2004 ╘ GSC Game World
 Author     : GSC Game World
 Editors    : barin(16.08.2010), gr1ph00n(10.02.2013), lox(16.02.2013)
 Last edit  : 13.11.2017 [lox]
--]]-----------------------------------------------------------------------------------------------
-- crash-fix
--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
phrase = {
	intro         = {}, --/ 'request/hellous/advices'
	cool_info     = {}, --/ 'whats new heard?'
	action_info   = {}, --/#+# intensions (in development)
	jokes_info    = {}, --/#+# jokes (in development)
	help_thanks   = {}  --/ 'thanks for help' (not saving to *.sav)
}
selected_phrase_by_id = nil

local idCounter    = 100
local tCategorySel = nil
local tCategorySav = {
	[1] = "intro",
	[2] = "cool_info",
	[3] = "action_info", --/#+#
	[4] = "jokes_info"   --/#+#
}
local tTimerNames      = {}
local tParentByStoryId = {} --/ table [iStoryId] = sParent
local tStoryIdByParent = {} --/ table [sParent] = iStoryId
local bInit   = false --/ flag of initializing module
--/ --------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------
--/ Initialize module
--/ -----------------------------------------------------------------
function init()
--	debug_print("init:[>]") --/#~#
	this.fill_phrase_table()
	event("presets"):register(PreSets)
	bInit = true
end
--/ -----------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------
function PreSets(e)
--	log("PreSets:[>]") --/#~#
	if bInit then return end --/>
	if not tCategorySel then --/ insurance
		this.Build_Tables(ini_file("misc\\dialog_manager.ltx"))
	end
end

function Build_Tables(ltx)
	tCategorySel = {}
	for _,v in ipairs(tCategorySav) do
		table.insert(tCategorySel, v)
	end
	selected_phrase_by_id = {}
	for _,v in ipairs(tCategorySel) do
		selected_phrase_by_id[v] = {}
	end
	tTimerNames      = Get_IniSection(ltx, "timer_names",        "string")
	tParentByStoryId = Get_IniSection(ltx, "parent_by_story_id", "string", "key2num")
	for k,v in pairs(tParentByStoryId) do
		tStoryIdByParent[v] = k --/ [sParent]  = iStoryId
	end
	--table.print(tTimerNames,sModule..":tTimerNames|") --/#~#
end

--/ Generator of unique Id for phrases
function get_id()
	idCounter = idCounter +1
	return idCounter --/>
end
function gen_phrase_id_str()
	return tostring(get_id()) --/>
end

--/ Need to form set of predicates: table[string_id] = predicate()
function fill_phrase_table()
--	log("fill_phrase_table:(>)") --/#~#
	local phrase_ini = ini_file("misc\\dialog_manager.ltx")
	this.Build_Tables(phrase_ini) --/ reading/filling tables
	--/ Iterating on all settings of phases
	local tPhrList,iCnt = Get_IniSection(phrase_ini, "list")
	if iCnt == 0 then
		abort(sModule..":fill_phrase_table:Error while parsing dialog_manager.ltx")
	end
	for k,v in ipairs(tPhrList) do
		if not phrase_ini:section_exist(v) then
			abort("%s:fill_phrase_table:Not_Section(%s)=[%s]~>in_'dialog_manager.ltx'", sModule, k, v)
		elseif not phrase_ini:line_exist(v, "category") then
			abort("%s:fill_phrase_table:Not_Field='category'~>in_Section(%s)=[%s]", sModule, k, v)
		end
		local sCategory = Get_Cfg_String(phrase_ini, v, "category") --/ category of phrase
--		log("fill_phrase_table:Phrase(%s/%s)=[%s],Category=[%s]", i+1, iCnt, v, sCategory, "") --/#~#
		local tPhr = {}
		tPhr.name = v
		tPhr.level         = ReadFromIni(phrase_ini, v, "level"        , nil, "table" , ",", true) --/ levels(maps)
		tPhr.npc_community = ReadFromIni(phrase_ini, v, "npc_community", nil, "table" , ",", true) --/ NPC community
		tPhr.community     = ReadFromIni(phrase_ini, v, "community"    , nil, "table" , ",", true) --/#-# actor community
		tPhr.relation      = ReadFromIni(phrase_ini, v, "relation"     , nil, "table" , ",", true) --/#-# relationships NPC to actor
		tPhr.wounded       = Get_Cfg_Bool  (phrase_ini, v, "wounded", "<<Nil>>") --/ wounded NPC
		tPhr.smart_terrain = Get_Cfg_String(phrase_ini, v, "smart_terrain")    --/#-# smart/gulag NPC
		tPhr.article_info  = Get_Cfg_String(phrase_ini, v, "article_info")     --/#-# infoportion (deliver)
		tPhr.treasure      = Get_Cfg_String(phrase_ini, v, "treasure")         --/#-# stash (deliver)
		tPhr.npc_rank      = Get_Cfg_Num32 (phrase_ini, v, "npc_rank")         --/#-# rank моя
		tPhr.price         = Get_Cfg_Num32 (phrase_ini, v, "cost")             --/#?# price (actor money)
		local sCondlist    = Get_Cfg_String(phrase_ini, v, "condlist")         --/#-# logic
		if sCondlist then
			tPhr.condlist = xr_logic.parse_condlist(oActor, "dialog_manager", "condlist", sCondlist)
		end
		
		tPhr.phr_id  = gen_phrase_id_str()
		tPhr.phr_id2 = gen_phrase_id_str()
		phrase[sCategory][tPhr.phr_id] = tPhr
	end
	--table.print(phrase["jokes_info"]) --/#~#
end

--/ Creating start dialog (requests/hellous/advices) with branching on 3rd level,
--/ where each phrase has the same function to precondition.
function init_intro_dialog(dlg)
	local phr,scr
	phr = dlg:AddPhrase("", "0", "", -10000)
	phr = dlg:AddPhrase("", "1", "0", -10000)
	--/ branching on 3rd level
	for _,v in pairs(phrase.intro) do
		phr = dlg:AddPhrase(v.name, v.phr_id, "1", -10000)
		if phr then
			scr = phr:GetPhraseScript()
			scr:AddPrecondition(sModule..".precondition_intro")
			--/ 'Action' remember last phrase, so character would talk the same.
			if v.wounded == false then --/ for phrase 'help request' we shouldn't add him.
				scr:AddAction(sModule..".phrase_action_intro")
			end
		end
	end
end

--/ Creating dialog of actor (what's new heard?) with branching on 2nd level,
--/ where each pharse has the same function to precondition.
function init_cool_info_dialog(dlg)
	local sTxt = "dm_general_cool_info"
	local phr = dlg:AddPhrase(sTxt, "0", "", -10000)
	phr = dlg:AddPhrase(sTxt.."_no_more", "1", "0", -10000)
	local scr = phr:GetPhraseScript()
	scr:AddPrecondition(sModule..".precondition_cool_info_no_more")
	--/ branching on 2nd level
	for _,v in pairs(phrase.cool_info) do
		phr = dlg:AddPhrase(v.name, v.phr_id, "0", -10000)
		if phr then
			scr = phr:GetPhraseScript()
			scr:AddPrecondition(sModule..".precondition_cool_info")
			scr:AddAction(sModule..".cool_info_treasure") --/ giving stash (not used)
			scr:AddAction(sModule..".phrase_action_cool_info")
			if v.article_info then
				phr = dlg:AddPhrase("", v.phr_id2, v.phr_id, -10000)
				scr = phr:GetPhraseScript()
				for _,vv in pairs(v.article_info) do
					scr:AddGiveInfo(vv)
				end
			end
		end
	end
end

--/ Dialogs of wounded help
function init_help_wounded_medkit_dialog(dlg)
	local phr = dlg:AddPhrase("dm_general_help_medkit", "0", "", -10000)
	local scr = phr:GetPhraseScript()
	scr:AddAction("dialogs.transfer_medkit")
	--/ branching on 2nd level
	for _,v in pairs(phrase.help_thanks) do
		phr = dlg:AddPhrase(v.name, v.phr_id, "0", -10000)
		if phr then
			scr = phr:GetPhraseScript()
			scr:AddPrecondition(sModule..".precondition_help_thanks")
		end
	end
end

--/#+# Dialogs 'what are you going to do?'
function init_action_info_dialog(dlg)
	local sTxt = "dm_general_action_info"..math.random(1,3)
	local phr = dlg:AddPhrase(sTxt, "0", "", -10000)
	phr = dlg:AddPhrase(sTxt.."_no_more", "1", "0", -10000)
	local scr = phr:GetPhraseScript()
	scr:AddPrecondition(sModule..".precondition_action_info_no_more")
	--/ branching on 2nd level
	for _,v in pairs(phrase.action_info) do
		phr = dlg:AddPhrase(v.name, v.phr_id, "0", -10000)
		if phr then
			scr = phr:GetPhraseScript()
			scr:AddPrecondition(sModule..".precondition_action_info")
			scr:AddAction(sModule..".phrase_action_action_info")
			if v.article_info then
				phr = dlg:AddPhrase("", v.phr_id2, v.phr_id, -10000)
				scr = phr:GetPhraseScript()
				for _,vv in pairs(v.article_info) do
					scr:AddGiveInfo(vv)
				end
			end
		end
	end
end
--/#+# Jokes
function init_jokes_info_dialog(dlg)
	local sTxt = "dm_general_jokes_info"..math.random(1,3)
	local phr = dlg:AddPhrase(sTxt, "0", "", -10000)
	phr = dlg:AddPhrase(sTxt.."_no_more", "1", "0", -10000)
	local scr = phr:GetPhraseScript()
	scr:AddPrecondition(sModule..".precondition_jokes_info_no_more")
	--/ branching on 2nd level
	for _,v in pairs(phrase.jokes_info) do
		phr = dlg:AddPhrase(v.name, v.phr_id, "0", -10000)
		if phr then
			scr = phr:GetPhraseScript()
			scr:AddPrecondition(sModule..".precondition_jokes_info")
			scr:AddAction(sModule..".phrase_action_jokes_info")
			--/ branching on 3nd level
			if v.article_info then
				phr = dlg:AddPhrase("", v.phr_id2, v.phr_id, -10000)
				scr = phr:GetPhraseScript()
				for _,vv in pairs(v.article_info) do
					scr:AddGiveInfo(vv)
				end
			end
		end
	end
end
--/ giving stash (not used)
function cool_info_treasure(oSpeaker1, oSpeaker2, sDlgId, idPhase)
	for _,v in pairs(phrase.cool_info) do
		if v.phr_id == tostring(idPhase) then
			if v.treasure then
				local oNPC = Get_NPC(oSpeaker2, oSpeaker1)
				if v.treasure == "random" then
					treasure_manager.use(oNPC) --/> give 'random' stash
				else
					treasure_manager.give_treasure(v.treasure,oNPC) --/> give 'named' stush
				end
			end
			return --/>
		end
	end
end
--/ give stash (not used)
function trade_info_treasure(oSpeaker1, oSpeaker2, sDlgId, idPhase)
	for _,v in pairs(phrase.trade_info) do
		if v.phr_id == tostring(idPhase) then
			if v.treasure then
				local oNPC = Get_NPC(oSpeaker2, oSpeaker1)
				if v.treasure == "random" then
					treasure_manager.use(oNPC) --/> give 'random' stash
				else
					treasure_manager.give_treasure(v.treasure,oNPC) --/> give 'named' stush
				end
			end
			return --/>
		end
	end
end

--/ -----------------------------------------------------------------
function phrase_action_intro(oNPC, oActor, sDlgId, idPhase)
	phrase_action(oNPC, oActor, selected_phrase_by_id.intro, idPhase)
end

function phrase_action_cool_info(oNPC, oActor, sDlgId, idPhase)
	phrase_action(oNPC, oActor, selected_phrase_by_id.cool_info, idPhase, true)
end

function phrase_action_action_info(oNPC, oActor, sDlgId, idPhase)
	phrase_action(oNPC, oActor, selected_phrase_by_id.action_info, idPhase, true)
end

function phrase_action_story_info(oNPC, oActor, sDlgId, idPhase)
	phrase_action(oNPC, oActor, selected_phrase_by_id.story_info, idPhase, true)
end

function phrase_action_jokes_info(oNPC, oActor, sDlgId, idPhase)
	phrase_action(oNPC, oActor, selected_phrase_by_id.jokes_info, idPhase, true)
end

function phrase_action(oNPC, oActor, tSel, idPhase, bOneTime)
	local idNPC = oNPC:id()
	local iCnt = 0
	if bOneTime == true then
		if tSel[idNPC] then
			iCnt = tSel[idNPC].count +1
		else
			iCnt = 1
		end
	end
	tSel[idNPC] = {phrase=tostring(idPhase), count=iCnt}
end

--/ -----------------------------------------------------------------
function precondition_intro(oNPC, actor, sDlgId, idParent, idPhase)
	return precondition(oNPC, actor, phrase.intro, selected_phrase_by_id.intro, sDlgId, idParent, idPhase) --/>
end

function precondition_help_thanks(oNPC, actor, sDlgId, idParent, idPhase)
	return precondition(oNPC, actor, phrase.help_thanks, nil, sDlgId, idParent, idPhase) --/>
end

function precondition_cool_info(oNPC, actor, sDlgId, idParent, idPhase)
	return precondition(oNPC, actor, phrase.cool_info, selected_phrase_by_id.cool_info, sDlgId, idParent, idPhase) --/>
end
function precondition_cool_info_no_more(oNPC, actor, sDlgId, idParent, idPhase)
	local tT = selected_phrase_by_id.cool_info and selected_phrase_by_id.cool_info[oNPC:id()]
	if tT and tT.count and tT.count >= 1 then
		return true --/>
	end
	return false --/>
end

function precondition_action_info(oNPC, actor, sDlgId, idParent, idPhase)
	return precondition(oNPC, actor, phrase.action_info, selected_phrase_by_id.action_info, sDlgId, idParent, idPhase) --/>
end
function precondition_action_info_no_more(oNPC, actor, sDlgId, idParent, idPhase)
	local tT = selected_phrase_by_id.action_info and selected_phrase_by_id.action_info[oNPC:id()]
	if tT and tT.count and tT.count >= 1 then
		return true --/>
	end
	return false --/>
end

function precondition_story_info(oNPC, actor, sDlgId, idParent, idPhase)
	return precondition(oNPC, actor, phrase.story_info, selected_phrase_by_id.story_info, sDlgId, idParent, idPhase) --/>
end
function precondition_story_info_no_more(oNPC, actor, sDlgId, idParent, idPhase)
	local tT = selected_phrase_by_id.story_info and selected_phrase_by_id.story_info[oNPC:id()]
	if tT and tT.count and tT.count >= 1 then
		return true --/>
	end
	return false --/>
end

function precondition_jokes_info(oNPC, actor, sDlgId, idParent, idPhase)
	return precondition(oNPC, actor, phrase.jokes_info, selected_phrase_by_id.jokes_info, sDlgId, idParent, idPhase) --/>
end
function precondition_jokes_info_no_more(oNPC, actor, sDlgId, idParent, idPhase)
	local tT = selected_phrase_by_id.jokes_info and selected_phrase_by_id.jokes_info[oNPC:id()]
	if tT and tT.count and tT.count >= 1 then
		return true --/>
	end
	return false --/>
end

--/ -----------------------------------------------------------------
function precondition(oNPC, actor, tPhr, tSel, sDlgId, idParent, idPhase)
	local sTimerName = sDlgId and tTimerNames[sDlgId]
	if sTimerName then
		Set_TimeOut(oNPC,sTimerName,math.random(30,60))
	end
	local idNPC = oNPC:id()
	local tSelNPC = tSel and idNPC and tSel[idNPC]
	--/ Need to check if remembered phrase avaliable
	if tSelNPC then
		local tPhrase = tPhr[tSelNPC.phrase]
		if tPhrase then
			local bAllow,iCntProperty = calculate_predicate(oNPC, tPhrase)
			--/ If remembered(saved) not avaliable - need to forget it
			if not bAllow then
				log("precondition:NPC=[%s]~Restore remembered phrase=[%s]:[%s]", oNPC and oNPC:name(), tSelNPC.phrase, iCntProperty, "") --/#~#
				tSelNPC = nil
			end
		else
			log("precondition:NPC=[%s],SelNPC.phrase=[%s]:<%s>", oNPC and oNPC:name(), tSelNPC.phrase, "Warning!") --/#~#
			table.print(tPhr)
			tSelNPC = nil
		end
	--else log("precondition:NPC=[%s],SelNPC=NIL", oNPC and oNPC:name(), "") --/#~#
	end
	--/ Get phrase by number:
	local tPhrase = tPhr[tostring(idPhase)]
	--/ Check on repeating phrases.
	if tSelNPC then
		--/ If checks not remembered phrase
		if tSelNPC.phrase ~= tPhrase.phr_id then
--			log("precondition:not memory Phrase=[%s]~=[%s]", tSelNPC.phrase, tPhrase.phr_id) --/#~#
			return false --/>
		elseif tSelNPC.count >= 1 then
			return false --/>
		end
	end	
	--/ Determine if this phrase avaliable:
	if tPhrase then
		local bAllow,iCntProperty = calculate_predicate(oNPC, tPhrase)
		return bAllow --/>
	end
	log("precondition:NPC=[%s],Phrase(%s)=NIL:<%s>", oNPC and oNPC:name(), idPhase, "Error!") --/#~#
	return false --/>
end
--/ ---------------------------------------------
function calculate_predicate(oNPC, tPhrase, tSettings)
	local oActor = db.actor
	local iCntProperty = 0
	if not (oActor and oNPC and tPhrase) then
		log("calculate_predicate:NPC=[%s],Phrase=NIL:<%s>", oNPC and oNPC:name(), "Warning!") --/#~#
		return false,iCntProperty --/>
	end
	if tPhrase.level then
		if not tPhrase.level[db.sMapNow] then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	if tPhrase.npc_community then
		if not tPhrase.npc_community[oNPC:character_community()] then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	if tPhrase.wounded ~= nil then
		if tPhrase.wounded then --/ == true
			if not this.is_wounded(oNPC) then return false,iCntProperty end --/>
		else
			if this.is_wounded(oNPC) then return false,iCntProperty end --/>
		end
		iCntProperty = iCntProperty +1
	end
	if tPhrase.relation then
		local tNameRelations = {
			[game_object.neutral] = "neutral",
			[game_object.friend]  = "friend",
			[game_object.enemy]   = "enemy"
		}
		local sRelation = tNameRelations[oNPC:relation(oActor)] or ""
		if not tPhrase.relation[sRelation] then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	if tPhrase.community then
		if not tPhrase.community[oActor:character_community()] then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	if tPhrase.npc_rank then
		local iRank = type(oNPC.character_rank) == "function" and oNPC:character_rank()
		if not (iRank and iRank > tPhrase.npc_rank) then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	if tPhrase.condlist then
		if xr_logic.pick_section_from_condlist(oActor, oNPC, tPhrase.condlist) ~= "true" then return false,iCntProperty end --/>
		iCntProperty = iCntProperty + #v.infop_check
	end
	if tPhrase.smart_terrain then
		local isStrn = npc:smart_terrain_id() or 65535
		local soStrn = isStrn ~= 65535 and alife():object(isStrn)
		if not soStrn or soStrn:name() ~= tPhrase.smart_terrain then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	if tPhrase.price then
		if tPhrase.price > oActor:money() and not (tSettings and tSettings.no_price) then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	if tPhrase.parent then --/ soNPC:profile_name()
		if not tPhrase.parent[oNPC:name()] then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	if tPhrase.article_info then
		if has_any_info_portions(tPhrase.article_info) then return false,iCntProperty end --/>
		iCntProperty = iCntProperty +1
	end
	return true, iCntProperty --/>
end

--/ -----------------------------------------------------------------
--/ Pre-checks: allowed dialogs or not (oSpeaker1-actor, oSpeaker2-npc)
--/ -----------------------------------------------------------------
function precondition_info_global(oSpeaker1, oSpeaker2, sDlgId, idParent, idPhase)
	if oSpeaker1:id() == idActor then
		return not this.is_wounded(oSpeaker2) --/>
	else
		return not this.is_wounded(oSpeaker1) --/>
	end
end
function precondition_help_wounded_medkit_global(...)
	return dialogs.allow_wounded_dialog(...)
		 and dialogs.is_opp_wounded(...)
		 and dialogs.actor_have_medkit(...) --/>
end
function precondition_cool_info_global(...)
	return precondition_info_not_timeout(...)
		 and precondition_info_not_enemy(...)
		 and precondition_info_global(...) --/>
end
function precondition_action_info_global(...)
	return precondition_info_not_timeout(...)
		 and precondition_info_not_enemy(...)
		 and precondition_info_global(...) --/>
end
function precondition_story_info_global(...)
	return precondition_info_not_timeout(...)
		 and precondition_info_not_enemy(...)
		 and precondition_info_global(...) --/>
end
function precondition_jokes_info_global(...)
	return precondition_info_not_timeout(...)
		 and precondition_info_not_enemy(...)
		 and precondition_info_global(...) --/>
end

function precondition_info_novice(oSpeaker1, oSpeaker2)
	return dialogs.is_novice(oSpeaker1) --/>
end
function precondition_info_not_novice(oSpeaker1, oSpeaker2)
	return dialogs.is_not_novice(oSpeaker2) --/>
end
function precondition_info_not_enemy(oSpeaker1, oSpeaker2)
	return dialogs.is_not_enemy(oSpeaker2,oSpeaker1) --/>
end

function is_wounded(oNPC,idNPC)
	if not idNPC then idNPC = oNPC:id() end
	if xr_wounded.is_wounded(oNPC,idNPC) or
		 xr_wounded.is_heavy_wounded_by_id(idNPC) or
		 xr_wounded.is_psy_wounded_by_id(idNPC)
		then
		return true --/>
	end
	return false --/>
end

function precondition_info_timeout(oSpeaker1, oSpeaker2, sDlgId)
	local sTimerName = sDlgId and tTimerNames[sDlgId]
	if sTimerName then
		local oNPC = Get_NPC(oSpeaker2, oSpeaker1)
		local iTimeOut = Get_TimeOut(oNPC,sTimerName)
		if iTimeOut then
			if iTimeOut > Get_PastMinutes() then
				return true --/> talker has time-out
			end
			Del_TimeOut(oNPC,sTimerName) --/ cleaning
		end
	end
	return false --/>
end
function precondition_info_not_timeout(...)
	return not precondition_info_timeout(...)
end

function Get_TimeOut(oNPC,sTimerName)
	return GetVarObj(oNPC, sTimerName, nil) --/>
end
function Set_TimeOut(oNPC,sTimerName,iTimeOut) --/<
	SetVarObj(oNPC, sTimerName, iTimeOut + Get_PastMinutes())
end
function Del_TimeOut(oNPC,sTimerName)
	DelVarObj(oNPC, sTimerName)
end

--/ -----------------------------------------------------------------
--/ Save/Read
--/ -----------------------------------------------------------------
--/ Saving information about selected phrases
function save(oNPC, pk)
--	log("save:NPC=[%s]:(%s)", oNPC:name(), ">") --/#~#
	local npc_id = oNPC:id()
	--/ exclude all 2bytes 'dummy' and packing to table => next in one string
	local phrases,sPhraseSav = {}, ""
	for k,v in pairs(tCategorySav) do
		if selected_phrase_by_id[v][npc_id] then
			local idPhrase = selected_phrase_by_id[v][npc_id].phrase
			if idPhrase ~= "-1" then --/ saving only relevant index of phrases
				phrases[k] = idPhrase
			end
		end
	end
	if next(phrases) then
		sPhraseSav = table.compress(phrases) --/ packing to string
--		log("save:NPC=[%s],String_Phrases(%s)=[%s]", oNPC:name(), string.len(tostring(sPhraseSav)), sPhraseSav, "") --/#~#
	end
	pk:w_stringZ(sPhraseSav)
end
--/ Reading/loading of information about selected phrases
function load(oNPC, pk)
	if not selected_phrase_by_id then
		log(":load:Create_Table:NPC=[%s]:<%s>", oNPC:name(), "Info!") --/#~#
		this.Build_Tables(ini_file("misc\\dialog_manager.ltx")) --/ reading/filling tables
	end
--	log("load:NPC=[%s]:(%s)", oNPC:name(), ">") --/#~#
	
	local phrases = pk:r_stringZ() --/ reading common string
	if phrases ~= "" then --/ string has packed table
		phrases = table.decompress(phrases) --/ unpacking table
		local npc_id = oNPC:id()
		for k,v in pairs(phrases) do
			local sCategory = tCategorySav[k]
			if sCategory then
				if v ~= "-1" then  --log("load:NPC=[%s],category=[%s],idPhrase=[%s]", oNPC:name(), sCategory, v, "") --/#~#
					selected_phrase_by_id[sCategory][npc_id] = { phrase=v, count=0 }
				elseif selected_phrase_by_id[sCategory] then
					selected_phrase_by_id[sCategory][npc_id] = nil
				end
			else
				log("load:NPC=[%s],idx_cat(%s)=[%s]:<%s>", oNPC:name(), k, v, "Error!") --/#~#
			end
		end
	end
end
--/ -----------------------------------------------------------------------------------------------