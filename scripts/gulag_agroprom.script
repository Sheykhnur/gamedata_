--[[ ----------------------------------------------------------------------------------------------
 File       : gulag_agroprom.script
 Description: Gulags Agroprom
 Copyright  : 2013 © LA-team
 Author     : ...
 Editors    : vintar(03.09.2012), lox(23.02.2013), vintar(15.07.2013)
 Last edit  : 19.04.2017 [loxotron]
--]] ----------------------------------------------------------------------------------------------
-- in and out restrictors intersect one another, it won't work this way
--/ ----------------------------------------------------------------
--/ VARIABLEs
--/ ----------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------------------------------------
--/ General VARIABLEs
--/ -----------------------------------------------------------------------------------------------
local gulags = {
	--/ for stalkers ------------------------------
	agr_nii                    = {comm = {"military", "stalker"}},
	agr_factory_assault        = {comm = {"military"}},
	agr_road_patrol1           = {comm = {"military"}},
	agr_road_patrol2           = {comm = {"military"}},
	agr_factory_hold           = {comm = {"military"}},
	agr2_bandit_st             = {comm = {"bandit"}},
	agr_defector_terrain       = {comm = {"stalker"}},
	agr_krot_terrain           = {comm = {"stalker"}},
	agr2_st_factory            = {comm = {"stalker", "bandit", "clear_sky"}},
	agr_factory_defence        = {comm = {"stalker"}},
	agr_stalker_tunnel_terrain = {comm = {"stalker"}},
	agr_ratcatcher_terrain	   = {comm = {"stalker"}},
	agr_fake_battle			   = {comm = {"military","stalker"}},
	--/ for monsters ------------------------------
	agr_ug_rat_lair      			 = {comm = {"rat","tushkano"}},
	agr_ug_burer_terrain    		 = {comm = {"burer"}},
	agr_ug_bloodsucker_terrain		 = {comm = {"bloodsucker"}},
	agr_ug_zombie_terrain      		 = {comm = {"zombie"}},
	agr2_flesh_nes1            		 = {comm = {"flesh"}},
	agr_boar_nest             		 = {comm = {"boar"}},
	agr_dog_nest1              		 = {comm = {"dog"}},
	agr_rush                   		 = {comm = {"dog"}},
	ladc_agro_boar_terrain1    		 = {comm = {"boar"}},
	ladc_agro_boar_terrain2	  		 = {comm = {"boar"}},
	agr_ug_dwarf_ladc_terrain 		 = {comm = {"karlik"}},
	agr_ug_controller_ladc_terrain	 = {comm = {"controller"}},
	agr_ug_ladc_rat_lair      		 = {comm = {"rat","tushkano"}},
}
--/ ----------------------------------------------
local agr_mob_in_rest1  = "agr_collector_entrance1,agr_collector_entrance2,agr_collector_entrance3,agr_collector_entrance4,agr_collector_entrance5,agr_ug_stairwell_restrictor1,ladc_nii_space_restrictor_0000"
local agr_mob_in_rest2  = "agr_collector_entrance1,agr_collector_entrance2,agr_collector_entrance3,agr_collector_entrance4,agr_collector_entrance5,agr_ug_stairwell_restrictor1,ladc_nii_space_restrictor_0000,agr_ug_weather_restrictor,agr_ratcatcher_restrictor,agr_factory_hold_restrictor"
local agr_npc_in_rest1  = "agr_collector_entrance1,agr_krot_restrictor"
local agr_mob_out_rest  = "agr_ug_weather_restrictor,agr_ug_weather_restrictor_new"
local agr_mob_out_rest2 = "agr_ug_weather_restrictor_new"	
--/ -----------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------
function getGulag(gtype)
	return gulags[gtype] --/>
end
--/ ----------------------------------------------
local is_online = "{=xr_gulag.actor_on_gulag_level()}"
--/ ----------------------------------------------
local on_level_pred = function(info,gulag) return xr_gulag.is_on_gulag_level(info.se_obj,gulag) end
--/------------------------------------------------------------------------------------------------
--/ Gulags
--/------------------------------------------------------------------------------------------------
--/ agr_road_patrol1
--/ ---------------------------------------------
local agr_road_patrol1_pred = function(info)
	return info.name == "agr_road_patrol_soldier1" or info.name == "agr_road_patrol_soldier_0000" or
	       info.name == "agr_zastava2_soldier1" or info.name == "agr_zastava2_soldier2" or info.name == "agr_zastava2_soldier3"
end

gulags.agr_road_patrol1.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 5 do
		table.insert(sj, gulag_tasks.getJob("patrol"..i, 0, 5, {0}, squad, groups[1], "", "", nil, type, agr_road_patrol1_pred))
	end
end

--/ ---------------------------------------------
--/ agr_road_patrol2
--/ ---------------------------------------------
local agr_road_patrol2_pred = function(info)
	return info.name == "agr_zastava1_soldier1" or info.name == "agr_zastava1_soldier2"
end

gulags.agr_road_patrol2.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("patrol"..i, 0, 5, {0}, squad, groups[1], "", "", nil, type, agr_road_patrol2_pred))
	end
end

--/ ---------------------------------------------
--/ agr_nii
--/ ---------------------------------------------
local agr_nii_commander_pred = function(info) return info.name == "agr_nii_commander" end
--local agr_nii_common_pred = function(info) return info.name:match("^agr_nii_soldier") ~= nil end

gulags.agr_nii.jobs = function(sj, gname, type, squad, groups, gulag)
	--/ commander
	table.insert(sj, gulag_tasks.getJob("day_commander",   0, 9, {0,4},   squad, groups[1], "", "", nil, type, agr_nii_commander_pred))
	table.insert(sj, gulag_tasks.getJob("night_commander", 0, 9, {1,2}, squad, groups[1], "", "", nil, type, agr_nii_commander_pred))
	table.insert(sj, gulag_tasks.getJob("alarm_commander", 0, 9, {3},   squad, groups[1], "", "", nil, type, agr_nii_commander_pred))
	table.insert(sj, gulag_tasks.getJob("east_gate_walker1", 0, 3, {0,1,2,3}, squad, groups[1], "agr_nii_sr_building", "agr_nii_space_restrictor", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("east_gate_walker2", 0, 3, {0,1,2,3}, squad, groups[1], "", "agr_nii_space_restrictor", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor1_day_walker1", 0, 3, {0,1,2},   squad, groups[1], "", "agr_nii_sr_building", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor1_alarm_walker1", 0, 3, {3},     squad, groups[1], "", "agr_nii_sr_building", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor1_day_walker2", 0, 3, {0,1,2},   squad, groups[1], "", "agr_nii_sr_building", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor1_alarm_walker2", 0, 3, {3},     squad, groups[1], "", "agr_nii_sr_building", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor2_day_walker1", 0, 3, {0,1,2},   squad, groups[1], "", "agr_nii_sr_building", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor2_alarm_walker1", 0, 3, {3},     squad, groups[1], "", "agr_nii_sr_building", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor2_day_walker2", 0, 3, {0,1,2,3}, squad, groups[1], "", "agr_nii_sr_building", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor3_walker1",     0, 4, {0,1,2,3}, squad, groups[1], "", "agr_nii_sr_building", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor3_walker2",     0, 4, {0,1,2,3,4}, squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("north_gate_walker1", 0, 4, {0,1,2,3,4}, squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("north_gate_walker2", 0, 4, {0,1,2,3,4}, squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("east_gate_walker1_out", 0, 3, {4}, squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("east_gate_walker2_out", 0, 3, {4}, squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor1_day_walker1_out", 0, 3, {4},   squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor1_day_walker2_out", 0, 3, {4},   squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor2_day_walker1_out", 0, 3, {4},   squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor2_day_walker2_out", 0, 3, {4}, squad, groups[1], "", "", nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("floor3_walker1_out",     0, 4, {4}, squad, groups[1], "", "", nil, type, on_level_pred))
end

gulags.agr_nii.state = function(gulag)
	--if not db.actor then return gulag.state end --/>
	if has_info("agroprom_military_case_done") then
		return 4
	else
		local alarm = false
		if has_info( "agr_nii_sniper_alarm" ) then
			alarm = true
		else
			for k,v in pairs(gulag.Object) do
				if v ~= true and v:best_enemy() and v:best_enemy():id() == idActor then
					alarm = true
					break
				end
			end
		end
		
		if alarm then
			if not has_info( "agr_nii_alarm" ) then
				give_info( "agr_nii_alarm" )
			end
			return 3 --/>
		end
		if has_info( "agr_nii_alarm" ) then
			disable_info( "agr_nii_alarm" )
		end
		
		local hour = level.get_time_hours()
		if hour >= 6 and hour < 21 then
			return 0 --/> day
		elseif hour >= 23 then
			return 2 --/> night with shifts
		end
		return 1 --/> night
	end
end

--/ ---------------------------------------------
--/ agr_krot_terrain
--/ ---------------------------------------------

gulags.agr_krot_terrain.krot_pred = function(info) return info.name == "agr_krot" end

gulags.agr_krot_terrain.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("battle", 0, 7, {0}, squad, groups[1], "", "", nil, type, gulags.agr_krot_terrain.krot_pred))
end

gulags.agr_krot_terrain.state = function(gulag)
	return 0
end

--/ ---------------------------------------------
--/ agr_defector_terrain
--/ ---------------------------------------------

gulags.agr_defector_terrain.defector_pred = function(info) return info.name == "agr_defector_stalker1" end

gulags.agr_defector_terrain.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("wait", 0, 7, {0}, squad, groups[1], "", "", nil, type, gulags.agr_defector_terrain.defector_pred))
end

gulags.agr_defector_terrain.state = function(gulag)
	return 0
end

--/ ---------------------------------------------
--/ agr_ratcatcher_terrain
--/ ---------------------------------------------

gulags.agr_ratcatcher_terrain.ratcatcher_pred = function(info) return info.name == "agr_ratcatcher" end

gulags.agr_ratcatcher_terrain.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("hiding", 0, 7, {0}, squad, groups[1], "", "", nil, type, gulags.agr_ratcatcher_terrain.ratcatcher_pred))
end

gulags.agr_ratcatcher_terrain.state = function(gulag)
	return 0
end

--/ ---------------------------------------------
--/ agr_factory_assault (attack Mole group)
--/ ---------------------------------------------
gulags.agr_factory_assault.jobs = function(sj, gname, type, squad, groups, gulag)
	--/ waiting during cutscene (going to defenders)
	for _,i in ipairs({1,2,3,4,11}) do --/ 5
		table.insert(sj, gulag_tasks.getJob("walker"..i, 0, 0, {0}, squad, groups[1], "", "agr_factory_assault_out_restrictor", nil, type, function(info) return info.name == ("agr_factory_assault_soldier"..i) end))
	end
	for _,i in ipairs({5,6,7,8,9,10}) do --/ 6
		table.insert(sj, gulag_tasks.getJob("walker"..i, 0, 0, {0}, squad, groups[1], "", "agr_factory_assault_out_restrictor2", nil, type, function(info) return info.name == ("agr_factory_assault_soldier"..i) end))
	end
	--/ assault ------------------------------------------
	for _,i in ipairs({1,2,3,4,11}) do --/ 5
		table.insert(sj, gulag_tasks.getJob("skirmish_walker"..i, 0, 0, {1}, squad, groups[1], "", "agr_factory_assault_out_restrictor", nil, type, function(info) return info.name == ("agr_factory_assault_soldier"..i) end))
	end
	for _,i in ipairs({5,6,7,8,9,10}) do --/ 6
		table.insert(sj, gulag_tasks.getJob("skirmish_walker"..i, 0, 0, {1}, squad, groups[1], "", "agr_factory_assault_out_restrictor2", nil, type, function(info) return info.name == ("agr_factory_assault_soldier"..i) end))
	end
	--/ bld walkers ------------------------------------------
	for i = 1, 11 do
		table.insert(sj, gulag_tasks.getJob("bld_walker"..i, 0, 0, {2}, squad, groups[1], "", "agr_factory_hold_restrictor", nil, type, function(info) return info.name == ("agr_factory_assault_soldier"..i) end))
	end
end

gulags.agr_factory_assault.state = function(gulag)
	--if not db.actor then return gulag.state end --/>
	
	if 	has_info("agr_defence_cleared") then
		return 2
	elseif (has_info("agr_krot_skirmish_start") and has_info("agr_help_stalkers_done")) then
		return 2 --/>
	elseif has_info("agr_actor_close") then
		return 1 --/>
	end
	return 0 --/>
end

--/ ---------------------------------------------
--/ agr_factory_defence
--/ ---------------------------------------------
local agr_factory_defence_name_pred = function(info)
	return info.name:match("^agr_factory_defence_stalker") ~= nil
end
local agr_factory_defence_waiting_pred = function(info)
	return tasks_agroprom.is_defence_waiting(info.name) == true
end
local agr_factory_defence_pred = function(info)
	return  info.name:match("^agr_factory_defence_stalker") and not tasks_agroprom.is_defence_waiting(info.name)
end

gulags.agr_factory_defence.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 9 do
		table.insert(sj, gulag_tasks.getJob("walker"..i,          0, 0, {0}, squad, groups[1], "agr_factory_hold_restrictor", "agr_factory_defence_out_restrictor", nil, type, agr_factory_defence_pred))
		table.insert(sj, gulag_tasks.getJob("skirmish_walker"..i, 0, 0, {1}, squad, groups[1], "agr_factory_hold_restrictor", "agr_factory_defence_out_restrictor", nil, type, agr_factory_defence_pred))
	end
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("waiting_stalker"..i, 0, 0, {0,1}, squad, groups[1], "agr_factory_hold_restrictor", "agr_factory_defence_out_restrictor", nil, type, agr_factory_defence_waiting_pred))
	end
	for i = 1, 12 do
		table.insert(sj, gulag_tasks.getJob("krot_walker"..i,    0, 0, {2}, squad, groups[1], "", "agr_factory_hold_restrictor", nil, type, agr_factory_defence_name_pred))
		table.insert(sj, gulag_tasks.getJob("to_well_walker"..i, 0, 0, {3}, squad, groups[1], agr_npc_in_rest1, "", nil, type, agr_factory_defence_name_pred))
	end
end

gulags.agr_factory_defence.state = function(gulag)
	--if not db.actor then return gulag.state end --/>
	
	if has_info( "agr_krot_go_to_well" ) then
		return 3 --/>
	elseif has_info("agr_assault_cleared") then
		return 2 --/>
	elseif has_info( "agr_actor_close" ) then
		return 1 --/>
	end
	return 0 --/>
end

--/ ---------------------------------------------
--/ agr_factory_hold
--/ ---------------------------------------------
local agr_factory_hold_common_pred = function(info) return info.name:match("^agr_factory_hold_soldier") ~= nil end

gulags.agr_factory_hold.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 6 do
		table.insert(sj, gulag_tasks.getJob("fake_walker"..i, 0, 0, {0}, squad, groups[1], "", "agr_factory_hold_restrictor", nil, type, agr_factory_hold_common_pred))
		table.insert(sj, gulag_tasks.getJob("walker"..i,      0, 0, {1}, squad, groups[1], "", "agr_factory_hold_restrictor", nil, type, agr_factory_hold_common_pred))
		table.insert(sj, gulag_tasks.getJob("walker"..i,      0, 0, {2}, squad, groups[1], "", "", nil, type, agr_factory_hold_common_pred))
	end
end

gulags.agr_factory_hold.state = function(gulag)
	--if not db.actor then return gulag.state end
	
	if has_info( "agr_krot_dead" ) then
		return 2
	elseif gulag.state == 1 then
		return 1
	elseif gulag.state == 0 then
		if has_info( "agr_krot_skirmish_start" ) then
			local h     = hit()
			h.power     = 0.01
			h.direction = vector():set(1,0,0)
			h.draftsman = db.actor
			h.impulse   = 1
			h.type      = hit.wound
			
			for k,v in pairs(gulag.Object) do
				if v ~= true then
					v:hit( h )
				end
			end
			
			return 1
		end
		return 0
	end
	return 0
end
	
--/ ---------------------------------------------
--/ agr2_bandit_st
--/ ---------------------------------------------
gulags.agr2_bandit_st.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 6 do
		table.insert(sj, gulag_tasks.getJob("bandit"..i, 0, 5, {0}, squad, groups[1], "", "", nil, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("kamper"..i, 0, 5, {1}, squad, groups[1], "", "", nil, type, on_level_pred))
	end
end
	
gulags.agr2_bandit_st.state = function(gulag)
	if level.get_time_hours() >= 6 and level.get_time_hours() < 20 then
		return 0
	end
	return 1
end
	
--/ ---------------------------------------------
--/ agr_stalker_tunnel_terrain
--/ ---------------------------------------------
local agr_stalker_tunnel_terrain_krot_pred    = function(info) return info.name == "agr_krot" end
local agr_stalker_tunnel_terrain_guard_pred   = function(info) return info.name == "agr_stalker_tunnel_guard" end
local agr_stalker_tunnel_terrain_fixer_pred   = function(info) return info.name == "agro_new_fixer" end
local agr_stalker_tunnel_terrain_guide_pred   = function(info) return info.name == "agro_lager_guide" end
local agr_stalker_tunnel_terrain_sleeper_pred = function(info) return info.name:match("agr_stalker_tunnel_sleeper[1|2]") ~= nil end
gulags.agr_stalker_tunnel_terrain.jobs = function(sj, gname, type, squad, groups, gulag)
	table.insert(sj, gulag_tasks.getJob("kamper",       0, 9, {0}, squad, groups[1], "", "", nil, type, agr_stalker_tunnel_terrain_krot_pred))
	table.insert(sj, gulag_tasks.getJob("patrol1",	 	0, 6, {0,1}, squad, groups[1], "", "", nil, type, nil))
	table.insert(sj, gulag_tasks.getJob("patrol2",	 	0, 4, {0}, squad, groups[1], "", "", nil, type, nil))
	table.insert(sj, gulag_tasks.getJob("guard",        0, 8, {0,1}, squad, groups[1], "", "", nil, type, nil))
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("kamper_add"..i, 0, 5, {0}, squad, groups[1], "", "", nil, type, nil))
	end
	table.insert(sj, gulag_tasks.getJob("fixer",        0, 10, {0}, squad, groups[1], "", "", nil, type, agr_stalker_tunnel_terrain_fixer_pred))
	table.insert(sj, gulag_tasks.getJob("fixer_sleep",  0, 10, {1}, squad, groups[1], "", "", nil, type, agr_stalker_tunnel_terrain_fixer_pred))
	table.insert(sj, gulag_tasks.getJob("guide",        0, 10, {0,1}, squad, groups[1], "", "", nil, type, agr_stalker_tunnel_terrain_guide_pred))
	for i = 1, 5 do
		table.insert(sj, gulag_tasks.getJob("sleeper"..i, 0, 3, {1}, squad, groups[1], "", "", nil, type, nil))
	end
	table.insert(sj, gulag_tasks.getJob("kamper_off",       0, 7, {2}, squad, groups[1], "", "", false, type, nil))
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("patrol_off"..i, 0, 7, {2}, squad, groups[1], "", "", false, type, nil))
	end		
	table.insert(sj, gulag_tasks.getJob("guard_off",        0, 7, {2}, squad, groups[1], "", "", false, type, agr_stalker_tunnel_terrain_guard_pred))
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("kamper_add_off"..i, 0, 7, {2}, squad, groups[1], "", "", false, type, nil))
	end	
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("sleeper_off"..i, 0, 7, {2}, squad, groups[1], "", "", false, type, agr_stalker_tunnel_terrain_sleeper_pred))
	end
	for i = 3, 5 do
		table.insert(sj, gulag_tasks.getJob("sleeper_off"..i, 0, 7, {2}, squad, groups[1], "", "", false, type, nil))
	end
	table.insert(sj, gulag_tasks.getJob("fixer_off",        0, 7, {2}, squad, groups[1], "", "", false, type, agr_stalker_tunnel_terrain_fixer_pred))
	table.insert(sj, gulag_tasks.getJob("guide_off",        0, 7, {2}, squad, groups[1], "", "", false, type, agr_stalker_tunnel_terrain_guide_pred))
end

gulags.agr_stalker_tunnel_terrain.state = function(gulag)
	if not has_info("agr_krot_secret_info") then
		return 2
	elseif not xr_conditions.is_day() then
		return 1
	end
	return 0
end
	
--/ ---------------------------------------------
--/ agr2_st_factory
--/ ---------------------------------------------
local agr2_st_factory_coomon_pred = function(info) return info.name:match("^agr_factory_defence_stalker") ~= nil end
local agr2_st_factory_guard4_pred = function(info) return info.name == "agr_defector_stalker1" end

gulags.agr2_st_factory.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("kamper"..i,  0, 5, {0}, squad, groups[1], "", "", nil, type, agr2_st_factory_coomon_pred))
		table.insert(sj, gulag_tasks.getJob("sleeper"..i, 0, 5, {0}, squad, groups[1], "", "", nil, type, agr2_st_factory_coomon_pred))
		table.insert(sj, gulag_tasks.getJob("guard"..i,   0, 5, {0}, squad, groups[1], "", "", nil, type, agr2_st_factory_coomon_pred))
	end
	table.insert(sj, gulag_tasks.getJob("guard4",       0, 5, {0}, squad, groups[1], "", "", nil, type, agr2_st_factory_guard4_pred))
end

--/ ---------------------------------------------
--/ agr_ug_rat_lair
--/ ---------------------------------------------
gulags.agr_ug_rat_lair.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 16 do
		table.insert(sj, gulag_tasks.getJob("rat"..i, 0, 0, {0}, squad, groups[1], agr_mob_in_rest1, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ agr_burer_terrain
--/ ---------------------------------------------
gulags.agr_ug_burer_terrain.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("burer"..i, 0, 0, {0}, squad, groups[1], agr_mob_in_rest1, agr_mob_out_rest, nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ agr_zombie_terrain
--/ ---------------------------------------------
gulags.agr_ug_zombie_terrain.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 7 do
		table.insert(sj, gulag_tasks.getJob("zombie"..i, 0, 0, {0}, squad, groups[1], agr_mob_in_rest1, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ agr_bloodsucker_terrain
--/ ---------------------------------------------
gulags.agr_ug_bloodsucker_terrain.jobs = function(sj, gname, type, squad, groups, gulag)
	table.insert(sj, gulag_tasks.getJob("bloodsucker", 0, 0, {0}, squad, groups[1], agr_mob_in_rest1, "", nil, type, on_level_pred))
end

--/ ---------------------------------------------
--/ agr2_flesh_nes1
--/ ---------------------------------------------
gulags.agr2_flesh_nes1.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("flesh"..i, 0, 0, {0}, squad, groups[1], agr_mob_in_rest2, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ agr_boar_nest
--/ ---------------------------------------------
gulags.agr_boar_nest.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 5 do
		table.insert(sj, gulag_tasks.getJob("boar"..i, 0, 0, {0}, squad, groups[1], agr_mob_in_rest2, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ agr_dog_nest1
--/ ---------------------------------------------
gulags.agr_dog_nest1.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 5 do
		table.insert(sj, gulag_tasks.getJob("dog"..i, 0, 0, {0}, squad, groups[1], agr_mob_in_rest2, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ agr_rush
--/ ---------------------------------------------
gulags.agr_rush.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 5 do
		table.insert(sj, gulag_tasks.getJob("off_dog"..i, 0, 0, {0}, squad, groups[1], agr_mob_out_rest, "", false, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("dog"..i,     0, 0, {1}, squad, groups[1], agr_mob_out_rest, "", nil, type, on_level_pred))
	end
end

gulags.agr_rush.state = function(gulag)
	if has_info("agr_help_krot_done") then
		return 1
	end
	return 0
end
--/ ------------------------------------------------------------------------------------------------

--/ ---------------------------------------------
--/ agr_fake_battle
--/ ---------------------------------------------

gulags.agr_fake_battle.jobs = function(sj, gname, type, squad, groups, gulag)
--offline
	for i = 1,3 do
		table.insert(sj, gulag_tasks.getJob("soldier_off" .. i, 0, 5, {1}, squad, groups[1], "", "agr_fake_battle_soldier_restrictor1", false, type, function(info) return info.name == ("agr_fake_battle_soldier"..i) end))
	end
	for i = 4,8 do
		table.insert(sj, gulag_tasks.getJob("soldier_off" .. i, 0, 5, {1}, squad, groups[1], "", "agr_fake_battle_soldier_restrictor2", false, type, function(info) return info.name == ("agr_fake_battle_soldier"..i) end))
	end
	table.insert(sj, gulag_tasks.getJob("soldier_off9", 0, 5, {1}, squad, groups[1], "", "agr_fake_battle_soldier_restrictor1", false, type, function(info) return info.name == ("agr_fake_battle_soldier9") end))
	for i = 1,4 do
		table.insert(sj, gulag_tasks.getJob("stalker_off" .. i, 0, 5, {1}, squad, groups[2], "", "agr_fake_battle_stalker_restrictor1", false, type, function(info) return info.name == ("agr_fake_battle_stalker"..i) end))
	end
	for i = 5,7 do
		table.insert(sj, gulag_tasks.getJob("stalker_off" .. i, 0, 5, {1}, squad, groups[2], "", "agr_fake_battle_stalker_restrictor2", false, type, function(info) return info.name == ("agr_fake_battle_stalker"..i) end))
	end
	
--online/offline
	for i = 1,3 do
		table.insert(sj, gulag_tasks.getJob("soldier" .. i, 0, 5, {0}, squad, groups[1], "", "agr_fake_battle_soldier_restrictor1", nil, type, function(info) return info.name == ("agr_fake_battle_soldier"..i) end))
	end
	for i = 4,8 do
		table.insert(sj, gulag_tasks.getJob("soldier" .. i, 0, 5, {0}, squad, groups[1], "", "agr_fake_battle_soldier_restrictor2", nil, type, function(info) return info.name == ("agr_fake_battle_soldier"..i) end))
	end
	table.insert(sj, gulag_tasks.getJob("soldier9", 0, 5, {0}, squad, groups[1], "", "agr_fake_battle_soldier_restrictor1", nil, type, function(info) return info.name == ("agr_fake_battle_soldier9") end))
	for i = 1,4 do
		table.insert(sj, gulag_tasks.getJob("stalker" .. i, 0, 5, {0}, squad, groups[2], "", "agr_fake_battle_stalker_restrictor1", nil, type, function(info) return info.name == ("agr_fake_battle_stalker"..i) end))
	end
	for i = 5,7 do
		table.insert(sj, gulag_tasks.getJob("stalker" .. i, 0, 5, {0}, squad, groups[2], "", "agr_fake_battle_stalker_restrictor2", nil, type, function(info) return info.name == ("agr_fake_battle_stalker"..i) end))
	end
end

gulags.agr_fake_battle.state = function(gulag)
	if has_info("agr_fake_battle") then
		return 0
	end
return 1
end

--/ ---------------------------------------------
--/ ladc_agro_boar_terrain1
--/ ---------------------------------------------
gulags.ladc_agro_boar_terrain1.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("boar"..i, 0, 5, {0}, squad, groups[1], agr_mob_in_rest1, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ ladc_agro_boar_terrain2
--/ ---------------------------------------------
gulags.ladc_agro_boar_terrain2.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("boar"..i, 0, 5, {0}, squad, groups[1], agr_mob_in_rest1, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ agr_ug_dwarf_ladc_terrain
--/ ---------------------------------------------
gulags.agr_ug_dwarf_ladc_terrain.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 4 do
		table.insert(sj, gulag_tasks.getJob("karlik"..i, 0, 5, {0}, squad, groups[1], "", agr_mob_out_rest2, nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ agr_ug_controller_ladc_terrain
--/ ---------------------------------------------
gulags.agr_ug_controller_ladc_terrain.pred = function(info) return info.name:match("^controller_underground") end

gulags.agr_ug_controller_ladc_terrain.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("controller"..i, 0, 5, {0}, squad, groups[1], agr_mob_in_rest1, agr_mob_out_rest2, nil, type, gulags.agr_ug_controller_ladc_terrain.pred))
	end
end

--/ ---------------------------------------------
--/ agr_ug_ladc_rat_lair
--/ ---------------------------------------------
gulags.agr_ug_ladc_rat_lair.jobs = function(sj, gname, type, squad, groups, gulag)
	for i = 1, 16 do
		table.insert(sj, gulag_tasks.getJob("rat"..i, 0, 5, {0}, squad, groups[1], agr_mob_in_rest1, agr_mob_out_rest2, nil, type, nil))
	end
end
