--[[-----------------------------------------------------------------------------------------------
 File       : sr_postprocess.script
 Description: Зоны пси-излучения. Отыгрывают постпроцесс и фантомов по настройкам из custom_data
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Editors    : 
 Last edit  : 29.11.2017 [lox]
--]]-----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------
--/ CLASS CONSTRUCTION --/ класс, отвечающий за постпроцесс и фантомов
--/ -----------------------------------------------------------------------------------------------
class "PPEffector" (effector)
--/ -----------------------------------------------------------------------------------------------
function PPEffector:__init(id_number) super(id_number, 10000000)
	self.params = effector_params()
end
--/ ---------------------------------------------
--/ PROCESs
--/ ---------------------------------------------
function PPEffector:process(pp)
	pp:assign(self.params)
	effector.process(self,pp)
	return true
end
--/ ---------------------------------------------
--/ SCHEME CONSTRUCTION
--/ -----------------------------------------------------------------------------------------------
class "action_postprocess"
--/ -----------------------------------------------------------------------------------------------
function action_postprocess:__init (obj, st)
	self.object = obj
	self.st     = st
	self.log    = st.log
	self.actor_inside = false
	--self.first 			= true
	--self.pp = nil
end
--/------------------------------------------------------------------
--/ RESET SCHEME
--/------------------------------------------------------------------
function action_postprocess:reset_scheme()
	if self.log then log("ac:reset_scheme:Obj=[%s]:(%s)", self.object:name(), ">") end --/#~#
	self.actor_inside = false
	--/ ----------------
	--/ postprocess
	--/ ----------------
	self.gray_amplitude = 1.0                  --/ gray max intensity [0.0-1.0]
	self.gray_color     = color(0.5, 0.5, 0.5) --/ RGB [0.0-1.0]
	self.base_color     = color(0.5, 0.5, 0.5) --/ RGB [0.0-1.0]
	self.noise_var      = noise(0.9, 0.5, 30)  --/ intensity, grain, fps [0.0-1.0,0.0-1.0,1-100]
	self.eff_time       = 0
	self.hit_time       = 0
	self.intensity      = 0
	self.intensity_base = self.st.intensity
	self.old_time       = time_global()
	--self.hit_power      = 0
	
	if self.intensity_base < 0.0 then
		self.intensity_inertion = -self.st.intensity_speed
	else
		self.intensity_inertion = self.st.intensity_speed
	end
	
	self.pp = PPEffector(self.object:id() + 2000)
	self.pp.params.noise = noise()
	self.pp:start()

	self.gray  = 1
	self.noise = noise(1.0, 0.3, 30)
end
--/------------------------------------------------------------------
--/ DEACTIVATE SCHEME
--/------------------------------------------------------------------
function action_postprocess:deactivate()
	--if self.first then self.first = false return end
	--if self.state == state_inside then --/#?#
		self.pp:finish()
		--level.set_snd_volume(self.snd_volume) --/#x# fix
		--self:zone_leave() --/#x# fix
	--end
end
--/------------------------------------------------------------------
--/ UPDATE
--/------------------------------------------------------------------
function action_postprocess:update(delta)
	if xr_logic.try_switch_to_another_section (self.object, self.st, db.actor) then
		return
	end
	
	self.actor_inside = self.object:inside( db.actor:position() )

	local c_time = (time_global() - self.old_time) * 0.001
	self.old_time = time_global()
	--local c_time = delta * 0.001
	
	if self.actor_inside == true then
		self.intensity = self.intensity + self.intensity_inertion * c_time
		if self.intensity_base < 0.0 then
			if self.intensity < self.intensity_base then self.intensity = self.intensity_base end
		else
			if self.intensity > self.intensity_base then self.intensity = self.intensity_base end
		end
	else
		if self.intensity_base < 0.0 then
			self.intensity = self.intensity - self.intensity_inertion * c_time
			if self.intensity > 0.0 then self.intensity = 0.0 end
		else
			self.intensity = self.intensity - self.intensity_inertion * c_time
			if self.intensity < 0.0 then self.intensity = 0.0 end
		end
	end
	--log("intensity=[%s] intensity_base=[%s] intesity_inertion=[%s]", self.intensity, self.intensity_base, self.intensity_inertion)
	--self.intensity = 1

	self.pp.params.color_base = self.base_color
	self.pp.params.color_gray = color (self.gray_color.r + self.intensity, self.gray_color.g + self.intensity, self.gray_color.b +  self.intensity) --/color (0.5 + self.base_color.r * self.intensity, 0.5 + self.base_color.g * self.intensity, 0.5 + self.base_color.b * self.intensity)
	self.pp.params.gray       = self.gray_amplitude * self.intensity
	self.pp.params.noise      = noise (self.noise_var.intensity * self.intensity, self.noise_var.grain, self.noise_var.fps)

	self:update_hit(delta)
	--self.first = false
end
--/------------------------------------------------------------------
--/ SERVICE FUNCTIONs
--/------------------------------------------------------------------
function action_postprocess:update_hit(delta)
	if self.actor_inside then
		self.hit_power = (self.hit_power or 0) + (delta * 0.001) * self.st.hit_intensity
		if self.hit_time < time_global() then
			self.hit_time = time_global() + 1000
--			log("HIT POWER = %f", self.hit_power) --#~#
			local h = hit()
			h.direction = vector():set(0, 0, 0)
			h.draftsman = self.object --db.actor
			h.power = self.hit_power
			h.impulse = 0
			
			h.type = hit.radiation
			db.actor:hit(h)
			
			h.type = hit.shock
			db.actor:hit(h)
		end
	elseif self.hit_power then
		self.hit_power = nil
	end
end
--/ -----------------------------------------------------------------------------------------------
--/ BINDER
--/ -----------------------------------------------------------------------------------------------
function add_to_binder(obj, ini, scheme, section, st)
--	log("add_to_binder:Obj=[%s],scheme=[%s],section=[%s]", obj:name(), scheme, section, "") --/#~#
	local oNewAction = this.action_postprocess (obj, st)
	--/ регистрация 'action', для вызова метода 'reset_scheme' при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(obj, st, oNewAction)
end
--/------------------------------------------------------------------
--/ SET SCHEME
--/------------------------------------------------------------------
function set_scheme(obj, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(obj, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, obj)
	
	st.intensity       = utils.cfg_get_number(ini, section, "intensity",       obj, true) --* 0.01
	st.intensity_speed = utils.cfg_get_number(ini, section, "intensity_speed", obj, true) --* 0.01
	st.hit_intensity   = utils.cfg_get_number(ini, section, "hit_intensity",   obj, true)
	if st.log then log("set_scheme:Obj=[%s],scheme=[%s],section=[%s]", obj:name(), scheme, section, "") end --/#~#
end
--/ -----------------------------------------------------------------------------------------------