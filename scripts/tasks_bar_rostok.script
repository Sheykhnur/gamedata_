--[[-----------------------------------------------------------------------------------------------
 File       : tasks_bar_rostok.script
 Description: Tasks bar_rostok
 Copyright  : 2010 © LA-team
 Author     : vintar, lox
 Editors    : vintar, lox
 Last edit  : 22.06.18 (tomilovsenya) – PDA messages fix
--]]-----------------------------------------------------------------------------------------------

--/------------------------------------------------------------------
--/ VARIABLEs
--/------------------------------------------------------------------
local arena_tbl = {
	"bar_arena_monstr_dead_1_1",
	"bar_arena_monstr_dead_1_2"
}

local manager_tbl = {
	"bar_arena_manager_info_1",
	"bar_arena_manager_info_2",
	"bar_arena_manager_info_3"
}

local plichko_tbl = {
	"bar_zastava_mark_bar",
	"bar_zastava_mark_duty",
	"bar_zastava_mark_arena"
}

local pseudo_tbl = {
	"bar_pseudo_dead1",
	"bar_pseudo_dead2",
	"bar_pseudo_dead3",
	"bar_pseudo_dead4",
	"bar_pseudo_dead5"
}

local ivancov_tbl = {
	"bar_ivancov_here",
	"bar_ivancov_selling",
	"bar_ivancov_upgrading"
}

--/ -------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------

--/ -----------------------------------------------------------------------------------------------
--/ General process
--/ -----------------------------------------------------------------------------------------------
function proceed(obj, sEvent)
	if sEvent == "item_take" then
		if obj:section() == "bar_rpg" then
			give_info("bar_rpg_found")
		end
	end
	if arena_tbl and has_info_portions(arena_tbl) and not has_info("bar_arena_dogs_defeated") then
		arena_tbl = nil
		disable_info("bar_arena_monstr_dead_1_1")
		disable_info("bar_arena_monstr_dead_1_2")
		give_info("bar_arena_monstr_dead")
		give_info("bar_arena_dogs_defeated")
		give_info("bar_arena_door_1_open")
	elseif manager_tbl and has_info_portions(manager_tbl) then
		manager_tbl = nil
		give_info("bar_arena_manager_info_spoke_all")
	elseif plichko_tbl and has_info_portions(plichko_tbl) then
		plichko_tbl = nil
		give_info("bar_spoke_plichko")
	elseif pseudo_tbl and has_info_portions(pseudo_tbl) then
		pseudo_tbl = nil
		give_info("bar_pass_cleared")
	elseif ivancov_tbl and has_info_portions(ivancov_tbl) then
		ivancov_tbl = nil
		give_info("bar_ivancov_spoke_all")
	end
	if db.sMapNow == "la05_bar_rostok" and has_info("bar_actor_jumped") and not has_info("bar_actor_jumped_finished") then
		give_info("bar_actor_jumped_finished")
		this.bar_dolg_task_actor_pos()
	end
	if has_info("bar_arena_monstr_dead") and not has_info("bar_arena_mute") then
		give_info("bar_arena_mute")
	end
end

function process_info_portion(info_id)
	if info_id == "rosf_petrenko_meet_done" then
		dialogs.give_items("ros_lab_key", 1)
		return true --/>
	end
	if not info_id:match('^bar_') then
		return false --/>
	end
	if info_id == "bar_attack_helis_complete" then
		if has_info("bar_hunter_told_weapon") and not has_info("bar_hunter_task_finished") then
			start_real_timer(10, nil, {tip = {game.translate_string("hunter_message_header"), game.translate_string("out_hunter_message"), "hunter"}})
			start_real_timer(14, nil, {info_id = "bar_hunter_out_task"})
		end
		return true --/>
	end
	if info_id == "bar_attack_heli1_dead" then
		if has_info("bar_attack_heli2_dead") then
			give_info("bar_attack_helis_dead")
		end
		return true --/>
	end
	if info_id == "bar_attack_heli2_dead" then
		if has_info("bar_attack_heli1_dead") then
			give_info("bar_attack_helis_dead")
		end
		return true --/>
	end
	if info_id == "bar_petrenko_heli_task_talked" then
		start_real_timer(5, nil, {info_id = "bar_attack_heli_task_start"}) --/ 5 real secs
		return true
	end
	if info_id == "bar_out_spy_job_start" then
		dialogs.give_items("out_bug", 1)
		return true
	end
	if info_id == "bar_rpg_found" then
		if has_info("bar_petrenko_heli_task_talked") and not has_info("bar_attack_helis_dead") then
			news_manager.send_tip_hud(game.translate_string("petrenko_message_header"), game.translate_string("bar_rpg_tip"), "petrenko", 12)
		end
		return true
	end
	if info_id == "bar_tele_assistant" then
		give_info("bar_lock_door")
		start_real_timer(5, nil, {info_id = "bar_petrenko_switch"})
		return true
	end
	return false --/>
end
--/ -----------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------
function bar_dolg_task_actor_pos()
	xr_effects.teleport_actor(nil,nil,{"bar_actor_walk","bar_actor_look"})
end

function bar_lab_task()
	if has_info("ds_borov_documents_have") or has_info("ds_find_disc_task_done") then
		give_info("bar_lab_task_completed")
		return true
	end
	return false
end

--/ -----------------------------------------------------------------
--/ ARENA
--/ -----------------------------------------------------------------
function bar_arena_hit(actor, npc)
	local h = hit()
	h.power = 1
	h.direction = npc:direction()
	h.draftsman = db.actor
	h.impulse = 1
	h.type = hit.wound
	npc:hit(h)
end

function bar_arena_introduce(actor, npc)
	if db.actor:has_info("bar_arena_dogs_choosen") and not db.actor:has_info("bar_arena_pseudodog_choosen") then
		news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_dogs"), "arena", 10)
	elseif db.actor:has_info("bar_arena_pseudodog_choosen") and not db.actor:has_info("bar_arena_snork_choosen") then
		news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_pseudodog"), "arena", 10)
	elseif db.actor:has_info("bar_arena_snork_choosen") and not db.actor:has_info("bar_arena_bloodsucker_choosen") then
		news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_snork"), "arena", 10)
	elseif db.actor:has_info("bar_arena_bloodsucker_choosen") and not db.actor:has_info("bar_arena_burer_choosen") then
		news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_bloodsucker"), "arena", 10)
	elseif db.actor:has_info("bar_arena_burer_choosen")  and not db.actor:has_info("bar_arena_savage_choosen") then
		news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_burer"), "arena", 10)
	elseif db.actor:has_info("bar_arena_savage_choosen") then
		news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_savage"), "arena", 10)
	end
end

function bar_arena_fight_begin(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_begin"), "arena")
end
function bar_arena_fight_10(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_10"), "arena")
end
function bar_arena_fight_20(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_20"), "arena")
end
function bar_arena_fight_30(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_30"), "arena")
end
function bar_arena_fight_40(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_40"), "arena")
end
function bar_arena_fight_50(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_50"), "arena")
end
function bar_arena_fight_60(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_60"), "arena")
end
function bar_arena_fight_70(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_70"), "arena")
end
function bar_arena_fight_80(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_80"), "arena")
end
function bar_arena_fight_90(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_90"), "arena")
end

function bar_arena_check_lose(actor, npc)
	if has_info("bar_arena_100_p") then --/ 10 seconds
		if has_info("bar_arena_fight_10") then
			give_info("bar_arena_actor_lose")
			news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_timeout"), "arena")
		end
	elseif has_info("bar_arena_50_p") then --/ 30 seconds
		if has_info("bar_arena_fight_30") then
			give_info("bar_arena_actor_lose")
			news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_timeout"), "arena")
		end
	elseif has_info("bar_arena_20_p") then --/ 1 minute
		if has_info("bar_arena_fight_60") then
			give_info("bar_arena_actor_lose")
			news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_timeout"), "arena")
		end
	end
end

function bar_arena_after_fight(actor, npc)
	if not has_info("bar_arena_actor_lose") then
		give_info("bar_arena_actor_victory")
		news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_victory"), "arena")
	else
		news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_lose"), "arena")
	end
	give_info("bar_arena_start_introduce")
end

function bar_arena_actor_afraid(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_actor_afraid"), "arena")
end

function bar_arena_actor_dead(actor, npc)
	news_manager.send_tip_hud(game.translate_string("arena_message_header"), game.translate_string("bar_arena_fight_dead"), "arena")
end

function bar_arena_weapon_spawn()
	local spawn_items = {}
	for i = 1,100 do
		table.insert(spawn_items, "bandit_outfit")
	end
	local obj = level_object_by_sid(606)
	if obj then
		local sim = alife()
		local pos, lvid, gvid = obj:position(), obj:level_vertex_id(), obj:game_vertex_id()
		for k,v in pairs(spawn_items) do
			sim:create(v, pos, lvid, gvid)
		end
	end
end

local out_object,in_object
	
local function transfer_arena_items(item)
	if item:section() ~= "device_torch" and item:section() ~= "device_pda" then	
			if suit_id then 
				if item:id() ~= suit_id then 
					out_object:transfer_item(item, in_object)
				end
			else
				out_object:transfer_item(item, in_object)
			end
	end
end

function bar_arena_teleport(actor, npc)
	give_info("bar_megafon_start")
	local inv_box_1 = level_object_by_sid(6526)
	if inv_box_1 then
		out_object = db.actor
		in_object  = inv_box_1
		suit = db.actor:get_current_outfit()
		if suit then
			suit_id = suit:id()
		end
		db.actor:inventory_for_each(transfer_arena_items)
		db.do_switchings( inv_box_1:id() )
	end
end

function bar_arena_weapon_slot()
	local spawn_items = {}
	if has_info("bar_arena_dogs_choosen") and not has_info("bar_arena_pseudodog_choosen") then
		table.insert(spawn_items, "wpn_pm")
		table.insert(spawn_items, "ammo_9x18_fmj")
		table.insert(spawn_items, "ammo_9x18_fmj")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "bandage")
	elseif	has_info("bar_arena_pseudodog_choosen") and not has_info("bar_arena_snork_choosen") then
		table.insert(spawn_items, "wpn_fort")
		table.insert(spawn_items, "ammo_9x18_pmm")
		table.insert(spawn_items, "ammo_9x18_pmm")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "bandage")
	elseif	has_info("bar_arena_snork_choosen") and not has_info("bar_arena_bloodsucker_choosen") then
		table.insert(spawn_items, "wpn_mp5")
		table.insert(spawn_items, "ammo_9x19_pbp")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "bandage")
	elseif	has_info("bar_arena_bloodsucker_choosen") and not has_info("bar_arena_burer_choosen") then
		table.insert(spawn_items, "wpn_wincheaster1300")
		table.insert(spawn_items, "ammo_12x70_buck")
		table.insert(spawn_items, "ammo_12x70_buck")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "bandage")
	elseif	has_info("bar_arena_burer_choosen") and not has_info("bar_arena_savage_choosen") then
		table.insert(spawn_items, "wpn_ak74")
		table.insert(spawn_items, "ammo_5.45x39_ap")
		table.insert(spawn_items, "ammo_5.45x39_ap")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "bandage")
	elseif	has_info("bar_arena_savage_choosen") then
		table.insert(spawn_items, "wpn_lr300")
		table.insert(spawn_items, "ammo_5.56x45_ss190")
		table.insert(spawn_items, "ammo_5.56x45_ss190")
		table.insert(spawn_items, "grenade_f1")
		table.insert(spawn_items, "bandage")
		table.insert(spawn_items, "bandage")
	end
	local sim,pos = alife(),vector()
	for _,v in ipairs(spawn_items) do
		sim:create(v, pos, 0, 0, idActor)
	end
	if has_info("bar_arena_dogs_choosen") and not has_info("bar_arena_snork_choosen") then
		db.actor:activate_slot(1)
	else
		db.actor:activate_slot(2)
	end
end

function bar_arena_teleport_2( actor, npc)
	level.add_pp_effector ("blink.ppe", 234, false)
	db.actor:set_actor_position(patrol("t_walk_2"):point(0))
	local dir = patrol("t_look_2"):point(0):sub(patrol("t_walk_2"):point(0))
	db.actor:set_actor_direction(-dir:getH())
	
	inv_box_2 = level_object_by_sid(574)
	out_object = db.actor
	in_object  = inv_box_2
	db.actor:inventory_for_each(transfer_object_item)
end

function bar_arena_reset()
	local hours = math.random(2,8)
	start_game_timer(hours*60*60, nil, {info_id = "bar_arena_game_timer"})
end

function bar_has_hunter_weapon(actor, npc)
	return db.actor:object("bar_hunter_weapon") ~= nil
end

--/ -----------------------------------------------------------------------------------------------