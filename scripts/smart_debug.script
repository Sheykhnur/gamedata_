--[[ ----------------------------------------------------------------------------------------------
 File       : smart_debug.script
 Description: 
 Copyright  : 2004 © LA
 Author     : barin
 Editors    : 
 Last edit  : 02.07.2012 (by ...)
--]] ----------------------------------------------------------------------------------------------
--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local show_smart_on_map = true

local smart_mapspots = {
	smart_on            = "green_location", --/ working & available
	smart_off           = "red_location",   --/ not working & not available (waiting for infoportion)
	smart_not_working   = "blue_location",  --/ not working (waiting for population)
	smart_not_available = "blue_location"   --/ not available
}

local level_names = {
	["la01_escape"] = "la01_escape",
	["la02_garbage"] = "la02_garbage",
	["la03_agroprom"] = "la03_agroprom",
	["la04_darkdolina"] = "la04_darkdolina",
	["la04u_darklab"] = "la04u_darklab",
	["la05_bar_rostok"] = "la05_bar_rostok",
	["la06_yantar"] = "la06_yantar",
	["la07_military"] = "la07_military",
	["la08_deadcity"] = "la08_deadcity",
	["la09_swamp"] = "la09_swamp",
	["la10_radar"] = "la10_radar",
	["la10u_bunker"] = "la10u_bunker",
	["la11_pripyat"] = "la11_pripyat",
	["la12_stancia"] = "la12_stancia",
	["la12u_sarcofag"] = "la12u_sarcofag",
	["la13_generators"] = "la13_generators",
	["la13u_warlab"] = "la13u_warlab",
	["la14_rostok_factory"] = "la14_rostok_factory",
	["la14u_secret_lab"] = "la14u_secret_lab",
	["la15_darkscape"] = "la15_darkscape",
	["la16_lost_factory"] = "la16_lost_factory",
	["la16u_labx16"] = "la16u_labx16",
	["la17_outskirts"] = "la17_outskirts",
	["la17u_labx7"] = "la17u_labx7",
	["la18_damned"] = "la18_damned",
	["la19_country"] = "la19_country",
	["la20_forgotten"] = "la20_forgotten",
	["la21_generators_2"] = "la21_generators_2",
	["la22_forest"] = "la22_forest",
}

--/ -----------------------------------------------------------------
--/ Print-Log (вывод отладочной информации)
--/ -----------------------------------------------------------------
local sModule = script_name() --/ строковое имя файла-модуля
local log = function(fmt, ...) _G.log(sModule..":"..tostring(fmt), ...) end
--/ -----------------------------------------------------------------
--/ -----------------------------------------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------------------------------------
function ToString(str)
	local str_type = type(str)
	if str_type == "string" then
		return str
	elseif str_type == "nil" then
		return "<nil>"
	elseif str_type == "number" then
		return tostring(str)
	elseif str_type == "boolean" then
		if str then
			return "true"
		else
			return "false"
		end
	elseif str_type == "table" then
		return "<table>"
	end
	return "<custom_data>"
end

function has_info(condition)
	local hInfo = has_alife_info(string.sub(condition, 2))
	
	if string.sub(condition, 1, 1) == "-" then
		hInfo = not hInfo
	end
	
	if hInfo then
		return "T"
	else
		return "F"
	end
end

function parse_condlist(condlist)
	local OR_tab = {}
	
	for split_by_comma in string.gfind(condlist, "%s*([^,]+)%s*") do
		table.insert(OR_tab, split_by_comma)
	end

	for index, v in pairs(OR_tab) do
		for remove_brackets in string.gfind(v, "{%s*(.*)%s*}") do
			--for condition in string.gfind(remove_brackets, "([+-][%w*%_%w*]*)") do
			for condition in string.gfind(remove_brackets, "([+-][%w*%_]*)") do
				OR_tab[index] = string.gsub(OR_tab[index], condition, has_info(condition) .. " AND ")
			end
		end
		OR_tab[index] = string.sub(OR_tab[index], 1, -7) .. "}"
	end

	local parsed_conds = OR_tab[1]
	
	for index = 2, #OR_tab do
		parsed_conds = parsed_conds .. " OR " .. OR_tab[index]
	end
	
	return parsed_conds
end

function get_smart_stat(name, available, working, level_name, communities, condlist)
	local stat = "[" .. name .. "]\\navailable = " .. ToString(available)
	stat = stat .. "\\nworking = "     .. ToString(working)
	stat = stat .. "\\nlevel = "       .. level_names[level_name]
	stat = stat .. "\\nstate = "       .. ToString(xr_gulag.getGulagState(name))
	stat = stat .. "\\nquantity = "    .. ToString(xr_gulag.getGulagPopulation(name))
	stat = stat .. "\\ncomed = "       .. ToString(xr_gulag.getGulagPopulationComed(name))
	stat = stat .. "\\ncasualities = " .. ToString(xr_gulag.getCasualities(name))
	stat = stat .. "\\ncomm = "        .. ToString(communities)
	
	if condlist then
		stat = stat .. "\\ncond = " .. condlist
		stat = stat .. "\\ncond = " .. parse_condlist(condlist)
	end
	
	return stat
end

function remove_mapspots(id)
	for k, v in pairs(smart_mapspots) do
		for index = 1, level.map_has_object_spot(id, v) do
			level.map_remove_object_spot(id, v)
		end
	end
end

function ShowSmartInfo(id, name, available, working, level_name, communities, condlist)
	if not show_smart_on_map then return end
	
	local stat = get_smart_stat(name, available, working, level_name, communities, condlist)
	
	remove_mapspots(id)
	
	if not working and not available then
		level.map_add_object_spot(id, smart_mapspots.smart_off, stat)
	elseif not working then
		level.map_add_object_spot(id, smart_mapspots.smart_not_working, stat)
	elseif not available then
		level.map_add_object_spot(id, smart_mapspots.smart_not_available, stat)
	else
		level.map_add_object_spot(id, smart_mapspots.smart_on, stat)
	end
end
--/ -----------------------------------------------------------------------------------------------