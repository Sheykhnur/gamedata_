--[[ ----------------------------------------------------------------------------------------------
 File       : gulag_deadcity.script
 Description: Gulags deadcity
 Copyright  : 2013 © LA-team
 Author     : gr1ph00n
 Editors    : gr1ph00n, lox(23.02.2013)
 Last edit  : 30.05.2013 [...]
--]] ----------------------------------------------------------------------------------------------

--/ ----------------------------------------------------------------
--/ VARIABLEs
--/ ----------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------------------------------------
--/ General VARIABLEs
--/ -----------------------------------------------------------------------------------------------

local gulags = {
	--/ for npcs:
	cit_mercs_base     = {comm = {"killer"},   out_rest = "cit_mercs_base_rest"},
	cit_partei_lager   = {comm = {"killer", "freedom"},   out_rest = "cit_partei_lager_rest"},
	cit_gym_lager      = {comm = {"killer", "freedom"},   out_rest = "cit_gym_lager_rest"},
	cit_patrolers      = {comm = {"killer"}},
	cit_mercs_wave     = {comm = {"killer"}},
	cit_bandit_village = {comm = {"bandit"},   out_rest = "cit_bandit_village_restr"},
	cit_freedom_house  = {comm = {"freedom"},  out_rest = "cit_freedom_zone"},
	cit_army_raid      = {comm = {"freedom"}, out_rest = "cit_mercs_base_rest"},
	cit_trader_terrain = {comm = {"trader", "stalker"}, out_rest = "cit_trading_zone"},
	cit_mercs_terrain  = {comm = {"killer"}},
	--/ for mobs:
	cit_dog_lair1        	 = {comm = {"dog", "pseudodog"}},
	cit_dog_lair2        	 = {comm = {"dog", "pseudodog"}},
	cit_pseudog_lair     	 = {comm = {"dog", "pseudodog"}},
	cit_snork_lair       	 = {comm = {"snork"}},
	cit_boars_lair1       	 = {comm = {"boar", "flesh"}},
	cit_fleshes_lair1     	 = {comm = {"boar", "flesh"}},
	cit_swamp_lair        	 = {comm = {"flesh", "swampbeast"}},
	cit_swamp_lair2       	 = {comm = {"flesh", "swampbeast"}},
	cit_poltergeist_lair  	 = {comm = {"poltergeist"}},	--/polter_tele_outdoor polter_flame
	cit_poltergeist_flat  	 = {comm = {"poltergeist"}},	--/polter_tele_indoor
	cit_zombies_graveyard 	 = {comm = {"zombie"}},
	cit_lynx_lair         	 = {comm = {"cat"},         out_rest = "cit_lynx_zone"},
	cit_burer_lair        	 = {comm = {"burer"},       out_rest = "cit_burer_zone"},
	cit_bloodsucker_lair  	 = {comm = {"bloodsucker"}, out_rest = "cit_bloodsucker_zone"},
	cit_bloodsucker_nest  	 = {comm = {"bloodsucker"}, out_rest = "cit_bloodsucker_nest_zone"},
	cit_controller_lair   	 = {comm = {"controller"},  out_rest = "cit_gym_lager_rest"},
	ladc_cit_mixed_terrain1	 = {comm = {"flesh", "boar"}},
	ladc_cit_dog_terrain1    = {comm = {"dog"}},
	ladc_cit_mixed_terrain2	 = {comm = {"boar", "flesh"}},
	ladc_cit_mixed_terrain3	 = {comm = {"boar", "flesh"}},
	ladc_cit_boar_terrain1   = {comm = {"boar", "flesh"}},
	ladc_cit_boar_terrain2   = {comm = {"boar", "flesh"}},
	ladc_cit_pseudodog_terrain1 = {comm = {"dog", "pseudodog"}},
	ladc_cit_polterswamp_terrain = {comm = {"swampbeast"}},
	ladc_cit_swampbeast_terrain = {comm = {"swampbeast"}},
	ladc_cit_snork_terrain   = {comm = {"snork"}},
}
--/ ----------------------------------------------
local trading_zone = "cit_trading_zone"
--/ -----------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------
function getGulag(gtype)
	return gulags[gtype] --/>
end
--/ ----------------------------------------------
local on_level_pred = function(info,gulag) return xr_gulag.is_on_gulag_level(info.se_obj,gulag) end
local is_online = "{=actor_on_level(la08_deadcity)}"
--/ -----------------------------------------------------------------------------------------------
--/ Gulags
--/ -----------------------------------------------------------------------------------------------
--/ cit_mercs_base
--/ ---------------------------------------------
gulags.cit_mercs_base.leader_pred     = function(info) return info.name == "cit_killer_stalker_leader" end
gulags.cit_mercs_base.trader_pred     = function(info) return info.name == "cit_killer_stalker_trader" end
gulags.cit_mercs_base.general_pred    = function(info) return info.name == "cit_killer_leader" end
gulags.cit_mercs_base.downstairs_pred = function(info) return parser.section_exists(info.se_obj:spawn_ini(), "downstairs") end
gulags.cit_mercs_base.upstairs_pred   = function(info) return parser.section_exists(info.se_obj:spawn_ini(), "upstairs") end
gulags.cit_mercs_base.basement_pred   = function(info) return parser.section_exists(info.se_obj:spawn_ini(), "basement") end
gulags.cit_mercs_base.technician_pred = function(info) return info.name == "cit_killer_stalker_technician" end

gulags.cit_mercs_base.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("leader",     0, 10, {0}, squad, groups[1], trading_zone, gulags.cit_mercs_base.out_rest, nil, type, gulags.cit_mercs_base.leader_pred))
	table.insert(sj, gulag_tasks.getJob("trader",     0, 8, {0}, squad, groups[1], trading_zone, gulags.cit_mercs_base.out_rest, nil, type, gulags.cit_mercs_base.trader_pred))
	table.insert(sj, gulag_tasks.getJob("general",    0, 8, {0}, squad, groups[1], trading_zone, gulags.cit_mercs_base.out_rest, nil, type, gulags.cit_mercs_base.general_pred))
	table.insert(sj, gulag_tasks.getJob("technician", 0, 8, {0}, squad, groups[1], trading_zone, gulags.cit_mercs_base.out_rest, nil, type, gulags.cit_mercs_base.technician_pred))
	table.insert(sj, gulag_tasks.getJob("walker4",    0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_mercs_base.out_rest, nil, type, gulags.cit_mercs_base.upstairs_pred))
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("walker" .. i, 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_mercs_base.out_rest, nil, type, gulags.cit_mercs_base.downstairs_pred))
		table.insert(sj, gulag_tasks.getJob("kamper" .. i, 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_mercs_base.out_rest, nil, type, gulags.cit_mercs_base.downstairs_pred))
	end
	for i = 5, 7 do
		table.insert(sj, gulag_tasks.getJob("walker" .. i, 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_mercs_base.out_rest, nil, type, gulags.cit_mercs_base.basement_pred))
	end
end

--/ ---------------------------------------------
--/ cit_partei_lager
--/ ---------------------------------------------
gulags.cit_partei_lager.sniper_pred     = function(info) return info.profile_name:match("^sniper") ~= nil end

gulags.cit_partei_lager.jobs = function(sj, gname, type, squad, groups)
	for i = 1, 4 do
		if i <= 2 then
			table.insert(sj, gulag_tasks.getJob("sniper" .. i, 0, 8, {0}, squad, groups[1], trading_zone, gulags.cit_partei_lager.out_rest, is_online, type, gulags.cit_partei_lager.sniper_pred)) --/#?# nil
			table.insert(sj, gulag_tasks.getJob("kamp" .. i,   0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_partei_lager.out_rest,       nil, type, on_level_pred))
		end
		if i ~= 4 then
			table.insert(sj, gulag_tasks.getJob("walker" .. i, 0, 6, {0}, squad, groups[1], trading_zone, gulags.cit_partei_lager.out_rest,  nil, type, on_level_pred))
		else
			table.insert(sj, gulag_tasks.getJob("walker" .. i, 0, 6, {0}, squad, groups[1], trading_zone, gulags.cit_partei_lager.out_rest,  nil, type, on_level_pred))
		end
	end	
end

--/ ---------------------------------------------
--/ cit_gym_lager
--/ ---------------------------------------------
gulags.cit_gym_lager.sniper_pred = function(info) return info.profile_name:match("^sniper") ~= nil end

gulags.cit_gym_lager.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("sniper1", 0, 6, {0}, squad, groups[1], trading_zone, gulags.cit_gym_lager.out_rest, is_online, type, gulags.cit_gym_lager.sniper_pred)) --/#?# nil
	table.insert(sj, gulag_tasks.getJob("walker1", 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_gym_lager.out_rest,       nil, type, on_level_pred))
	for i = 1, 4 do
		table.insert(sj, gulag_tasks.getJob("kamp" .. i, 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_gym_lager.out_rest, nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_patrolers
--/ ---------------------------------------------
gulags.cit_patrolers.jobs = function(sj, gname, type, squad, groups)
	for i = 1, 6 do
		table.insert(sj, gulag_tasks.getJob("patrol" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_mercs_wave
--/ ---------------------------------------------
gulags.cit_mercs_wave.jobs = function(sj, gname, type, squad, groups)
	for i = 1, 7 do
		table.insert(sj, gulag_tasks.getJob("kamp"..i.."_off", 0, 5, {0}, squad, groups[1], trading_zone, "", false, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("kamp"..i,         0, 5, {1}, squad, groups[1], trading_zone, "",   nil, type, on_level_pred))
	end
end

gulags.cit_mercs_wave.state = function(gulag)
	if has_info("cit_find_your_stuff_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_bandit_village
--/ ---------------------------------------------
gulags.cit_bandit_village.leader_pred  = function(info) return info.name == "cit_bandit_leader" end

gulags.cit_bandit_village.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("leader_off",   0, 10, {0}, squad, groups[1], trading_zone, gulags.cit_bandit_village.out_rest, false, type, gulags.cit_bandit_village.leader_pred))
	table.insert(sj, gulag_tasks.getJob("leader",   0, 10, {1}, squad, groups[1], trading_zone, gulags.cit_bandit_village.out_rest, nil, type, gulags.cit_bandit_village.leader_pred))
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("kamper" .. i,   0, 5, {0,1}, squad, groups[1], trading_zone, gulags.cit_bandit_village.out_rest, nil, type, on_level_pred))
	end
	for i = 1, 4 do
		table.insert(sj, gulag_tasks.getJob("walker" .. i, 0, 5, {0,1}, squad, groups[1], trading_zone, gulags.cit_bandit_village.out_rest, nil, type, on_level_pred))
	end
end

gulags.cit_bandit_village.state = function(gulag)
	if has_info("dol_find_cit_bandit_leader") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_freedom_house
--/ ---------------------------------------------
gulags.cit_freedom_house.jobs = function(sj, gname, type, squad, groups)
	local ltx = smart_dyn_ltx.add_ignore_distance(type, 35)
	ltx = ltx .. smart_dyn_ltx.add_treshold(type, 35)
	ltx = ltx .. smart_dyn_ltx.enable_meet(type, 35)
	ltx = ltx .. "meet_dialog = cit_freedom_dlg\n"
	ltx = ltx .. smart_dyn_ltx.add_kamp_section(type, true, 2, nil, true, 4, true)
	ltx = ltx .. smart_dyn_ltx.add_walker_section_extra(type, 1, true, false, true, 1, true, true)
	gulags.cit_freedom_house.ltx = ltx
	
	table.insert(sj, gulag_tasks.getJob("kamp1",   0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_freedom_house.out_rest, nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("kamp2",   0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_freedom_house.out_rest, nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("walker1", 0, 6, {0}, squad, groups[1], trading_zone, gulags.cit_freedom_house.out_rest, nil, type, on_level_pred))
end

--/ ---------------------------------------------
--/ cit_army_raid
--/ ---------------------------------------------
gulags.cit_army_raid.jobs = function(sj, gname, type, squad, groups)
	for i = 1, 8 do
		table.insert(sj, gulag_tasks.getJob("walker" .. i, 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_army_raid.out_rest, nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ cit_boars_lair1
--/ ---------------------------------------------
gulags.cit_boars_lair1.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_boars_lair1.ltx = smart_dyn_ltx.add_mob_home(type, 4, 25, 35, false)
	
	for i = 1, 4 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "",   nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ cit_zombies_graveyard
--/ ---------------------------------------------
gulags.cit_zombies_graveyard.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_zombies_graveyard.ltx = smart_dyn_ltx.add_fake_home(type, 6, 20, 25, 35)
	
	for i = 1, 6 do
		table.insert(sj, gulag_tasks.getJob("fake_death" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_lynx_lair
--/ ---------------------------------------------
gulags.cit_lynx_lair.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_lynx_lair.ltx = smart_dyn_ltx.add_mob_home(type, 2, 25, 35, false)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_lynx_lair.out_rest, nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_lynx_lair.out_rest, nil, type, on_level_pred))
end 

--/ ---------------------------------------------
--/ cit_dog_lair1
--/ ---------------------------------------------
gulags.cit_dog_lair1.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_dog_lair1.ltx = smart_dyn_ltx.add_mob_home(type, 7, 25, 35)
	
	for i = 1, 7 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_fleshes_lair1 
--/ ---------------------------------------------
gulags.cit_fleshes_lair1.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_fleshes_lair1.ltx = smart_dyn_ltx.add_mob_home(type, 4, 25, 35)
	
	for i = 1, 4 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_swamp_lair
--/ ---------------------------------------------
gulags.cit_swamp_lair.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_swamp_lair.ltx = smart_dyn_ltx.add_mob_home(type, 7, 25, 35)
	
	for i = 1, 7 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_bloodsucker_lair
--/ ---------------------------------------------
gulags.cit_bloodsucker_lair.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_bloodsucker_lair.ltx = smart_dyn_ltx.add_mob_home(type, 2, 25, 35, false)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_bloodsucker_lair.out_rest, false, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_bloodsucker_lair.out_rest, false, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {1}, squad, groups[1], trading_zone, gulags.cit_bloodsucker_lair.out_rest,   nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {1}, squad, groups[1], trading_zone, gulags.cit_bloodsucker_lair.out_rest,   nil, type, on_level_pred))
end 

gulags.cit_bloodsucker_lair.state = function(gulag)
	if has_info("yan_scientist_package_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_swamp_lair2
--/ ---------------------------------------------
gulags.cit_swamp_lair2.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_swamp_lair2.ltx = smart_dyn_ltx.add_mob_home(type, 5, 25, 35)
	
	for i = 1, 5 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_snork_lair
--/ ---------------------------------------------
gulags.cit_snork_lair.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_snork_lair.ltx = smart_dyn_ltx.add_mob_home(type, 3, 25, 35)
	
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_dog_lair2
--/ ---------------------------------------------
gulags.cit_dog_lair2.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_dog_lair2.ltx = smart_dyn_ltx.add_mob_home(type, 10, 25, 35)
	
	for i = 1, 10 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", false, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {1}, squad, groups[1], trading_zone, "",   nil, type, on_level_pred))
	end
end

gulags.cit_dog_lair2.state = function(gulag)
	if has_info("yan_scientist_package_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_burer_lair
--/ ---------------------------------------------
gulags.cit_burer_lair.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_burer_lair.ltx = smart_dyn_ltx.add_mob_home(type, 1, 25, 35)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_burer_lair.out_rest, false, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {1}, squad, groups[1], trading_zone, gulags.cit_burer_lair.out_rest,   nil, type, on_level_pred))
end

gulags.cit_burer_lair.state = function(gulag)
	if has_info("yan_scientist_package_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_poltergeist_lair
--/ ---------------------------------------------
gulags.cit_poltergeist_lair.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_poltergeist_lair.ltx = smart_dyn_ltx.add_mob_home(type, 3, 25, 35)
	
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", false, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {1}, squad, groups[1], trading_zone, "",   nil, type, on_level_pred))
	end
end

gulags.cit_poltergeist_lair.state = function(gulag)
	if has_info("yan_scientist_package_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_pseudog_lair
--/ ---------------------------------------------
gulags.cit_pseudog_lair.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_pseudog_lair.ltx = smart_dyn_ltx.add_mob_home(type, 4, 25, 35)
	
	for i = 1, 4 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", false, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {1}, squad, groups[1], trading_zone, "",   nil, type, on_level_pred))
	end
end

gulags.cit_pseudog_lair.state = function(gulag)
	if has_info("yan_scientist_package_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_bloodsucker_nest
--/ ---------------------------------------------
gulags.cit_bloodsucker_nest.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_bloodsucker_nest.ltx = smart_dyn_ltx.add_mob_home(type, 2, 25, 35, false)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_bloodsucker_nest.out_rest, false, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {0}, squad, groups[1], trading_zone, gulags.cit_bloodsucker_nest.out_rest, false, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {1}, squad, groups[1], trading_zone, gulags.cit_bloodsucker_nest.out_rest,   nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {1}, squad, groups[1], trading_zone, gulags.cit_bloodsucker_nest.out_rest,   nil, type, on_level_pred))
end 

gulags.cit_bloodsucker_nest.state = function(gulag)
	if has_info("yan_scientist_package_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_controller_lair
--/ ---------------------------------------------
gulags.cit_controller_lair.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_controller_lair.ltx = smart_dyn_ltx.add_mob_home(type, 1, 25, 35)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], trading_zone, "", false, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {1}, squad, groups[1], trading_zone, "",   nil, type, on_level_pred))
end

gulags.cit_controller_lair.state = function(gulag)
	if has_info("yan_scientist_package_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ cit_poltergeist_flat
--/ ---------------------------------------------
gulags.cit_poltergeist_flat.jobs = function(sj, gname, type, squad, groups)
	gulags.cit_poltergeist_flat.ltx = smart_dyn_ltx.add_mob_home(type, 3, 25, 35)
	
	for i = 1, 3 do
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", false, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("home" .. i, 0, 5, {1}, squad, groups[1], trading_zone, "",   nil, type, on_level_pred))
	end
end

gulags.cit_poltergeist_flat.state = function(gulag)
	if has_info("yan_scientist_package_done") then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ ladc_cit_mixed_terrain1
--/ ---------------------------------------------
gulags.ladc_cit_mixed_terrain1.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 12 do
		table.insert(sj, gulag_tasks.getJob("mutant" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ ladc_cit_dog_terrain1
--/ ---------------------------------------------
gulags.ladc_cit_dog_terrain1.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 13 do
		table.insert(sj, gulag_tasks.getJob("dog" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ ladc_cit_mixed_terrain2
--/ ---------------------------------------------
gulags.ladc_cit_mixed_terrain2.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 20 do
		table.insert(sj, gulag_tasks.getJob("mutant" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ ladc_cit_mixed_terrain3
--/ ---------------------------------------------
gulags.ladc_cit_mixed_terrain3.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 16 do
		table.insert(sj, gulag_tasks.getJob("mutant" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ ladc_cit_boar_terrain1
--/ ---------------------------------------------
gulags.ladc_cit_boar_terrain1.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 15 do
		table.insert(sj, gulag_tasks.getJob("boar" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ ladc_cit_boar_terrain2
--/ ---------------------------------------------
gulags.ladc_cit_boar_terrain2.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 16 do
		table.insert(sj, gulag_tasks.getJob("boar" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ ladc_cit_pseudodog_terrain1
--/ ---------------------------------------------
gulags.ladc_cit_pseudodog_terrain1.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 9 do
		table.insert(sj, gulag_tasks.getJob("dog" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ ladc_cit_polterswamp_terrain
--/ ---------------------------------------------
gulags.ladc_cit_polterswamp_terrain.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 7 do
		table.insert(sj, gulag_tasks.getJob("swampgeist" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ ladc_cit_swampbeast_terrain
--/ ---------------------------------------------
gulags.ladc_cit_swampbeast_terrain.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 7 do
		table.insert(sj, gulag_tasks.getJob("beast" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end


--/ ---------------------------------------------
--/ ladc_cit_snork_terrain
--/ ---------------------------------------------
gulags.ladc_cit_snork_terrain.jobs = function(sj, gname, type, squad, groups)
	
	for i = 1, 5 do
		table.insert(sj, gulag_tasks.getJob("snork" .. i, 0, 5, {0}, squad, groups[1], trading_zone, "", nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_trader_terrain (5npc - 3 walker, 2 kamp)
--/ ---------------------------------------------
gulags.cit_trader_terrain.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("trader", 0, 5, {0}, squad, groups[1], "", trading_zone, nil, type, on_level_pred))
	
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("kamp" .. i, 0, 5, {0}, squad, groups[1], "", trading_zone, nil, type, on_level_pred))
	end
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("walker" .. i, 0, 5, {0}, squad, groups[1], "", trading_zone, nil, type, on_level_pred))
	end
end

--/ ---------------------------------------------
--/ cit_mercs_terrain (8 npc)
--/ ---------------------------------------------
gulags.cit_mercs_terrain.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("walker", 0, 5, {0}, squad, groups[1], "", "", nil, type, on_level_pred))
	
	for i = 1, 5 do
		table.insert(sj, gulag_tasks.getJob("kamp" .. i, 0, 5, {0}, squad, groups[1], "", "", nil, type, on_level_pred))
	end
	for i = 1, 2 do
		table.insert(sj, gulag_tasks.getJob("sleeper" .. i, 0, 5, {0}, squad, groups[1], "", "", nil, type, on_level_pred))
	end
end

--/ ------------------------------------------------------------------------------------------------