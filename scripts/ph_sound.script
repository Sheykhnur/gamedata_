--[[-----------------------------------------------------------------------------------------------
 File       : ph_sound.script
 Description: Схема: ...
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Last edit  : 19.02.2013 (by ...) [...]
--]]-----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local sModule = script_name() --/ string name of the file module
--/ ------------------------------------------------------------------
--/ Print-Log (output of the debug information)
--/ ------------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------

--/ -----------------------------------------------------------------------------------------------
class "snd_source"
--/ -----------------------------------------------------------------------------------------------
--/ CONSTRUCTION SCHEME
--/ ---------------------------------------------
function snd_source:__init (obj, st)
	self.object = obj
	self.st     = st
	self.destructed = false
	self.log    = st.log
end
--/------------------------------------------------------------------
--/ RESET SCHEME
--/------------------------------------------------------------------
function snd_source:reset_scheme(loading)
	self.last_update = 0
	self.st.signals = {}
	self.played_sound = nil
	
	self.first_sound   = true
	self.st.sound_set  = true
	self.st.pause_time = 0
	if loading == false then
		self.destructed = false
	else
		self.destructed = GetVarObj(self.object, "destr")
	end
end
--/------------------------------------------------------------------
--/ UPDATE
--/------------------------------------------------------------------
function snd_source:update(delta)
	if self.destructed == true then return end --/>
	
	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return --/>
	end
	
	local iTime = device():time_global()
	if self.st.pause_time - iTime > 0 then
		return --/>
	end
	
	self.st.pause_time = 0
	if self.st.sound_set == true then
		self.st.sound_set = false
		
		if self.st.random then
			self.played_sound = xr_sound.get_sound_object(self.st.theme, "random")
		elseif self.st.looped then
			self.played_sound = xr_sound.get_sound_object(self.st.theme, "looped")
		else
			self.played_sound = xr_sound.get_sound_object(self.st.theme, "seq")
		end
		
		if self.played_sound then
			self.played_sound:play_at_pos(self.object, self.object:position())
		else
			self.st.signals["theme_end"] = true
		end
		self.first_sound = false
	end
	
	if self.last_update == 0 then
		self.last_update = iTime
	else
		if iTime - self.last_update > 50 then
			self.last_update = 0
		else
			return
		end
	end
	
	if self.played_sound ~= nil then
		if self.played_sound:playing() == false then
			if self.first_sound == false then
				self.st.signals["sound_end"] = true
			end
			self.st.sound_set = true
			if self.st.pause_min ~= 0 or self.st.pause_max ~= 0 then
				self.st.pause_time = iTime + math.random(self.st.pause_min, self.st.pause_max)
			end
			self.first_sound = false
		else
			self.played_sound:set_position(self.object:position())
		end
	end
end
--/------------------------------------------------------------------
--/ CALLBACKs
--/------------------------------------------------------------------
function snd_source:save()
	if self.destructed then
		SetVarObj(self.object, "destr", self.destructed)
	else
		DelVarObj(self.object, "destr")
	end
end

function snd_source:hit_callback(obj, amount, local_direction, who, bone_index)
	if self.st.no_hit == true then return end
--		log("hit_callback:Obj=[%s],Who=[%s],amount=[%d]", obj:name(), who and who:name(), amount, "") --/#~#
	if self.played_sound then
		self.played_sound:stop()
		self.played_sound = nil
	end
	self.destructed = true
end
--/------------------------------------------------------------------
--/ DEACTIVATE SCHEME
--/------------------------------------------------------------------
function snd_source:deactivate ()
	if self.played_sound then
		self.played_sound:stop()
		self.played_sound = nil
	end
end

--/ -----------------------------------------------------------------------------------------------
--/ BINDER
--/ -----------------------------------------------------------------------------------------------
function add_to_binder(oObj, ini, scheme, section, st)
--	log("add_to_binder:Obj=[%s/%s],scheme=[%s],section=[%s]:[%s]", oObj:name(), oObj:id(), scheme, section, ">") --/#~#
	local oNewAction = this.snd_source(oObj, st)
	--/ регистрация action, для вызова метода 'reset_scheme' при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(oObj, st, oNewAction)
	--/ fot debug!
	if st.log then log("add_to_binder: Obj=[%s],scheme=[%s],section=[%s]:[%s]", oObj:name(), scheme, section, "+") end --/#~#
end
--/------------------------------------------------------------------
--/ SET SCHEME
--/------------------------------------------------------------------
function set_scheme(oObj, ini, scheme, section, gulag_name)
--	log("set_scheme:Obj=[%s/%s],scheme=[%s],section=[%s]:[%s]", oObj:name(), oObj:id(), scheme, section, ">") --/#~#
	local st = xr_logic.assign_storage_and_bind(oObj, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, oObj)
	st.tips      = Get_Cfg_String(ini, section, "tips",     "") --/#+#
	st.theme     = Get_Cfg_String(ini, section, "snd",      "")
	st.looped    = Get_Cfg_Bool  (ini, section, "looped",   false)
	st.random    = Get_Cfg_Bool  (ini, section, "random",   true)
	st.pause_min = Get_Cfg_Num32 (ini, section, "min_idle", 0)
	st.pause_max = Get_Cfg_Num32 (ini, section, "max_idle", 0)
	st.no_hit    = Get_Cfg_Bool  (ini, section, "no_hit",   true)
	st.on_use    = xr_logic.cfg_get_condlist(ini, section, "on_use", oObj)
	oObj:set_tip_text(st.tips)
	if st.pause_max < st.pause_min then
		abort(sModule.."%s:set_scheme:invalid time range!")
	end
	--/ fot debug:
	if st.log then log("set_scheme:Obj=[%s/%s],scheme=[%s],section=[%s]%s", oObj:name(), oObj:id(), scheme, section, "") end --/#~#
end
--/ -----------------------------------------------------------------------------------------------