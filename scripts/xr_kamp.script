--[[ ----------------------------------------------------------------------------------------------
 File       : xr_kamp.script
 Description: Lager scheme. Dude(s) near fireplace.
 Copyright  : 2004 © GSC Game World
 Author     : Didenko Ruslan (Stohe)
 Editors    : barin, gr1ph00n
 Last edit  : 26.10.2017 [lox]
--]] ----------------------------------------------------------------------------------------------
-- accessible nearest check
--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------
--/ SCHEME PARTs
--/ -----------------------------------------------------------------
local iEvl_Kamp = xr_evaluators_id.stohe_kamp_base +1
local iAct_Kamp = xr_actions_id.stohe_kamp_base +1
local tBindEvls = {} --/ array of 'external' preconditions of activation schemes
--/ -----------------------------------------------------------------
--/ Initialize Module
--/ -----------------------------------------------------------------
function init()
	event("presets"):register(PreSets)
end
--/ -----------------------------------------------------------------------------------------------
--/ Process
--/ ------------------------------------------------------------------------------------------------
Is_Pickuper = function() return false end --/ stub
Who_Pickuping = function() return nil end --/ stub

function PreSets(e)
	--/ extra conditions from optional schemes in tBindEvls world_property(v.id,v.flg)
	local tAddEvls = {
		[1] = {id = db.xr_blowout    and xr_blowout.get_ai_evl(0),         flg = false}, --/ don't see blowout
		[2] = {id = db.la_ai_watcher and la_ai_watcher.get_ai_evl(0),      flg = false}, --/ no gathering
		--[3] = {id = not db.no_gather_items and stalker_ids.property_items, flg = false}, --/#?# no items to gather
		--[4] = {id = stalker_ids.property_puzzle_solved,                    flg = false}, --/#?# gathering (of items)
	}
	for idx,v in ipairs(tAddEvls) do
		if type(v.id) == 'number' then
			table.insert( tBindEvls, {v.id, v.flg == true} )
		end
	end
	if db.la_ai_watcher then
		Is_Pickuper   = la_ai_watcher.Is_Pickuper
		Who_Pickuping = la_ai_watcher.Who_Pickuping
	end
end
--/ ------------------------------------------------------------------------------------------------
--/ Evaluators
--/ ------------------------------------------------------------------------------------------------
class "evaluator_kamp_active" (property_evaluator)
--/ ------------------------------------------------------------------
--/ condition: current section of logic active (true/false)
function evaluator_kamp_active:__init(name, st) super(nil, name)
	self.st = st
end
function evaluator_kamp_active:evaluate()
	return xr_logic.is_active(self.object, self.st) --/>
end
--/ ------------------------------------------------------------------
class "evaluator_on_position" (property_evaluator)
--/ ------------------------------------------------------------------
--/ NPC reached specified position? (idLv)
function evaluator_on_position:__init(name, st) super(nil, name)
	self.st = st
end
function evaluator_on_position:evaluate()
	return (self.object:level_vertex_id() == self.st.lvid_pos) --/>
end

--/ ------------------------------------------------------------------------------------------------
--/ ACTIONs
--/ ------------------------------------------------------------------------------------------------
class "action_go_position" (action_base)
--/ ------------------------------------------------------------------
function action_go_position:__init(action_name, st) super(nil, action_name)
	self.st = st
	self.log = st.log
end

function action_go_position:initialize()
	action_base.initialize(self)
	--/ orienting
	self.object:set_desired_position()
	self.object:set_desired_direction()
	--/ where to go/where to sit
	self.st.lvid_pos = nil --/ point/vertex of destination
	self.num_pos = nil --/ number of position in kamp (1...8)
	self.time_idle = time_global() + 8*1000
	self.lvid_idle = self.object:level_vertex_id()
end

function action_go_position:execute()
	action_base.execute(self)
	
	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return --/>
	end
	local npc = self.object
	--/ figure out where to sit:
	local lvid_pos, num_pos = self.st.kamp_mgr:getDestVertex(npc:id(), self.st.radius)
	
	if num_pos and num_pos ~= (self.num_pos or -1) then --/ position near fire still not selected
		self.num_pos = num_pos
		--/ choosing point/vertex where to go
		if npc:accessible(lvid_pos) then
			self.st.lvid_pos = lvid_pos
		else
			self.st.lvid_pos = npc:accessible_nearest(level.vertex_position(lvid_pos), vector():set(0,0,0))
			if not npc:accessible(self.st.lvid_pos) then
				log("go_position: NPC=[%s], lvid_pos=[%s] ~NOT accessible!:<%s>", npc:name(), self.st.lvid_pos, "Warning!") --/#~#
				self.st.lvid_pos = npc:accessible_nearest(level.vertex_position(npc:level_vertex_id()), vector():set(0,0,0))
			end
		end
		--/ specifing point/vertex where to go
		npc:set_dest_level_vertex_id(self.st.lvid_pos)
		--/ specifing where to look:
		local vPosLv = level.vertex_position(self.st.lvid_pos)
		self.st.look_pos = vector():set(self.st.center_pos) --/ coordinates of kamp center
		local dir = vector():set(math.random(-1,1), 0, math.random(-1,1)):normalize()
		self.st.look_pos.x = self.st.look_pos.x + dir.x *math.random(0,0.5)
		self.st.look_pos.z = self.st.look_pos.z + dir.z *math.random(0,0.5)
		local vDirDesired = vector():sub(self.st.look_pos,vPosLv)
		if not utils.vector_cmp(vDirDesired, vector():set(0,0,0)) then
			vDirDesired:normalize()
		end
		npc:set_desired_direction(vDirDesired)
		--/ type of movement: move by vertexes
		if npc:path_type() ~= game_object.level_path then
			npc:set_path_type(game_object.level_path)
		end
		--/ specifing body condition
		if state_mgr.get_state(npc) ~= self.st.def_state_moving then
			state_mgr.set_state(npc, self.st.def_state_moving)
		end
		--[[ --/
		if not self.rechoice and npc:position():distance_to(vPosLv) < 10 then
			self.rechoice = true --/ flag 'can select corpse for flicking'
			self.st.tm_choice = 0
		end
		--]]
		self.time_idle = time_global() + 8*1000
		if self.log then log("ac_go_position:NPC=[%s]~>lvid_pos=[%s/%s],dist=[%s],num_pos=[%s]", npc:name(), lvid_pos, self.st.lvid_pos, string.short(npc:position():distance_to(vPosLv)), num_pos, "") end --/#~#
	elseif self.time_idle < time_global() then --/ check: NPC not freezed?
		self.time_idle = time_global() + 8*1000
		local idLv = npc:level_vertex_id()
		if idLv == self.lvid_idle then --/ staying in same point?
			--/ taking new vertex
			idLv = npc:accessible_nearest(level.vertex_position(idLv), vector():set(0,0,0))
			if not idLv or idLv >= 4294967295 then
				idLv = npc:accessible_nearest(npc:position(), vector():set(0,0,0))
				log("ac_go_position:NPC=[%s],idLv=[%s]~>[%s]?:<%s>", npc:name(), self.lvid_idle, idLv, "Warning!") --/#~#
			end
				utils.send_to_nearest_accessible_vertex(npc, idLv)
			if self.log then log("ac_go_position:NPC=[%s],idLv=[%s]~>[%s]:<%s>", npc:name(), self.lvid_idle, idLv, "Info!") end --/#~#
		end
		self.lvid_idle = idLv --/ updating-remembering new vertex
	end
end

function action_go_position:finalize()
	action_base.finalize(self)
end

--/ ------------------------------------------------------------------
class "action_wait" (action_base)
--/ ------------------------------------------------------------------
function action_wait:__init(action_name, st, npc) super(npc, action_name)
	self.st = st
	self.log = st.log
end

function action_wait:initialize()
	action_base.initialize(self)
	
	self.object:set_desired_position()
	self.object:set_desired_direction()
	
	if self.st.look_pos then
		self.look_pos = self.st.look_pos
	else
		local dir = vector():set(math.random(-1,1), 0, math.random(-1,1)):normalize()
		self.look_pos   = vector():set(self.st.center_pos) --/ coordinates of kamp center
		self.look_pos.x = self.look_pos.x + dir.x *math.random(0,0.5)
		self.look_pos.z = self.look_pos.z + dir.z *math.random(0,0.5)
	end
	self.st.kamp_mgr:increasePops()
end

function action_wait:hit_callback(obj, amount, local_direction, who, bone_index)
	self.st.kamp_mgr:hit_callback(obj, amount, local_direction, who, bone_index)
end

function action_wait:death_callback(victim, who)
	self.st.kamp_mgr:death_callback(victim, who)
end

function action_wait:execute()
	action_base.execute(self)
	
	if not xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		local state, sound, substate = self.st.kamp_mgr:UpdateNpc(self.object)
		state_mgr.set_state(self.object, state, nil, nil, {look_position = self.look_pos}, nil, nil, {subanim = substate})
		if self.log then log("ac_wait: NPC=[%s], sound=[%s], section=[%s]", self.object:name(), sound, self.st.center_point, "") end --/#~#
		xr_sound.set_sound(self.object, sound)
	end
end

function action_wait:finalize()
	self.st.kamp_mgr:OnBlowout(self.object) --/#+# barin
	self.st.kamp_mgr:decreasePops()
	action_base.finalize(self)
end

function action_wait:activate_scheme()
end

function action_wait:deactivate(npc)
	self.st.kamp_mgr:RemoveNpc(npc)
end

function action_wait:death_callback(npc)
	self.st.kamp_mgr:RemoveNpc(npc)
end

function action_wait:net_destroy(npc)
	self.st.kamp_mgr:RemoveNpc(npc)
end

--/ ------------------------------------------------------------------------------------------------
--/ BINDER
--/ ------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, st)
	if st.log then log("add_to_binder: NPC=[%s], scheme=[%s], section=[%s]:%s", npc:name(), scheme, section, ">") end --/#~#
	--/ Planner --------------------------------------------------------
	local oPlanner = npc:motivation_action_manager()
	--/ Evaluators -----------------------------------------------------
	oPlanner:add_evaluator(iEvl_Kamp +0, this.evaluator_kamp_active("ev_kamp_active", st)) --/ scheme active
	oPlanner:add_evaluator(iEvl_Kamp +1, this.evaluator_on_position("ev_kamp_walk", st)) --/ on position
	
	--/ New Actions ----------------------------------------------------
	--/ New Actions(0) - go to specified region to fireplace
	oNewAction = this.action_go_position("ac_kamp_walk", st)
	xr_motivator.addGeneralPrecondition(oNewAction)
	for _,v in ipairs(tBindEvls) do
		oNewAction:add_precondition(world_property(v[1],v[2]))
	end
	oNewAction:add_precondition(world_property(iEvl_Kamp +1, false)) --/ go to position
	oNewAction:add_effect(world_property(iEvl_Kamp +1, true))
	oPlanner:add_action(iAct_Kamp +0, oNewAction)
	
	--/ New Actions(1) - just sit and look
	local oNewAction = this.action_wait("ac_kamp_wait", st)
	xr_motivator.addGeneralPrecondition(oNewAction)
	for _,v in ipairs(tBindEvls) do
		oNewAction:add_precondition(world_property(v[1],v[2]))
	end
	oNewAction:add_precondition(world_property(iEvl_Kamp +1, true)) --/ on position
	oNewAction:add_effect(world_property(iEvl_Kamp, false))
	oPlanner:add_action(iAct_Kamp +1, oNewAction)
	xr_logic.subscribe_action_for_events(npc, st, oNewAction)
	st.action = oNewAction --/ to register from reset's
	
	--/ Actions (additional preconditions for some standard operators)
	local oAction = oPlanner:action(stalker_ids.action_alife_planner)
	oAction:add_precondition (world_property(iEvl_Kamp, false))
	--/#?# actually need to block scheme, but... let's secure like this:
	if not db.no_gather_items then 
		oAction = oPlanner:action(stalker_ids.action_gather_items) --/ action of gathering (taking items)
		oAction:add_precondition (world_property(iEvl_Kamp +1, false))
	end
end
--/ -----------------------------------------------------------------
--/ SET SCHEME - enabling scheme
--/ -----------------------------------------------------------------
function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	--/ registration of 'action' to call method 'reset_scheme' when changing scheme settings:
	xr_logic.subscribe_action_for_events(npc, st, st.action)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	
	st.center_point     = Get_Cfg_String(ini, section, "center_point", nil, true, gulag_name)
	st.radius           = Get_Cfg_Number(ini, section, "radius", 2)
	st.def_state_moving = Get_Cfg_String(ini, section, "def_state_moving", "walk")
	st.no_gather_items = Get_Cfg_Bool  (ini, section, "no_gather_items", true)
	
	ASSERT(validate_patrol_path(st.center_point, npc, true), "set_scheme: center_point=[%s] wrong!", st.center_point)
	st.kamp_mgr = kamp_manager.GetKamp(st.center_point, st.radius)
	st.kamp_mgr:AddNpc(npc)
	
	st.center_pos = get_patrol(st.center_point):point(0) --/ coordinates of kamp center
	st.lvid_pos = nil --/ destination point (where to go)
	--/ for debug!
	if st.log then log("set_scheme:NPC=[%s],scheme=[%s],section=[%s]", npc:name(), scheme, section, "") end --/#~#
end
--/------------------------------------------------------------------
--/ DISABLE SCHEME - disabling scheme
--/------------------------------------------------------------------
--[[ --/ reserve
function disable_scheme(npc, scheme)
	local npc_id = npc and npc:id()
	local st = npc_id and db.storage[npc_id][scheme]
	if st and st.action then
		xr_logic.unsubscribe_action_from_events(npc, st, st.action)
		if st.log then log("disable_scheme:NPC=[%s],scheme=[%s]", npc:name(), scheme, "") end --/#~#
	end
end
--]]
--/ ------------------------------------------------------------------------------------------------