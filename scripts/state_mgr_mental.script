--[[ ----------------------------------------------------------------------------------------------
 File       : state_mgr_mental.script
 Description: Ментальное состояние тела
 Copyright  : 2008 © GSC Game World
 Author     : GSC Game World
 Editors    : ...
 Last edit  : 15.07.2013 [...]
--]] ----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ ------------------------------------------------------------------

--/ -----------------------------------------------------------------------------------------------
--/ EVALUATORs
--/ -----------------------------------------------------------------------------------------------
--/ мы уже находимся в необходимом состоянии?
--/ ------------------------------------------------------------------
class "eva_state_mgr_mental" (property_evaluator)
--/ ------------------------------------------------------------------
function eva_state_mgr_mental:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental:evaluate()
	return (state_lib.states[self.st.target_state].mental == nil) or
	       (state_lib.states[self.st.target_state].mental == self.object:target_mental_state())
end
--/ нужно ли нам быть в состоянии FREE
--/ ------------------------------------------------------------------
class "eva_state_mgr_mental_free" (property_evaluator)
--/ ------------------------------------------------------------------
function eva_state_mgr_mental_free:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_free:evaluate()
	return state_lib.states[self.st.target_state].mental == anim.free
end
--/ находимся ли мы сейчас во FREE
--/ ------------------------------------------------------------------
class "eva_state_mgr_mental_free_now" (property_evaluator)
--/ ------------------------------------------------------------------
function eva_state_mgr_mental_free_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_free_now:evaluate()
	return self.object:target_mental_state() == anim.free
end


--/ нужно ли нам быть в состоянии DANGER
--/ ------------------------------------------------------------------
class "eva_state_mgr_mental_danger" (property_evaluator)
--/ ------------------------------------------------------------------
function eva_state_mgr_mental_danger:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_danger:evaluate()
	return state_lib.states[self.st.target_state].mental == anim.danger
end
--/ находимся ли мы сейчас в DANGER
--/ ------------------------------------------------------------------
class "eva_state_mgr_mental_danger_now" (property_evaluator)
--/ ------------------------------------------------------------------
function eva_state_mgr_mental_danger_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_danger_now:evaluate()
	return self.object:target_mental_state() == anim.danger
end

--/ нужно ли нам быть в состоянии PANIC
--/ ------------------------------------------------------------------
class "eva_state_mgr_mental_panic" (property_evaluator)
--/ ------------------------------------------------------------------
function eva_state_mgr_mental_panic:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_panic:evaluate()
	return state_lib.states[self.st.target_state].mental == anim.panic
end
--/ находимся ли мы сейчас в PANIC
--/ ------------------------------------------------------------------
class "eva_state_mgr_mental_panic_now" (property_evaluator)
--/ ------------------------------------------------------------------
function eva_state_mgr_mental_panic_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_panic_now:evaluate()
	if self.object:target_mental_state() == anim.panic then
		log("eva_state_mgr_mental_panic_now:NPC=[%s]:(%s)", self.object:name(), "!") --/#~#
	end
	return self.object:target_mental_state() == anim.panic
end

--/ -----------------------------------------------------------------------------------------------
--/ ACTIONs
--/ -----------------------------------------------------------------------------------------------
--/ Включаем свободное состояние FREE
--/ ------------------------------------------------------------------
class "act_state_mgr_mental_free" (action_base)
--/ ------------------------------------------------------------------
function act_state_mgr_mental_free:__init(name) super (nil, name)
end
function act_state_mgr_mental_free:initialize()
	action_base.initialize(self)
	self.object:set_mental_state(anim.free)
end
function act_state_mgr_mental_free:execute()
	action_base.execute(self)
	self.object:set_mental_state(anim.free)
end
function act_state_mgr_mental_free:finalize()
	action_base.finalize(self)
end
--/ Включаем возбужденное состояние DANGER
--/ ------------------------------------------------------------------
class "act_state_mgr_mental_danger" (action_base)
--/ ------------------------------------------------------------------
function act_state_mgr_mental_danger:__init(name) super (nil, name)
end
function act_state_mgr_mental_danger:initialize()
	action_base.initialize(self)
	self.object:set_mental_state(anim.danger)
	--log("act_state_mgr_mental_danger:ini:NPC=[%s]:(%s)", self.object:name(), ">") --/#~#
end
function act_state_mgr_mental_danger:execute()
	action_base.execute(self)
	self.object:set_mental_state(anim.danger)
end
function act_state_mgr_mental_danger:finalize()
	action_base.finalize(self)
end
--/ Включаем паническое состояние PANIC
--/ ------------------------------------------------------------------
class "act_state_mgr_mental_panic" (action_base)
--/ ------------------------------------------------------------------
function act_state_mgr_mental_panic:__init(name) super (nil, name)
end
function act_state_mgr_mental_panic:initialize()
	action_base.initialize(self)
	self.object:set_mental_state(anim.panic)
	self.timeout = time_global() + 30*1000
	--log("act_state_mgr_mental_panic:ini:NPC=[%s]:(%s)", self.object:name(), ">") --/#~#
end
function act_state_mgr_mental_panic:execute()
	action_base.execute(self)
	self.object:set_mental_state(anim.panic)
	if self.timeout and self.timeout < time_global() then
		if la_helper_ai.control_ammo_by_weapon(self.object) then --/#!#
			self.timeout = time_global() + 10*1000
			--log("act_state_mgr_mental_panic:check_weapon:NPC=[%s]:(%s)", self.object:name(), "+") --/#~#
		else
			self.timeout = time_global() + 60*1000
			--log("act_state_mgr_mental_panic:check_weapon:NPC=[%s]:(%s)", self.object:name(), "-") --/#~#
		end
	end
end
function act_state_mgr_mental_panic:finalize()
	--log("act_state_mgr_mental_panic:fin:NPC=[%s]:(%s)", self.object:name(), "x") --/#~#
	action_base.finalize(self)
end
--/ ------------------------------------------------------------------------------------------------