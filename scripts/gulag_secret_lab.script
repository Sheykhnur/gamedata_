--[[ ----------------------------------------------------------------------------------------------
 File       : gulag_secret_lab.script
 Description: Gulags secret_lab
 Copyright  : 2004 © LA-team
 Author     : vintar
 Editors    : vintar, loxotron(23.02.2013)
 Last edit  : 29.05.2013 [...]
--]] ----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------------------------------------
--/ General VARIABLEs
--/ -----------------------------------------------------------------------------------------------
local gulags = {
	--/ for monsters ------------------------------
	secret_rats_terrain        = {comm = {"rat","tushkano"}},
	secret_rats_terrain2       = {comm = {"rat","tushkano"}},
	secret_rats_terrain3       = {comm = {"rat","tushkano"}},
	secret_rats_terrain4       = {comm = {"rat","tushkano"}},
	secret_rats_terrain5       = {comm = {"rat","tushkano"}},
	secret_rats_terrain6       = {comm = {"rat","tushkano"}},
	secret_rats_terrain7       = {comm = {"rat","tushkano"}},
	secret_zombie_terrain      = {comm = {"zombie"}},
	secret_bloodsucker_terrain = {comm = {"bloodsucker"}},
}
--/ -----------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------
function getGulag(gtype)
	return gulags[gtype] --/>
end
--/ ----------------------------------------------
local is_secret_scene_played = function() return has_info("sec_scene_start") and not has_info("sec_scene_end") end

local on_level_pred = function(info,gulag) return xr_gulag.is_on_gulag_level(info.se_obj,gulag) end
--/------------------------------------------------------------------------------------------------
--/ Gulags
--/------------------------------------------------------------------------------------------------
--/ ---------------------------------------------
--/ rats
--/ ---------------------------------------------
gulags.secret_rats_terrain.jobs = function(sj, gname, type, squad, groups)
	for i = 1, 10 do
		table.insert(sj, gulag_tasks.getJob("rat" .. i,     0, 5, {0}, squad, groups[1], "", "",   nil, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("rat_off" .. i, 0, 5, {1}, squad, groups[1], "", "", false, type, on_level_pred))
	end
end

gulags.secret_rats_terrain.state = function(gulag)
	if is_secret_scene_played() then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
gulags.secret_rats_terrain2.jobs = function(sj, gname, type, squad, groups)
	gulags.secret_rats_terrain2.ltx = smart_dyn_ltx.add_mob_home_pointless(type, 2, 4, 6)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], "", "",   nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {1}, squad, groups[1], "", "", false, type, on_level_pred))
end

gulags.secret_rats_terrain2.state = function(gulag)
	if is_secret_scene_played() then
		return 1
	end
return 0
end

--/ ---------------------------------------------
gulags.secret_rats_terrain3.jobs = function(sj, gname, type, squad, groups)
	gulags.secret_rats_terrain3.ltx = smart_dyn_ltx.add_mob_home_pointless(type, 2, 4, 6)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], "", "",   nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {1}, squad, groups[1], "", "", false, type, on_level_pred))
end

gulags.secret_rats_terrain3.state = function(gulag)
	if is_secret_scene_played() then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
gulags.secret_rats_terrain4.jobs = function(sj, gname, type, squad, groups)
	gulags.secret_rats_terrain4.ltx = smart_dyn_ltx.add_mob_home_pointless(type, 2, 4, 6)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], "", "",   nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {1}, squad, groups[1], "", "", false, type, on_level_pred))
end

gulags.secret_rats_terrain4.state = function(gulag)
	if is_secret_scene_played() then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
gulags.secret_rats_terrain5.jobs = function(sj, gname, type, squad, groups)
	gulags.secret_rats_terrain5.ltx = smart_dyn_ltx.add_mob_home_pointless(type, 2, 4, 6)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], "", "",   nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {1}, squad, groups[1], "", "", false, type, on_level_pred))
end

gulags.secret_rats_terrain5.state = function(gulag)
	if is_secret_scene_played() then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
gulags.secret_rats_terrain6.jobs = function(sj, gname, type, squad, groups)
	gulags.secret_rats_terrain6.ltx = smart_dyn_ltx.add_mob_home_pointless(type, 2, 4, 6)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], "", "",   nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {1}, squad, groups[1], "", "", false, type, on_level_pred))
end

gulags.secret_rats_terrain6.state = function(gulag)
	if is_secret_scene_played() then
		return 1
	end
return 0
end

--/ ---------------------------------------------
gulags.secret_rats_terrain7.jobs = function(sj, gname, type, squad, groups)
	gulags.secret_rats_terrain7.ltx = smart_dyn_ltx.add_mob_home_pointless(type, 2, 4, 6)
	
	table.insert(sj, gulag_tasks.getJob("home1", 0, 5, {0}, squad, groups[1], "", "",   nil, type, on_level_pred))
	table.insert(sj, gulag_tasks.getJob("home2", 0, 5, {1}, squad, groups[1], "", "", false, type, on_level_pred))
end

gulags.secret_rats_terrain7.state = function(gulag)
	if is_secret_scene_played() then
		return 1
	end
return 0
end

--/ ---------------------------------------------
--/ zombies
--/ ---------------------------------------------
gulags.secret_zombie_terrain.jobs = function(sj, gname, type, squad, groups)
	for i = 1, 4 do
		table.insert(sj, gulag_tasks.getJob("zombie"..i,     0, 5, {0}, squad, groups[1], "", "",   nil, type, on_level_pred))
		table.insert(sj, gulag_tasks.getJob("zombie_off"..i, 0, 5, {1}, squad, groups[1], "", "", false, type, on_level_pred))
	end
end

gulags.secret_zombie_terrain.state = function(gulag)
	if is_secret_scene_played() then
		return 1
	end
	return 0
end

--/ ---------------------------------------------
--/ bloodsuckers
--/ ---------------------------------------------
gulags.secret_bloodsucker_terrain.boss_pred = function(info) return info.name == "secret_bloodsucker1" end
gulags.secret_bloodsucker_terrain.bs_2      = function(info) return info.name == "secret_bloodsucker2" end
gulags.secret_bloodsucker_terrain.bs_3      = function(info) return info.name == "secret_bloodsucker3" end
gulags.secret_bloodsucker_terrain.bs_4      = function(info) return info.name == "secret_bloodsucker4" end
gulags.secret_bloodsucker_terrain.bs_5      = function(info) return info.name == "secret_bloodsucker5" end

gulags.secret_bloodsucker_terrain.jobs = function(sj, gname, type, squad, groups)
	table.insert(sj, gulag_tasks.getJob("bloodsucker1",     0, 7, {3}, squad, groups[1], "", "",   nil, type, gulags.secret_bloodsucker_terrain.boss_pred))
	table.insert(sj, gulag_tasks.getJob("bloodsucker2",     0, 7, {3}, squad, groups[1], "", "",   nil, type, gulags.secret_bloodsucker_terrain.bs_2))
	table.insert(sj, gulag_tasks.getJob("bloodsucker3",     0, 7, {3}, squad, groups[1], "", "",   nil, type, gulags.secret_bloodsucker_terrain.bs_3))
	table.insert(sj, gulag_tasks.getJob("bloodsucker4",     0, 7, {3}, squad, groups[1], "", "",   nil, type, gulags.secret_bloodsucker_terrain.bs_4))
	table.insert(sj, gulag_tasks.getJob("bloodsucker5",     0, 7, {3}, squad, groups[1], "", "",   nil, type, gulags.secret_bloodsucker_terrain.bs_5))
	table.insert(sj, gulag_tasks.getJob("bloodsucker1",     0, 7, {0,1}, squad, groups[1], "", "secret_blood1_outrestrictor",   nil, type, gulags.secret_bloodsucker_terrain.boss_pred))
	table.insert(sj, gulag_tasks.getJob("bloodsucker2",     0, 7, {0,2}, squad, groups[1], "", "secret_blood2_outrestrictor",   nil, type, gulags.secret_bloodsucker_terrain.bs_2))
	table.insert(sj, gulag_tasks.getJob("bloodsucker3",     0, 7, {0,2}, squad, groups[1], "", "secret_blood3_outrestrictor",   nil, type, gulags.secret_bloodsucker_terrain.bs_3))
	table.insert(sj, gulag_tasks.getJob("bloodsucker4",     0, 7, {0,2}, squad, groups[1], "", "secret_blood4_outrestrictor",   nil, type, gulags.secret_bloodsucker_terrain.bs_4))
	table.insert(sj, gulag_tasks.getJob("bloodsucker5",     0, 7, {0,2}, squad, groups[1], "", "secret_blood5_outrestrictor",   nil, type, gulags.secret_bloodsucker_terrain.bs_5))
	table.insert(sj, gulag_tasks.getJob("bloodsucker_off1", 0, 7,   {2}, squad, groups[1], "", "secret_blood1_outrestrictor", false, type, gulags.secret_bloodsucker_terrain.boss_pred))
	table.insert(sj, gulag_tasks.getJob("bloodsucker_off2", 0, 7,   {1}, squad, groups[1], "", "secret_blood2_outrestrictor", false, type, gulags.secret_bloodsucker_terrain.bs_2))
	table.insert(sj, gulag_tasks.getJob("bloodsucker_off3", 0, 7,   {1}, squad, groups[1], "", "secret_blood3_outrestrictor", false, type, gulags.secret_bloodsucker_terrain.bs_3))
	table.insert(sj, gulag_tasks.getJob("bloodsucker_off4", 0, 7,   {1}, squad, groups[1], "", "secret_blood4_outrestrictor", false, type, gulags.secret_bloodsucker_terrain.bs_4))
	table.insert(sj, gulag_tasks.getJob("bloodsucker_off5", 0, 7,   {1}, squad, groups[1], "", "secret_blood5_outrestrictor", false, type, gulags.secret_bloodsucker_terrain.bs_5))
end

gulags.secret_bloodsucker_terrain.state = function(gulag)
	if has_info("sec_scene_end") then
		return 3
	else
		if is_secret_scene_played() then
			return 1
		elseif has_info("secret_door2_unlock") then
			return 0
		else
			return 2
		end
	end
end
--/ ------------------------------------------------------------------------------------------------