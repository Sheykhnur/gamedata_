--[[-----------------------------------------------------------------------------------------------
 File       : xr_trade.script (old name: mob_trade)
 Description: Scheme: "Trade callbacks"
 Copyright  : 2004 © GSC Game World
 Author     : Andrey Fidrya (Zmey) af@svitonline.com
 Editors    : ...
 Last edit  : 05.04.2013 [...]
--]]-----------------------------------------------------------------------------------------------

--/------------------------------------------------------------------
--/ VARIABLEs
--/------------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------
--/ CONSTRUCTION SCHEME
--/ -----------------------------------------------------------------------------------------------
class "action_process_trade"
--/ -----------------------------------------------------------------------------------------------
function action_process_trade:__init(oNPC, st)
	self.object = oNPC
	self.st     = st
	self.log    = st.log
end

function action_process_trade:reset_scheme()
end

function action_process_trade:update(delta)
end

function action_process_trade:storage_trade_section()
	local tStor = self.object and db.storage[self.object:id()]
	if tStor and not tStor.trade then
		tStor.trade = {}
	end
	return tStor.trade --/>
end

function action_process_trade:start_trade(zone, obj) --/ zone=?, obj=?
	if self.log then log("start_trade:NPC=[%s],Obj=[%s],Zone=[%s]", self.object:name(), obj, zone, "") end --/#~#
	local tTrade = self:storage_trade_section()
	if tTrade then
		tTrade.trading   = true --/ flag of trade condition
		tTrade.exchanged = false --/ reset of buy/sell flag
	end
	xr_logic.try_switch_to_another_section(self.object, self.st, db.actor)
end

function action_process_trade:on_trade(idWho, iType)
	if self.log then log("on_trade:NPC=[%s],idWho=[%s],Type=[%s]", self.object:name(), idWho, iType, "") end --/#~#
	local tTrade = self:storage_trade_section()
	if tTrade then
		tTrade.exchanged = true --/ buy/sell flag
	end
	xr_logic.try_switch_to_another_section(self.object, self.st, db.actor)
end

function action_process_trade:end_trade()
	if self.log then log("end_trade:NPC=[%s]:[%s]", self.object:name(),">") end --/#~#
	local tTrade = self:storage_trade_section()
	if tTrade then
		tTrade.trading = false --/ reset flag of trade condition
	end
	xr_logic.try_switch_to_another_section(self.object, self.st, db.actor)
end

--/ -----------------------------------------------------------------------------------------------
--/ BINDER
--/ -----------------------------------------------------------------------------------------------
function add_to_binder(oNPC, ini, sScheme, sSection, st)
	if st.log then log("add_to_binder:NPC=[%s],scheme=[%s],section=[%s]:[%s]", oNPC:name(), sScheme, sSection, ">") end --/#~#
	st.action = this.action_process_trade(oNPC, st)
end
--/------------------------------------------------------------------
--/ SET SCHEME
--/------------------------------------------------------------------
function set_scheme(oNPC, ini, sScheme, sSection, sGulagName)
	if oNPC and oNPC:clsid() == clsid.script_trader then
		local st = xr_logic.assign_storage_and_bind(oNPC, ini, sScheme, sSection)
		st.logic = xr_logic.cfg_get_switch_conditions(ini, sSection, oNPC)
		--/ setting callbacks
		oNPC:set_callback(callback.trade_start,              st.action.start_trade, st.action)
		oNPC:set_callback(callback.trade_stop,               st.action.end_trade,   st.action)
		oNPC:set_callback(callback.trade_perform_operation , st.action.on_trade,    st.action)
		--/ for debug!
		if st.log then log("set_scheme:NPC=[%s],scheme=[%s],section=[%s]", oNPC:name(), sScheme, sSection, "") end --/#~#
	else
		abort("%s:set_scheme:Obj=[%s],attempt to use xr_trade script on non-trader:<%s>", sModule, oNPC and oNPC:name(), "Error!")
	end
end
--/------------------------------------------------------------------
--/ DISABLE SCHEME
--/------------------------------------------------------------------
function disable_scheme(oNPC, sScheme)
	if oNPC then
		oNPC:set_callback(callback.trade_start, nil)
		oNPC:set_callback(callback.trade_stop, nil)
		oNPC:set_callback(callback.trade_perform_operation, nil)
	end
end
--/ -----------------------------------------------------------------------------------------------