--[[ ----------------------------------------------------------------------------------------------
 File       : bind_restrictor.script
 Description: Space restrictor binder
 Copyright  : 2004 © GSC Game World
 Author     : Chugai Alexander
 Last edit  : 05.05.2013 [...]
--]] ----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local tUpdatable = nil --/ binders array which require updates
local iTimeUpdate,iTimeSav = 0,0
local dev = device()
--/ --------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------
function Update()
	local iTime = dev:time_global()
	if iTimeUpdate < iTime then
		iTimeUpdate = iTime + 200 --/ ~4..6 in sec
		local delta = iTime - iTimeSav
		for _,o in pairs(tUpdatable) do
			o:Update(delta)
		end
		--bind_shelter.Update(delta) --/#x#
	end
	iTimeSav = iTime
	return false --/>
end
--/ Note: restrictors have no updates, therefore is caused artificially:
function start_update_callback()
	tUpdatable  = {} --/ create
	iTimeUpdate = dev:time_global()
	iTimeSav    = iTimeUpdate
	level.add_call(Update, function() end)--/ start callback
end

--/ -----------------------------------------------------------------
--/ Binding - registration of objects in binder
--/ -----------------------------------------------------------------
function bind(obj)
	obj:bind_object( this.restrictor_binder(obj) )
end
--/ -------------------------
--/ CLASS CONSTRUCTOR
--/ -----------------------------------------------------------------------------------------------
class "restrictor_binder" ( object_binder )
--/ -----------------------------------------------------------------------------------------------
function restrictor_binder:__init(obj) super(obj)
--	log("init:Obj=[%s/%s]", obj:name(), obj:id(), ">") --/#~#
	self.loaded      = false
	self.initialized = false
	self.obj_id      = obj:id() --/#+#
end

function restrictor_binder:reload(sSection)
	object_binder.reload(self, sSection)
end

function restrictor_binder:reinit()
--	log("reinit:Obj=[%s/%s]", self.object:name(), self.obj_id, ">") --/#~#
	object_binder.reinit(self)
	db.storage[self.obj_id] = {}
	self.st = db.storage[self.obj_id]
end

function restrictor_binder:net_spawn(server_obj)
	if not object_binder.net_spawn(self, server_obj) then return false end --/>
	db.add_zone(self.object)
	--/ Not register on updates if object has not in customdata section 'logic'.
	local char_ini = xr_logic.get_customdata_or_ini_file(self.object, "<customdata>")
	if char_ini:section_exist("logic") then
		if not tUpdatable then
			start_update_callback()
		end
		tUpdatable[self.obj_id] = self
--		log("net_spawn:Obj=[%s],id=[%s],logic=[%s]", self.object:name(), self.obj_id, "+") --/#~#
	--else log("net_spawn:Obj=[%s],id=[%s],logic=[%s]", self.object:name(), self.obj_id, "-") --/#~#
	end
	return true --/>
end

function restrictor_binder:net_destroy()
	if self.st and self.st.active_scheme then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy")
	end
	db.del_zone(self.object)
	db.storage[self.obj_id] = nil
	tUpdatable[self.obj_id] = nil
	
	object_binder.net_destroy(self)
end

function restrictor_binder:net_save_relevant()
	return true
end

function restrictor_binder:save(packet)
	if not self.object then return end --/>
	set_save_marker(packet, "save", false, sModule, self.object)
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	set_save_marker(packet, "save", true, sModule, self.object)
end

function restrictor_binder:load(reader)
	self.loaded = true
	set_save_marker(reader, "load", false, sModule, self.object)
	object_binder.load(self, reader)
	xr_logic.load_obj(self.object, reader)
	set_save_marker(reader, "load", true, sModule, self.object)
end

--/ ------------------------------------------------------------------
--/ earlier: called forcibly from actor update (actor_binder)
--/ now in its own callback!
--/ ------------------------------------------------------------------
function restrictor_binder:Update(delta)
	if not self.initialized then
--		log("Update:=[%s],loaded=[%s/%s/%s]:[%s]", self.object:name(), self.loaded, self.st.loaded_ini_filename, self.st.loaded_section_logic, ">") --/#~#
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_restrictor)
--		log("Update:=[%s],active_section=[%s]", self.object:name(), self.st.active_section, "") --/#~#
	end
	
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	--else log("Update:=[%s]:[%s]", self.object:name(), "x") --/#~#
	end
end
--/ ------------------------------------------------------------------------------------------------