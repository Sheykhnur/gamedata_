--[[ ----------------------------------------------------------------------------------------------
 File       : se_item.script
 Description: 
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Editors    : gr1ph00n
 Last edit  : 01.06.2013 [...]
--]] ----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local tRegistredItems = {} --/ for stats
--/ -------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------

--/ ---------------------------------------------
--/ Outfit
--/ -----------------------------------------------------------------------------------------------
class "se_outfit" (cse_alife_item_custom_outfit)
--/ -----------------------------------------------------------------------------------------------
function se_outfit:__init (section) super (section)
	self.ini_initialized = false
	self.spawner = nil
end
function se_outfit:on_register()
	cse_alife_item_custom_outfit.on_register( self )
	--/ регистрация в таскменеджере
	task_manager.register_target(self)
end
function se_outfit:on_unregister()
	--/ отрегистрация в таскменеджере
	task_manager.unregister_target(self)
end

function se_outfit:can_switch_online() --log("se_outfit:can_switch_online: %s", self:name(), "") --/#~#
	if not self.ini_initialized then
		self.ini_initialized = true
		local ini = self:spawn_ini()
		if ini and ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", Get_Cfg_String(ini, "spawner", "cond", ""))
		end
	end
	
	if self.spawner then
		if not (db.actor and db.actor:alive()) then
			return self.online --/>
		end
		
		if self.online then
			return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
		end
		return cse_alife_item_custom_outfit.can_switch_online(self) and xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
	end
	
	return cse_alife_item_custom_outfit.can_switch_online(self) --/>
end

--/ ---------------------------------------------
--/ Weapon
--/ -----------------------------------------------------------------------------------------------
class "se_weapon" (cse_alife_item_weapon)
--/ -----------------------------------------------------------------------------------------------
function se_weapon:__init (section) super (section)
	self.ini_initialized = false
	self.spawner = nil
end
function se_weapon:on_register()
	cse_alife_item_weapon.on_register( self )
	--/ регистрация в таскменеджере
	task_manager.register_target(self)
end
function se_weapon:on_unregister()
	--/ отрегистрация в таскменеджере
	task_manager.unregister_target(self)
end

function se_weapon:can_switch_online() --log("se_weapon:can_switch_online: %s", self:name(), "") --/#~#
	if not self.ini_initialized then
		self.ini_initialized = true
		local ini = self:spawn_ini()
		if ini and ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", Get_Cfg_String(ini, "spawner", "cond", ""))
		end
	end
	
	if self.spawner then
		if not (db.actor and db.actor:alive()) then
			return self.online --/>
		end
		
		if self.online then
			return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
		end
		return cse_alife_item_weapon.can_switch_online(self) and xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
	end
	
	return cse_alife_item_weapon.can_switch_online(self) --/>
end

--/ -----------------------------------------------------------------------------------------------
class "se_weapon_shotgun" (cse_alife_item_weapon_shotgun)
--/ -----------------------------------------------------------------------------------------------
function se_weapon_shotgun:__init (section) super (section)
	self.ini_initialized = false
	self.spawner = nil
end
function se_weapon_shotgun:on_register()
	cse_alife_item_weapon_shotgun.on_register( self )
	--/ регистрация в таскменеджере
	task_manager.register_target(self)
end
function se_weapon_shotgun:on_unregister()
	--/ отрегистрация в таскменеджере
	task_manager.unregister_target(self)
end

function se_weapon_shotgun:can_switch_online() --log("se_weapon_shotgun:can_switch_online: %s", self:name(), "") --/#~#
	if not self.ini_initialized then
		self.ini_initialized = true
		local ini = self:spawn_ini()
		if ini and ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", Get_Cfg_String(ini, "spawner", "cond", ""))
		end
	end
	
	if self.spawner then
		if not (db.actor and db.actor:alive()) then
			return self.online --/>
		end
		
		if self.online then
			return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
		end
		return cse_alife_item_weapon_shotgun.can_switch_online(self) and xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
	end
	
	return cse_alife_item_weapon_shotgun.can_switch_online(self) --/>
end

--/ -----------------------------------------------------------------------------------------------
class "se_weapon_magazined" (cse_alife_item_weapon_magazined)
--/ -----------------------------------------------------------------------------------------------
function se_weapon_magazined:__init (section) super (section)
	self.ini_initialized = false
	self.spawner = nil
end
function se_weapon_magazined:on_register()
	cse_alife_item_weapon_magazined.on_register( self )
	--/ регистрация в таскменеджере
	task_manager.register_target(self)
end
function se_weapon_magazined:on_unregister()
	--/ отрегистрация в таскменеджере
	task_manager.unregister_target(self)
end

function se_weapon_magazined:can_switch_online() --log("se_weapon_magazined:can_switch_online: %s", self:name(), "") --/#~#
	if not self.ini_initialized then
		self.ini_initialized = true
		local ini = self:spawn_ini()
		if ini and ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", Get_Cfg_String(ini, "spawner", "cond", ""))
		end
	end
	
	if self.spawner then
		if not (db.actor and db.actor:alive()) then
			return self.online --/>
		end
		
		if self.online then
			return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
		end
		return cse_alife_item_weapon_magazined.can_switch_online(self) and xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
	end
	
	return cse_alife_item_weapon_magazined.can_switch_online(self) --/>
end

--/ -----------------------------------------------------------------------------------------------
class "se_weapon_magazined_w_gl" (cse_alife_item_weapon_magazined_w_gl)
--/ -----------------------------------------------------------------------------------------------
function se_weapon_magazined_w_gl:__init (section) super (section)
	self.ini_initialized = false
	self.spawner = nil
end
function se_weapon_magazined_w_gl:on_register()
	cse_alife_item_weapon_magazined_w_gl.on_register( self )
	--/ регистрация в таскменеджере
	task_manager.register_target(self)
end
function se_weapon_magazined_w_gl:on_unregister()
	--/ отрегистрация в таскменеджере
	task_manager.unregister_target(self)
end

function se_weapon_magazined_w_gl:can_switch_online() --log("se_weapon_magazined_w_gl:can_switch_online: %s", self:name(), "") --/#~#
	if not self.ini_initialized then
		self.ini_initialized = true
		local ini = self:spawn_ini()
		if ini and ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", Get_Cfg_String(ini, "spawner", "cond", ""))
		end
	end
	
	if self.spawner then
		if not (db.actor and db.actor:alive()) then
			return self.online --/>
		end
		
		if self.online then
			return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
		end
		return cse_alife_item_weapon_magazined_w_gl.can_switch_online(self) and xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
	end
	
	return cse_alife_item_weapon_magazined_w_gl.can_switch_online(self) --/>
end

--/ ---------------------------------------------
--/ Item
--/ -----------------------------------------------------------------------------------------------
class "se_item" (cse_alife_item)
--/ -----------------------------------------------------------------------------------------------
function se_item:__init (section) super (section)
	self.ini_initialized = false
	self.spawner = nil
end
function se_item:on_register()
	cse_alife_item.on_register( self )
	--/ регистрация в таскменеджере
	task_manager.register_target(self)
end
function se_item:on_unregister()
	--/ отрегистрация в таскменеджере
	task_manager.unregister_target(self)
end

function se_item:can_switch_online() --log("se_item:can_switch_online: %s", self:name(), "") --/#~#
	if not self.ini_initialized then
		self.ini_initialized = true
		local ini = self:spawn_ini()
		if ini and ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", Get_Cfg_String(ini, "spawner", "cond", ""))
		end
	end
	
	if self.spawner then
		if not (db.actor and db.actor:alive()) then
			return self.online --/>
		end
		
		if self.online then
			return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
		end
		return cse_alife_item.can_switch_online(self) and xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil --/>
	end
	
	return cse_alife_item.can_switch_online(self) --/>
end

--/ -----------------------------------------------------------------------------------------------
class "se_detector" (cse_alife_item_detector)
--/ -----------------------------------------------------------------------------------------------
function se_detector:__init (section) super (section)
	self.secret_item = false
	self.ini_initialized = false
end

function se_detector:on_register()
	cse_alife_item_detector.on_register( self )
	-- Проверяем кастомдату обьекта на наличие стори айди.
	story_objects.check_spawn_ini_for_story_id(self)
	-- Собираем статистику по предметам.
	if registred_items[self:section_name()] == nil then
		registred_items[self:section_name()] = 1
	else
		registred_items[self:section_name()] = registred_items[self:section_name()] + 1
	end

	self.secret_item = treasure_manager.get_treasure_manager():register_item(self)
end
function se_detector:on_unregister()
	--' Отрегистрация в таскменеджере
	unregister_story_object_by_id(self.id)
	cse_alife_item_detector.on_unregister( self )
end
function se_detector:can_switch_online()
	if(self.secret_item) then
		return false
	end
	if not self.ini_initialized then
		self.ini_initialized = true
		local ini = self:spawn_ini()
		if ini and ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", Get_Cfg_String(ini, "spawner", "cond", ""))
		end
	end
	return cse_alife_item_detector.can_switch_online(self)
end

--/ -----------------------------------------------------------------------------------------------
class "se_item_torch" (cse_alife_item_torch)
--/ -----------------------------------------------------------------------------------------------
function se_item_torch:__init (section) super (section)
end
function se_item_torch:on_register()
	cse_alife_item_torch.on_register( self )
	--/ регистрация в таскменеджере
	task_manager.register_target(self)
end
function se_item_torch:on_unregister()
	--/ отрегистрация в таскменеджере
	task_manager.unregister_target(self)
end

--/ ---------------------------------------------
--/  Физобъекты
--/ -----------------------------------------------------------------------------------------------
class "se_physic" (cse_alife_object_physic)
--/ -----------------------------------------------------------------------------------------------
function se_physic:__init (section) super (section)
	self.ini_initialized = false
	self.spawner = nil
end

function se_physic:keep_saved_data_anyway()
	return true
end

function se_physic:can_switch_online() --log("se_physic:can_switch_online: %s", self:name(), "") --/#~#
	if not self.ini_initialized then
		self.ini_initialized = true
		local ini = self:spawn_ini()
		if ini and ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", Get_Cfg_String(ini, "spawner", "cond", ""))
		end
	end
	
	if self.spawner then
		if not (db.actor and db.actor:alive()) then
			return self.online
		end
		
		if self.online then
			return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil
		end
		return cse_alife_object_physic.can_switch_online(self) and (xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil)
	end
	
	return cse_alife_object_physic.can_switch_online(self)
end
--/<
--/ -----------------------------------------------------------------
--/ Собираем статистику по предметам.
--/ -----------------------------------------------------------------
function Add_Item(self)
	if not tRegistredItems[self:section_name()] then
		tRegistredItems[self:section_name()] = 1
	else
		tRegistredItems[self:section_name()] = tRegistredItems[self:section_name()] + 1
	end
end

function stats()
	log("*** SIM ITEMS STATISTIC ***")
	for k,v in pairs(tRegistredItems) do
		log("item = %s, num = %s", k, v)
	end
end
--/ -----------------------------------------------------------------------------------------------