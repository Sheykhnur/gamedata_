--[[ ----------------------------------------------------------------------------------------------
 File       : sr_aes_deadzone.script
 Description: «она смерти на „јЁ— (2)
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Last edit  : 26.12.2017 [lox]
--]] ----------------------------------------------------------------------------------------------
--]] thanks for engine fix to phobos2077
--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local sModule = script_name()
--/ ------------------------------------------------------------------
local log = function(fmt, ...) _G.log(sModule..":"..tostring(fmt), ...) end
--/ ------------------------------------------------------------------
--/ CLASS CONSTRUCTOR - класс, отвечающий за постпроцесс
--/ -----------------------------------------------------------------------------------------------
class "PPEffector" (effector)
--/ -----------------------------------------------------------------------------------------------
function PPEffector:__init (id_number, host) super (id_number, 10000000)
	self.params = effector_params()
	self.host = host
	--self.effector = effector
end
function PPEffector:process(pp)
	self.host:update_params()
	pp:assign(self.params)
	effector.process(self, pp)
	return true
end
--[[
function PPEffector:start()
	log("effector start=[%s]", self.effector)
    self.effector:start()
end
function PPEffector:finish()
    self.effector:finish()
end
--]]
--/ --------------------------
--/ CLASS CONSTRUCTOR
--/ -----------------------------------------------------------------------------------------------
class "action_postprocess"
--/ -----------------------------------------------------------------------------------------------
function action_postprocess:__init (obj, st)
	self.object         = obj
	self.st             = st
	self.actor_inside   = false
	--self.first 			= true
	--log("effector=[%s]", self.effector)
end
-------------------
function action_postprocess:reset_scheme()
	self.actor_inside = false
	--/ ----------------------------------------------------------------
	--/ postprocess
	--/ ----------------------------------------------------------------
	self.gray_amplitude = 1.0                   -- gray max intensity [0.0-1.0]
	self.gray_color     = color (0.5, 0.5, 0.5) -- RGB [0.0-1.0]
	self.base_color     = color (0.5, 0.5, 0.5) -- RGB [0.0-1.0]
	self.noise_var      = noise (0.9, 0.5, 30)  -- intensity, grain, fps [0.0-1.0,0.0-1.0,1-100]
	self.eff_time       = 0
	self.hit_time       = 0
	self.intensity      = 0
	self.intensity_base = self.st.intensity
	self.hit_power      = 0
	self.old_time       = time_global()
	
	if self.intensity_base < 0.0 then
		self.intensity_inertion = -self.st.intensity_speed
	else
		self.intensity_inertion = self.st.intensity_speed
	end
	
	self.pp = PPEffector(self.object:id() + 2000, self)
	self.pp.params.noise = noise()
	--log("effector reset start=[%s]", self.effector)
	self.pp:start()
	
	self.gray  = 1
	self.noise = noise (1.0, 0.3, 30)
end
-------------------
function action_postprocess:deactivate()
	--if self.first then self.first = false return end
	if self.state == state_inside then
		self.pp:finish()
		--level.set_snd_volume(self.snd_volume)
		--self:zone_leave()
	end
end
-------------------
function action_postprocess:update_params ()
	local c_time = (time_global() - self.old_time) * 0.001
	self.old_time = time_global()
	
	if self.actor_inside == true then
		self.intensity = self.intensity + self.intensity_inertion * c_time
		if self.intensity_base < 0.0 then
			if self.intensity < self.intensity_base then self.intensity = self.intensity_base end
		else
			if self.intensity > self.intensity_base then self.intensity = self.intensity_base end
		end
	else
		if self.intensity_base < 0.0 then
			self.intensity = self.intensity - self.intensity_inertion * c_time
			if self.intensity > 0.0 then self.intensity = 0.0 end
		else
			self.intensity = self.intensity - self.intensity_inertion * c_time
			if self.intensity < 0.0 then self.intensity = 0.0 end
		end
	end
	
	self.pp.params.color_base = self.base_color
	self.pp.params.color_gray = color (self.gray_color.r + self.intensity, self.gray_color.g + self.intensity, self.gray_color.b +  self.intensity) --color (0.5 + self.base_color.r * self.intensity, 0.5 + self.base_color.g * self.intensity, 0.5 + self.base_color.b * self.intensity)
	self.pp.params.gray       = self.gray_amplitude * self.intensity
	self.pp.params.noise      = noise (self.noise_var.intensity * self.intensity, self.noise_var.grain, self.noise_var.fps)
	self.pp.params.dual       = duality (0.01 * self.intensity, 0.01 * self.intensity)
	--self.first = false
end
-------------------
function action_postprocess:update (delta)
	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return
	end
	
	self.actor_inside = self.object:inside( db.actor:position() )
	
	self:update_hit(delta)
end
-------------------
function action_postprocess:update_hit(delta)
	if self.actor_inside == false then
		self.hit_power = 0
		return
	end
	self.hit_power = self.hit_power + (delta * 0.001) * (self.st.hit_intensity * 0.01)
	if time_global() - self.hit_time < 1000 then
		return 
	end
	self.hit_time = time_global()
--	log("update_hit:HIT POWER = %f", self.hit_power) --/#~#
	local h = hit()
	h.draftsman = db.actor
	h.direction = vector():set(0,0,0)
	h.impulse   = 0
	h.power     = self.hit_power
	h.type      = hit.radiation
	db.actor:hit(h)
	
	h.type = hit.shock
	db.actor:hit(h)
end
--/ -----------------------------------------------------------------------------------------------
--/ BINDER
--/ -----------------------------------------------------------------------------------------------
function add_to_binder(obj, ini, scheme, section, st)
--	log("add_to_binder:Obj=[%s],scheme=[%s],section=[%s]", obj:name(), scheme, section, "") --/#~#
	local oNewAction = action_postprocess (obj, st)
	--/ регистраци€ action, дл€ вызова метода 'reset_scheme' при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(obj, st, oNewAction)
end
--/------------------------------------------------------------------
--/ SET SCHEME
--/------------------------------------------------------------------
function set_scheme(obj, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(obj, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, obj)
	
	st.intensity       = Get_Cfg_Num32(ini, section, "intensity",       100) * 0.01
	st.intensity_speed = Get_Cfg_Num32(ini, section, "intensity_speed", 100) * 0.01
	st.hit_intensity   = Get_Cfg_Num32(ini, section, "hit_intensity",    15)
	--/ for debug
	if st.log then log("set_scheme:Obj=[%s],scheme=[%s],section=[%s]", obj:name(), scheme, section, "") end --/ #~#
end
--/ -----------------------------------------------------------------------------------------------