--[[-----------------------------------------------------------------------------------------------
 File       : bind_physic_object.script
 Description: Physic objects binding
 Copyright  : 2004 © GSC Game World
 Author     : Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua [+ Andrey Fidrya (Zmey) af@svitonline.com]
 Editors    : barin (17.08.2010)
 Last edit  : 27.06.2013 [...]
--]]-----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------
--/ Binding - registering objects in binder
--/ -----------------------------------------------------------------
function init(obj)
	local ini = obj:spawn_ini()
	if not ini then
		local iClassId = obj:clsid()
		if iClassId == clsid.projector then --/ projectors, megaphone bind even without 'logic'
			obj:bind_object( this.generic_physics_binder(obj) )
		elseif iClassId == clsid.hanging_lamp then --/ objects like 'lighters'
			if db.la_campfires then
				la_campfires.AddToBinder(obj)
				return --/> redirect
			end
		end
	elseif ini:section_exist("logic") or ini:section_exist("drop_box") then
		obj:bind_object( this.generic_physics_binder(obj) ) --/ bind the one with section: 'logic'/'drop_box'
	end
end
--/ -------------------------
--/ CLASS CONSTRUCTOR
--/ -----------------------------------------------------------------------------------------------
class "generic_physics_binder" (object_binder)
--/ -----------------------------------------------------------------------------------------------
function generic_physics_binder:__init(obj) super(obj)
	self.loaded = false
	self.initialized = false
end

function generic_physics_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_physics_binder:reinit()
	object_binder.reinit(self)
	
	self.obj_id  = self.object:id()
	self.obj_cid = self.object:clsid()
	self.ini     = self.object:spawn_ini()
	
	db.storage[self.obj_id] = {}
	self.st = db.storage[self.obj_id]
	--/#+#
	if self.obj_cid == clsid.projector then
		self.is_projector = true
	elseif self.obj_cid == clsid.obj_phys_destroyable and self.ini and self.ini:section_exist("drop_box") then
		self.is_drop_box = true
	end
end

function generic_physics_binder:update(delta)
	object_binder.update(self, delta)
	
	if not self.initialized then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_item)
		--/ All CALLBACKs set here:
		if self.st.active_section or self.is_drop_box then
			self:set_callbacks()
		end
		if self.st.section_logic then
			local particle = Get_Cfg_String(self.st.ini, self.st.section_logic, "particle")
			if particle then --/ initate associated with object particle:
				self.particle = particles_object(particle)
				self.particle:play_at_pos(self.object:position())
			end
			local graph_point_marker = Get_Cfg_String(self.st.ini, self.st.section_logic, "graph_point_marker")
			if graph_point_marker then --/ disabling associated with object graph:
				self.disable_graph_point = get_patrol(graph_point_marker):game_vertex_id(0)
				game_graph():accessible(self.disable_graph_point, false)
			end
		--else log("update: Obj=[%s] ~ not section_logic:(%s)", self.object:name(), "?") --/#~#
		end
		--/#+#
		if self.is_projector then
			projector.disable_on_spawn(self.object, sModule)
		end
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
end

function generic_physics_binder:net_spawn(server_obj)
	if not object_binder.net_spawn(self, server_obj) then return false end --/>
	if self.is_projector then
		db.add_sl(self.object)
	end
	return true
end

function generic_physics_binder:net_destroy()
	if self.st and self.st.active_scheme then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy")
	end
	
	if self.particle and self.particle:playing() then
		self.particle:stop()
	end
	if self.is_projector then
		db.del_sl(self.object)
	end
	db.storage[self.obj_id] = nil
	self:clear_callbacks()
	
	object_binder.net_destroy(self)
end

function generic_physics_binder:net_save_relevant()
	return true
end

function generic_physics_binder:save(packet)
	set_save_marker(packet, "save", false, sModule, self.object)
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	set_save_marker(packet, "save", true, sModule, self.object)
end

function generic_physics_binder:load(reader)
	self.loaded = true
	set_save_marker(reader, "load", false, sModule, self.object)
	object_binder.load(self, reader)
	xr_logic.load_obj(self.object, reader)
	set_save_marker(reader, "load", true, sModule, self.object)
end

--/ -----------------------------------------------------------------
--/ CALLBACKs
--/ -----------------------------------------------------------------
function generic_physics_binder:set_callbacks()
	self.object:set_callback(callback.hit,        self.hit_callback,   self)
	self.object:set_callback(callback.death,      self.death_callback, self)
	self.object:set_callback(callback.use_object, self.use_callback,   self)
end

function generic_physics_binder:clear_callbacks()
	self.object:set_callback(callback.hit,        nil)
	self.object:set_callback(callback.death,      nil)
	self.object:set_callback(callback.use_object, nil)
	self.object:set_nonscript_usable(true)
end

function generic_physics_binder:use_callback(obj, who)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
	end
end

function generic_physics_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	xr_logic.issue_event_schemes(self.object, {"ph_on_hit",self.st.active_section}, "hit_callback", obj, amount, local_direction, who, bone_index)
end

function generic_physics_binder:death_callback(victim, who)
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end
	if self.is_drop_box then
		xr_box.SpawnItems(self.object) --/ for boxes: spawning items
	end
	if self.particle and self.particle:playing() then
		self.particle:stop()
	end
	if self.disable_graph_point then
		game_graph():accessible(self.disable_graph_point, true)
	end
	self:clear_callbacks()
end
--/ -----------------------------------------------------------------------------------------------