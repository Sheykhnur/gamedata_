--[[ ----------------------------------------------------------------------------------------------
 File       : xr_statistic.script
 Description: 
 Copyright  : 2004 © GSC Game World
 Author     : Didenko Ruslan (Stohe)
 Editors    : barin, Gr1ph00n, vintar(11.02.2013), loxotron(19.07.2013)
 Last edit  : 15.04.2014 [vintar]
--]] ----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
monster_classes = {} --/#~# (< from _g.script)
local section_killed = {}

local killCountProps = {
	neutral_novice       = 1,
	neutral_experienced  = 1,
	neutral_veteran      = 1,
	neutral_master       = 1,
	
	monolith_novice      = 1,
	monolith_experienced = 1,
	monolith_veteran     = 1,
	monolith_master      = 2,
	
	military_novice      = 1,
	military_experienced = 1,
	military_veteran     = 1,
	military_master      = 2,
	
	milstalker_novice     = 1,
	milstalker_experienced = 2,
	milstalker_veteran     = 3,
	milstalker_master      = 4,
	
	killer_novice        = 1,
	killer_experienced   = 1,
	killer_veteran       = 2,
	killer_master        = 3,
	
	ecolog_novice        = 1,
	ecolog_experienced   = 1,
	ecolog_veteran       = 1,
	ecolog_master        = 1,
	
	dolg_novice          = 1,
	dolg_experienced     = 1,
	dolg_veteran         = 1,
	dolg_master          = 1,
	
	freedom_novice       = 1,
	freedom_experienced  = 1,
	freedom_veteran      = 1,
	freedom_master       = 1,

	bandit_novice        = 1,
	bandit_experienced   = 1,
	bandit_veteran       = 1,
	bandit_master        = 2,
	
	zombied_novice       = 1,
	zombied_experienced  = 1,
	zombied_veteran      = 1,
	zombied_master       = 1,
	
	stranger_novice      = 0,
	stranger_experienced = 0,
	stranger_veteran     = 0,
	stranger_master      = 0,
	
	dark_stalker_novice      = 1,
	dark_stalker_experienced = 1,
	dark_stalker_veteran     = 1,
	dark_stalker_master      = 2,
	
	dog_weak      = 1,
	dog_normal    = 1,
	dog_strong    = 1,
	dog_bulterier = 1,
	dog_very_strong = 2,
	
	pseudodog_weak   = 1,
	pseudodog_normal = 2,
	pseudodog_strong = 3,
	pseudodog_very_strong = 4,
	
	psy_dog_weak   = 2,
	psy_dog_normal = 3,
	psy_dog_strong = 4,
	psy_dog_very_strong = 6,
	psy_dog_phantom = 0,
	
	cat_weak   = 1,
	cat_normal = 1,
	cat_strong = 2,
	cat_very_strong = 2,

	boar_weak   = 1,
	boar_normal = 1,
	boar_strong = 2,
	boar_very_strong = 2,

	boar_forest_weak   = 1,
	boar_forest_normal = 1,
	boar_forest_strong = 2,
	boar_forest_very_strong = 2,
	
	flesh_weak   = 1,
	flesh_normal = 1,
	flesh_strong = 2,
	flesh_very_strong = 2,
	
	snork_weak    = 1,
	snork_normal  = 1,
	snork_strong  = 2,
	snork_very_strong  = 2,

	poltergeist_weak		= 1,
	poltergeist_normal		= 1,
	poltergeist_strong		= 2,
	poltergeist_strong		= 2,

	burer_weak   	  		= 2,
	burer_normal  	  		= 4,
	burer_strong 	  		= 6,
	burer_very_strong 	  	= 8,

	burer_outdoor_weak 		= 2,
	burer_outdoor_normal  	= 4,
	burer_outdoor_strong 	= 6,
	burer_outdoor_very_strong= 8,
	
	chimera_weak   = 3,
	chimera_normal = 6,
	chimera_strong = 9,
	chimera_night_strong = 9,
	chimera_very_strong  = 12,
	
	chimera_ug_weak   = 2,
	chimera_ug_normal = 4,
	chimera_ug_strong = 6,
	chimera_ug_very_strong  = 8,
	
	fracture_weak   = 1,
	fracture_normal = 2,
	fracture_strong = 3,
	fracture_very_strong = 4,
	
	zombie_weak     = 1,
	zombie_normal   = 1,
	zombie_strong   = 1,
	zombie_civil_1  = 1,
	zombie_civil_2  = 1,
	zombie_civil_3  = 1,
	zombie_civil_4  = 1,
	zombie_civil_5  = 1,
	zombie_immortal	= 1,

	gigant_weak = 3,
	gigant_normal = 6,
	gigant_strong = 9,
	gigant_very_strong = 12,

	controller_weak			= 3,
	controller_normal		= 6,
	controller_strong		= 9,
	controller_very_strong	= 12,

	controller_underground_weak			= 3,
	controller_underground_normal		= 6,
	controller_underground_strong		= 9,
	controller_underground_very_strong	= 12,
	
	bloodsucker_weak   = 1,
	bloodsucker_normal = 2,
	bloodsucker_strong = 3,
	bloodsucker_very_strong = 4,
	
	swampbeast_weak   = 1,
	swampbeast_normal = 1,
	swampbeast_strong = 2,
	swampbeast_very_strong = 2,
	
	karlik_weak          = 1,
	karlik_normal        = 1,
	karlik_strong        = 1,
	karlik_really_strong = 1,
	
	m_ratkano_e		= 0,
	rat_weak		= 0,
	rat_normal		= 0,
	rat_strong_1	= 0,
	rat_strong_2	= 0,
	rat_strong		= 0,
	rat_very_strong	= 0,
	
	tushkano_weak   = 0,
	tushkano_normal = 0,
	tushkano_strong = 0,
	tushkano_very_strong = 0,
	
	m_crow  			= 0,
	crow_weak			= 0,
	crow_normal			= 0,
	crow_strong			= 0,
	crow_very_strong	= 0,
}

local npc_factions = {
	["stalker"]			= "neutral",
	["monolith"]		= "monolith",
	["military"]		= "military",
	["killer"]			= "killer",
	["ecolog"]			= "ecolog",
	["dolg"]			= "dolg",
	["freedom"]			= "freedom",
	["clear_sky"]		= "clear_sky",
	["bandit"]			= "bandit",
	["milstalker"]		= "milstalker",
	["cleaning"]		= "cleaning",
	["zombied"]			= "zombied",
	["stranger"]		= "stranger",
	["dark_stalker"]	= "dark_stalker",
	["arena_enemy"]		= "stranger"
}
--/ -----------------------------------------------------------------------------------------------
--/ it is transferred from 'stats.script'
--/ -----------------------------------------------------------------------------------------------
local level_names = {
	"la01_escape",       "la02_garbage",      "la03_agroprom",       "la04_darkdolina",
	"la04u_darklab",     "la05_bar_rostok",   "la06_yantar",         "la07_military",
	"la08_deadcity",     "la09_swamp",        "la10_radar",          "la10u_bunker",
	"la11_pripyat",      "la12_stancia",      "la12u_sarcofag",      "la13_generators",
	"la13u_warlab",      "la13u_oso",         "la14_rostok_factory", "la14u_secret_lab",
	"la15_darkscape",    "la16_lost_factory", "la16u_labx16",        "la17_outskirts",
	"la17u_labx7",       "la18_damned",       "la19_country",        "la20_forgotten",
	"la22_forest",		  "la23_oldroad",		 "la24_antennas",  "ai_test", "factory_test"
}
local faction_names = {
	["stalker"] = {
		"stalker", "monolith", "military", "killer", "ecolog", "dolg", "freedom", "clear_sky", "milstalker", "cleaning",
		"bandit", "zombied", "stranger", "dark_stalker", "arena_enemy",
		"trader", "actor_bandit", "actor_mono", "actor_freedom",
	},
	["mutant"] = {
		"tushkano", "flesh", "boar", "cat", "zombie", "burer", "fracture",
		"chimera", "dog", "pseudodog", "psy_dog", "psy_dog_phantom", "snork", "poltergeist",
		"pseudo_gigant", "controller",	"bloodsucker", "rat", "swampbeast", "karlik", "karlito", "ghostboss",
		"bird", "karlito"
	}
}
local rank_names = {
	["stalker"] = {
		"novice", "experienced", "regular", "veteran", "master"
	},
	["mutant"] = {
		"weak", "normal", "middle_strong", "strong", "very_strong", "uniq"
	}
}
--/ -------------------------
local sModule = script_name() 
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------

--/ -----------------------------------------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------------------------------------
function getNpcType(npc)
	if not npc then
		abort("getNpcType: npc is nil")
		
	elseif IsStalker(npc) then
		local community = npc_factions[npc:character_community()]
		if not community then
			community = npc_factions["stalker"]		-- если в скрипте групировка не указанна, то задать поумолчанию
			log("Community %s is not found in npc_factions[]; set to default %s",npc:character_community(), community);
		end
		
		return "stalkerkills", community.."_"..ranks.get_obj_rank_name(npc) --/>
		
	else
		local community = monster_classes[get_clsid(npc)]
		if not community then			
			community = monster_classes[clsid.bloodsucker_s]	-- если в скрипте класс не указанн, то задать поумолчанию
			log("class for %s is not found in monster_classes[]; set to default %s",npc:name(), community);
		end
		
		if community ~= "NIL" then
			return "monsterkills", npc:section() --/>
			--return "monsterkills", community.."_"..ranks.get_obj_rank_name(npc) --/>
		end
	end
	return nil, nil --/>
end

local goodwill_enemy   = -1000
local goodwill_friend  = 1000
local goodwill_neutral = 0

local goodwill_min = 1
local goodwill_max = 10

local comm_goodwill_fact = {
	["tushkano"]      = { "dolg", "cleaning" },
	["rat"]           = { "dolg", "cleaning" },
	["flesh"]         = { "dolg", "cleaning" },
	["boar"]          = { "dolg", "cleaning" },
	["cat"]           = { "dolg", "cleaning" },
	["zombie"]        = { "dolg", "cleaning", "stalker" },
	["burer"]         = { "dolg", "cleaning", "stalker" },
	["fracture"]      = { "dolg", "cleaning" },
	["chimera"]       = { "dolg", "cleaning", "stalker" },
	["dog"]           = { "dolg", "cleaning" },
	["pseudodog"]     = { "dolg", "cleaning" },
	["psy_dog"]       = { "dolg", "cleaning", "stalker" },
	["snork"]         = { "dolg", "cleaning", "stalker" },
	["poltergeist"]   = { "dolg", "cleaning" },
	["pseudo_gigant"] = { "dolg", "cleaning", "stalker" },
	["controller"]    = { "dolg", "cleaning", "stalker" },
	["bloodsucker"]   = { "dolg", "cleaning", "stalker" },
	["swampbeast"]	  = { "dolg", "cleaning" },

	["monolith"]     = { "stalker", "dolg", "cleaning"},
	["military"]     = { "stalker" },
	["dolg"]         = { "freedom" },
	["cleaning"]     = { "freedom" },
	["freedom"]      = { "dolg", "cleaning" },
	["bandit"]       = { "stalker", "cleaning" },
	["zombied"]      = { "stalker", "cleaning" },
	["stranger"]     = { "dolg" },
	["dark_stalker"] = { "dolg", "cleaning" },
}

function repairCommunityGoodwill(comm_rank)
	local faction = (string.match(comm_rank, "(.+)(_%w+)"))
	if faction == "neutral" then
		faction = "stalker"
	end
	if comm_goodwill_fact[faction] ~= nil then
		local points = killCountProps[comm_rank] or 1
		for _, fact in pairs(comm_goodwill_fact[faction]) do
			--if relation_registry.community_goodwill(fact, idActor) < goodwill_friend then
			if relation_registry.community_goodwill(fact, idActor) < goodwill_neutral then
				points = (killCountProps[comm_rank] or 1) * math.random(goodwill_min, goodwill_max)
				relation_registry.change_community_goodwill(fact, idActor, points)
			end
		end
	end
end

function addKillCount(npc)
	local etype, sNpcType = getNpcType(npc)
	if etype then
		if killCountProps[sNpcType] then
			if not section_killed[sNpcType] then
				section_killed[sNpcType] = true
				actor_stats.add_points(etype, sNpcType, 1, killCountProps[sNpcType])
			else
				actor_stats.add_points(etype, sNpcType, 1, 0)
			end
			--log("addKillCount: [%s] %s [%s] S=[%s] P=<%s> %s", tostring(etype), sNpcType, npc:character_rank(), npc:section(), npc:profile_name(), npc:name())
			--log("addKillCount: sq[%s] gr%s [%s] S=[%s] P=<%s> %s", npc:squad(), npc:group(), npc:character_rank(), npc:section(), npc:profile_name(), npc:name())
			db.actor:set_character_rank(db.actor:character_rank() + killCountProps[sNpcType])
			pdaSkills.add_rank_skills_count(killCountProps[sNpcType])
			repairCommunityGoodwill(sNpcType)
		else
			if not section_killed[sNpcType] then
				section_killed[sNpcType] = true
				actor_stats.add_points(etype, sNpcType, 1, 1)
			else
				actor_stats.add_points(etype, sNpcType, 1, 0)
			end
			--log("addKillCount !else!: [%s] %s [%s] S=[%s] P=<%s>", tostring(etype), sNpcType, npc:character_rank(), npc:section(), npc:profile_name())
			db.actor:set_character_rank(db.actor:character_rank() + 1)
			pdaSkills.add_rank_skills_count(1)
			repairCommunityGoodwill(sNpcType)
			--abort("addKillCount: %s [%s] not found in killCountProps array!", tostring(sNpcType), tostring(etype))
		end
	end
end

--/ it is transferred from 'stats.script'
--/ -----------------------------------------------------------------------------------------------
class "simulation_statistic"
--/ -----------------------------------------------------------------------------------------------
function simulation_statistic:__init()
	self.level_stats = {}
	self.objects     = {}
	
	for _, lname in pairs(level_names) do
		self.level_stats[lname] = {}
		for _, etype in pairs({ "stalker", "mutant" }) do
			for _, fname in pairs(faction_names[etype]) do
				self.level_stats[lname][fname] = {}
				for _, rname in pairs(rank_names[etype]) do
					self.level_stats[lname][fname][rname] = 0
				end
			end
		end
	end
end

function simulation_statistic:add(se_obj)
	if not se_obj:alive() then
		return
	end
	
	local lname = alife():level_name(game_graph():vertex(se_obj.m_game_vertex_id):level_id())
	local etype, fname, rname = getSimNpcType(se_obj)
	if fname == "NIL" then
		return --/> it's psy dog phantom
	end
	if self.level_stats[lname] ~= nil then
		if self.level_stats[lname][fname] ~= nil then
			if self.level_stats[lname][fname][rname] ~= nil then
				local count = self.level_stats[lname][fname][rname] + 1
				self.level_stats[lname][fname][rname] = count
				self.objects[se_obj.id] = {
					community = fname,
					etype     = etype,
					rank      = rname,
					lname     = lname
				}
			else
				abort("sim_stats:add: obj=[%s],faction=[%s],rank=[%s] ~ not added for level=[%s]", se_obj:name(), tostring(fname), tostring(rname), tostring(lname), "")
			end
		else
			abort("sim_stats:add: obj=[%s],faction=[%s] ~ not added for level=[%s]", se_obj:name(), tostring(fname), tostring(lname), "")
		end
	else
		abort("sim_stats:add: obj=[%s],level=[%s] not added", se_obj:name(), tostring(lname), "")
	end
end

function simulation_statistic:remove(se_obj)
	if self.objects[se_obj.id] then
		local fname = self.objects[se_obj.id].community
		local lname = self.objects[se_obj.id].lname
		local rname = self.objects[se_obj.id].rank
		
		local count = math.max(0, self.level_stats[lname][fname][rname] - 1)
		
		self.level_stats[lname][fname][rname] = count
		self.objects[se_obj.id] = nil
	end
end

function simulation_statistic:getEntityCount(lname, fname, rname)
	if la_utils.is_empty(lname) then
		abort("Level name not specified!")
		return 0
	elseif not self.level_stats[lname] then
		abort("Wrong level name! [%s]", lname, "")
		return 0
	end
	
	if la_utils.is_empty(fname) then
		abort("Faction name not specified!")
		return 0
	elseif not self.level_stats[lname][fname] then
		abort("Wrong faction name! [%s]", fname, "")
		return 0
	end
	
	if la_utils.is_empty(rname) then
		abort("Rank name not specified!")
		return 0
	elseif not self.level_stats[lname][fname][rname] then
		abort("Wrong rank name! [%s]", rname, "")
		return 0
	end
	
	return self.level_stats[lname][fname][rname] or 0
end

--/ -----------------------------------------------------------------
--/ Services functions
--/ -----------------------------------------------------------------
local sim_stats = nil

function getSimStats()
	if sim_stats == nil then
		sim_stats = simulation_statistic()
	end
	return sim_stats
end

function getSimNpcType(se_obj)
	local cls = se_obj:clsid()
	if cls == clsid.script_stalker then
		local community = se_obj:community() or "stalker"
		local rank = ranks.get_obj_rank_name(se_obj) or "novice"
		return "stalker", community, rank --/>
	end
	local community = monster_classes[cls]
	if community then
		local rank = system_ini():r_string((se_obj:section_name()), "spec_rank") or ranks.get_obj_rank_name(se_obj)
		return "mutant", community, rank --/>
	end
	abort("getSimNpcType: cannot find monster class for clsid=[%s]", tostring(cls))
	return nil, nil, nil
end
--/ -----------------------------------------------------------------
--/ External calls
--/ -----------------------------------------------------------------
function add(se_obj)
	getSimStats():add(se_obj)
end

function remove(se_obj)
	getSimStats():remove(se_obj)
end

function getEntityCount(lname, fname, rname)
	return getSimStats():getEntityCount(lname, fname, rname)
end

function save()
	SetVar("killed",section_killed)
end
	
function load()
	section_killed = GetVar("killed",{})
end
--/ ------------------------------------------------------------------------------------------------------------------------------------------------