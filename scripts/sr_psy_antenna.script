--[[-----------------------------------------------------------------------------------------------
 File       : sr_psy_antenna.script
 Description: Zones of psy-emiisions. Plays postprocess and phantoms by settings in custom_data
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Editors    : Gr1ph00n
 Last edit  : 02.04.2013 [...]
--]]-----------------------------------------------------------------------------------------------
-- TODO: posteffect of psy-emmision not going to saves, cause of that after loading save we don't have it.
--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
psy_antenna          = nil
local iState_OutSide = 0 --/ actor outside
local iState_InSide  = 1 --/ actor inside
local iState_Void    = 2 --/ unknown status
local bPause         = false
--/ --------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------
--/ Process
--/ -----------------------------------------------------------------
--/ Note: Scheme has no updates, cause it calls artificially on actor's update
function Set_Callbacks()
	event("update"):register(OnUpdate)
	event("actor_destroy"):register(OnDestroy)
	event("main_menu_on"):register(PauseOn) --/#?#
	event("main_menu_off"):register(PauseOff) --/#?#
	event("actor_save"):register(save)
	if not event("actor_load"):registered(load) then
		event("actor_load"):register(load)
	end
	bPause = false
end
--/----------------------------------------------
function OnUpdate(e)
	if psy_antenna then
		if not bPause then
			psy_antenna:update(e.delta)
		end
	else
		e:remove() --/ disabling callback
	end
end
function PauseOn(e)
	bPause = true
end
function PauseOff(e)
	bPause = false
end
function OnDestroy(e)
	event("update"):unregister(OnUpdate)
	if psy_antenna then
		psy_antenna:destroy()
		psy_antenna = nil
	end
end
--/----------------------------------------------
function save(e)
--	log("save:>") --/#~#
	if psy_antenna and not utils.level_changing() then
		local tbl = psy_antenna:save({})
		SetVar("sav_"..sModule,tbl)
	end
end
function load(e)
--	log("load:>") --/#~#
	if not psy_antenna then
		if HasVar("sav_"..sModule) then
			local tbl = GetVar("sav_"..sModule,{})
			DelVar("sav_"..sModule) --/ clear
			Get_PsyAntenna():load(tbl)
		end
	else
		log("load:PsyAntenna already exists!:<Warning!>")
	end
end
--/----------------------------------------------
function Get_PsyAntenna()
	if not psy_antenna then
		psy_antenna = this.PsyAntenna()
		this.Set_Callbacks()
	end
	return psy_antenna --/>
end
--/ ---------------------------------------------
--/ CLASS CONSTRUCTOR
--/------------------------------------------------------------------------------------------------
class "PsyAntenna"
--/------------------------------------------------------------------------------------------------
function PsyAntenna:__init()
--	log("PsyAntenna:__init:[>]") --/#~#
	--/ phantom gen
	self.phantom_max               = 8    --/ max phantoms (10)
	self.phantom_spawn_probability = 0    --/ 0.2 - start spawn probability (0..1)
	self.phantom_spawn_radius      = 30.0 --/ average radius 30.0m +-15m
	self.phantom_spawn_height      = 2.5  --/ 3 average height from actor pos +-1.5m
	self.phantom_fov               = 45   --/ width of sector in front of actor eyes, in which phantoms can born
	--/ antenna
	self.hit_amplitude        = 1.0 --/ size of hit = self.hit_amplitude*self.hit_intensity
	--/ class variables initialize
	self.eff_time             = 0
	self.hit_time             = 0
	--self.phantom_time         = 0
	self.intensity_inertion   = 0.05 -- speed of changing intensity in sec
	self.hit_intensity        = 0
	self.sound_intensity      = 0
	self.sound_intensity_base = 0 --/ basic intensity. current goes to it with speed self.intensity_inertion	
	self.postprocess_count    = 0  --/ counter of registered postprocesses
	self.postprocess = {} --/ conteiner of postprocesses
	--/ sound
	self.sound_initialized      = false
	self.sound_obj_right, self.sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")
	self.sound_obj_left.volume  = self.sound_intensity
	self.sound_obj_right.volume = self.sound_intensity
	self.snd_volume             = level.get_snd_volume()
	self.mute_sound_threshold   = 0 --/ Limit till sound can be lowered. 0 - it can be jammed totaly
	self.max_mumble_volume      = 10
--	log("PsyAntenna:__init:snd_volume=[%s]%s", self.snd_volume, "") --/#~#
end

function PsyAntenna:destroy()
	level.set_snd_volume(self.snd_volume)
end

function PsyAntenna:construct()
end

function PsyAntenna:update(delta)
	self.eff_time = self.eff_time + delta
	--
	function update_intensity(intensity_base, intensity)
		local di = self.intensity_inertion * delta * 0.001
		local ii = intensity_base
		if math.abs(intensity_base - intensity) >= di then
			if intensity_base < intensity then
				ii = intensity - di
			else
				ii = intensity + di
			end
		end
		if     ii < 0.0 then ii = 0.0
		elseif ii > 1.0 then ii = 1.0 end
		return ii --/>
	end
	--
	self:generate_phantoms()
	
	self.sound_intensity = update_intensity(self.sound_intensity_base, self.sound_intensity)
	self:update_sound()
	
	for k,v in pairs(self.postprocess) do
		v.intensity = update_intensity(v.intensity_base, v.intensity)
		local exist = self:update_postprocess(v)
		
		if exist == false then
			self.postprocess[k] = nil
		end
	end
	
	self:update_psy_hit(delta)
end

function PsyAntenna:update_psy_hit(delta)
	if time_global() > self.hit_time then
		self.hit_time = time_global() + 5000
		
		local iPower = self.hit_amplitude*self.hit_intensity
--		log("update_psy_hit:power=[%s]", iPower, "") --/#~#
		if iPower > 0.01 then
			local oActor = db.actor
			
			local h = hit()
			h.draftsman = oActor
			h.direction = vector():set(0,0,0)
			h.power     = iPower
			h.impulse   = 0
			h.type      = hit.telepatic
			oActor:hit(h)
			
			if oActor.health < 0.01 and oActor:alive() then
				oActor:kill( oActor )
			end
		end
	end
end

function PsyAntenna:generate_phantoms()
	if not self.phantom_time then
		self.phantom_time = time_global() + math.random(10,15)*1000
	elseif self.phantom_time < time_global() then
		self.phantom_time = time_global() + math.random(5,10)*1000
		if self.phantom_max > 0 and self.phantom_spawn_probability > math.random() then
			if self.phantom_max > phantom_manager:phantom_count() then
				local radius = self.phantom_spawn_radius * ( math.random()/2.0+0.5 )
				local ang    = self.phantom_fov * math.random() - self.phantom_fov * 0.5
				local dir    = vector_rotate_y( db.actor:direction(), ang )
				phantom_manager.spawn_phantom( db.actor:position():add( dir:mul(radius) ) )
			end
		end
	end
end

function PsyAntenna:update_sound()
	if not self.sound_initialized then
		self.sound_obj_left:play_at_pos (db.actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		self.sound_obj_right:play_at_pos(db.actor, vector():set( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		self.sound_initialized = true
	end
	
	local vol = 1 - ( self.sound_intensity ^ 3 ) * 0.9
	
	if vol < self.mute_sound_threshold then
		level.set_snd_volume( self.mute_sound_threshold )
	else
		level.set_snd_volume( vol )
	end
	
	self.sound_obj_left.volume  = 1 / vol - 1
	self.sound_obj_right.volume = 1 / vol - 1
end

function PsyAntenna:update_postprocess(pp)
	if pp.intensity == 0 then
		self.postprocess_count = self.postprocess_count - 1
		level.remove_pp_effector(pp.idx)
		return false --/>
	end
	
	level.set_pp_effector_factor(pp.idx, pp.intensity, 0.3)
	return true --/>
end

function PsyAntenna:save(tbl)
	tbl.hit   = self.hit_intensity
	tbl.snd_i = self.sound_intensity
	tbl.snd_b = self.sound_intensity_base
	tbl.snd_t = self.mute_sound_threshold
	tbl.pp    = self.postprocess --/ table!
	return tbl --/>
end

function PsyAntenna:load(tbl)
	self.hit_intensity        = tbl.hit
	self.sound_intensity      = tbl.snd_i
	self.sound_intensity_base = tbl.snd_b
	self.mute_sound_threshold = tbl.snd_t
	self.postprocess          = tbl.pp --/ table!
	self.postprocess_count = table.size(self.postprocess)
end

--/ ---------------------------------------------
--/ CONSTRUCTION SCHEME
--/ -----------------------------------------------------------------------------------------------
class "action_psy_antenna" --/ logic scheme for space restrictor
--/ -----------------------------------------------------------------------------------------------
function action_psy_antenna:__init( obj, st )
	self.object = obj
	self.st     = st
	self.log    = st.log
	self.state  = iState_Void --/ not clear, he is in zone or not
end
--/------------------------------------------------------------------
--/ RESET SCHEME
--/------------------------------------------------------------------
function action_psy_antenna:reset_scheme()
	if not psy_antenna then
		log("reset_scheme:Obj=[%s] ~ psy_antenna not initialized! :<%s>", self.object:name(), "Info!") --/#~#
		psy_antenna = Get_PsyAntenna() --/#?#
	end
	if self.state == iState_InSide then
		self:zone_leave()
	end
	self.state = iState_Void
	self:switch_state()
	if self.log then log("reset_scheme:Obj=[%s]%s", self.object:name(), "") end --/#~#
end
--/------------------------------------------------------------------
--/ UPDATE
--/------------------------------------------------------------------
function action_psy_antenna:update(delta)
	if not xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) and psy_antenna then
		self:switch_state()
	end
end
--/------------------------------------------------------------------
--/ DEACTIVATE SCHEME
--/------------------------------------------------------------------
function action_psy_antenna:deactivate()
	if self.state == iState_InSide and psy_antenna then
		self:zone_leave()
	end
	self.state = iState_Void
end
--/------------------------------------------------------------------
--/ SERVICE FUNCTIONs
--/------------------------------------------------------------------
function action_psy_antenna:switch_state()
	if self.state ~= iState_InSide then
		if self.object:inside( db.actor:position() ) then
			self.state = iState_InSide
			self:zone_enter()
		end
	else
		if not self.object:inside( db.actor:position() ) then
			self.state = iState_OutSide
			self:zone_leave()
		end
	end
end

function action_psy_antenna:zone_enter()
--	log("zone_enter:hit_intensity=[%s]", psy_antenna.hit_intensity, "") --/#~#
	psy_antenna.sound_intensity_base      = psy_antenna.sound_intensity_base      + self.st.intensity
	psy_antenna.mute_sound_threshold      = psy_antenna.mute_sound_threshold      + self.st.mute_sound_threshold
	psy_antenna.hit_intensity             = psy_antenna.hit_intensity             + self.st.hit_intensity
	psy_antenna.phantom_spawn_probability = psy_antenna.phantom_spawn_probability + self.st.phantom_prob
--	log("zone_enter:hit_intensity=[%s]+[%s]", psy_antenna.hit_intensity, self.st.hit_intensity, "") --/#~#
	if self.st.postprocess ~= "nil" then
		if not psy_antenna.postprocess[self.st.postprocess] then
			psy_antenna.postprocess_count = psy_antenna.postprocess_count + 1
			psy_antenna.postprocess[self.st.postprocess] = { intensity_base = 0, intensity = 0, idx = psy_antenna.postprocess_count+1500}
			level.add_pp_effector(self.st.postprocess, psy_antenna.postprocess[self.st.postprocess].idx, true)
			level.set_pp_effector_factor(psy_antenna.postprocess[self.st.postprocess].idx, 0.01)
		end
		psy_antenna.postprocess[self.st.postprocess].intensity_base = psy_antenna.postprocess[self.st.postprocess].intensity_base + self.st.intensity
	end
end

function action_psy_antenna:zone_leave()
--	log("zone_leave:hit_intensity=[%s]", psy_antenna.hit_intensity, "") --/#~#
	psy_antenna.sound_intensity_base      = psy_antenna.sound_intensity_base      - self.st.intensity
	psy_antenna.mute_sound_threshold      = psy_antenna.mute_sound_threshold      - self.st.mute_sound_threshold
	psy_antenna.hit_intensity             = psy_antenna.hit_intensity             - self.st.hit_intensity
	psy_antenna.phantom_spawn_probability = psy_antenna.phantom_spawn_probability - self.st.phantom_prob
--	log("zone_leave:hit_intensity=[%s]-[%s]", psy_antenna.hit_intensity, self.st.hit_intensity, "") --/#~#
	if self.st.postprocess ~= "nil" and psy_antenna.postprocess[self.st.postprocess] then
		psy_antenna.postprocess[self.st.postprocess].intensity_base = psy_antenna.postprocess[self.st.postprocess].intensity_base - self.st.intensity
	end
end

--/ -----------------------------------------------------------------------------------------------
--/ BINDER
--/ -----------------------------------------------------------------------------------------------
function add_to_binder(oObj, ini, sScheme, sSection, st)
--	log("add_to_binder:Obj=[%s],scheme=[%s],section=[%s]", oObj:name(), sScheme, sSection, "") --/ #~#
	psy_antenna = Get_PsyAntenna()
	local oNewAction = this.action_psy_antenna(oObj, st)
	--/ registering of action, to call method 'reset_scheme' for changing scheme settings:
	xr_logic.subscribe_action_for_events(oObj, st, oNewAction)
end
--/------------------------------------------------------------------
--/ SET_SCHEME
--/------------------------------------------------------------------
function set_scheme(oObj, ini, sScheme, sSection, sGulagName)
	local st = xr_logic.assign_storage_and_bind(oObj, ini, sScheme, sSection)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, sSection, oObj)
	st.postprocess            = Get_Cfg_String(ini, sSection, "postprocess",          "psy_antenna.ppe")
	st.intensity              = Get_Cfg_Number(ini, sSection, "eff_intensity",        nil, true) * 0.01
	st.hit_intensity          = Get_Cfg_Number(ini, sSection, "hit_intensity",        nil, true) * 0.01
	st.mute_sound_threshold   = Get_Cfg_Number(ini, sSection, "mute_sound_threshold", 0)
	st.phantom_prob           = Get_Cfg_Number(ini, sSection, "phantom_prob",         0) * 0.01
	psy_antenna.phantom_max   = Get_Cfg_Number(ini, sSection, "phantom_max",          8) --/#+#
	--/ for debug
	if st.log then log("set_scheme:Obj=[%s],scheme=[%s],section=[%s]%s", oObj:name(), sScheme, sSection, "") end --/#~#
end
--/ -----------------------------------------------------------------------------------------------