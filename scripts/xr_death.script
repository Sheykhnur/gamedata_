--[[-----------------------------------------------------------------------------------------------
 File       : xr_death.script
 Description: Scheme shows, what's happen when NPC dies
 Copyright  : 2004 © GSC Game World
 Author     : GSC Game World
 Last edit  : 21.07.2013 [...]
--]]-----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/ -----------------------------------------------------------------
--/ CONSTRUCTION SCHEME
--/ -----------------------------------------------------------------------------------------------
--/ Action
--/ -----------------------------------------------------------------------------------------------
class "action_process_death"
--/ ---------------------------------------------
function action_process_death:__init(obj, st)
	self.object = obj
	self.st     = st
	self.log    = st.log
end
--/------------------------------------------------------------------
--/ CALLBACK
--/------------------------------------------------------------------
function action_process_death:death_callback(oVictim, oWho)
	if self.log then log("death_callback:NPC=[%s],Killer=[%s]:(%s)", oVictim and oVictim:name(), oWho and oWho:name(), ">") end --/#~#
	if oWho then
--		log("death_callback:Victim=[%s],Id=[%s]<~killed_by=[%s]", oVictim:name(), oVictim:id(), oWho:name(), "") --/#~#
		self.st.killer = oWho:id()
		self.st.killer_name = oWho:name()
		
		if self.st.killer == idActor then
			xr_statistic.addKillCount(self.object)
		end
		--/ giving a small impulse forward.
		local h = hit()
		h.draftsman = self.object
		h.type = hit.fire_wound
		h.direction = oWho:position():sub(self.object:position())
		h:bone("bip01_spine")
		h.power = 1
		h.impulse = 10
		self.object:hit(h)
	else
		log("death_callback:Victim=[%s]<~killed_by=[Unknown]:<%s>", oVictim and oVictim:name(), "Info!")
		self.st.killer = -1
	end
	
	if self.st.info then
		if self.log then log("death_callback:NPC=[%s],info=[%s]", self.object:name(), self.st.info, "") end --/#~#
		xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.info)
	end
	if self.st.info2 then
		if self.log then log("death_callback:NPC=[%s],info2=[%s]", self.object:name(), self.st.info2, "") end --/#~#
		xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.info2)
	end
	
	--xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) --/#x#
	
	smart_terrain.on_death( self.object:id() )
end
--/ -----------------------------------------------------------------------------------------------
--/ BINDER
--/ -----------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, st)
	--log("add_to_binder:NPC=[%s],scheme=[%s],section=[%s]:(%s)", npc:name(), scheme, section, ">") --/#~#
	st.action = this.action_process_death(npc, st)
end
--/------------------------------------------------------------------
--/ SET SCHEME
--/------------------------------------------------------------------
function set_scheme(npc, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	--/ registration of action, for call of 'callback' and method 'reset_scheme' when changing scheme settings:
	xr_logic.subscribe_action_for_events(npc, st, st.action)
	--/ fot debug:
	if st.log then log("set_scheme:NPC=[%s],scheme=[%s],section=[%s],gulag=[%s]", npc:name(), scheme, section, gulag_name, "") end --/#~#
end
--/------------------------------------------------------------------
--/ RESET SCHEME
--/------------------------------------------------------------------
function reset_scheme(npc, scheme, stor, section)
	if stor.log then log("reset_death:NPC=[%s],scheme=[%s],section=[%s]:(%s)", npc and npc:name(), scheme, section, ">") end --/#~#
	local scheme_section = Get_Cfg_String(stor.ini, stor.section_logic, "on_death")
	if scheme_section and npc then
		local info_section = Get_Cfg_String(stor.ini, scheme_section, "on_info")
		if info_section then
			stor.death.info = xr_logic.parse_condlist(npc, scheme_section, "death", info_section)
		end
		local info_section2 = Get_Cfg_String(stor.ini, scheme_section, "on_info2")
		if info_section2 then
			stor.death.info2 = xr_logic.parse_condlist(npc, scheme_section, "death", info_section2)
		end
		if stor.log then log("reset_death:NPC=[%s],on_death=[%s],on_info=[%s/%s]", npc and npc:name(), scheme_section, info_section, info_section2, "") end --/#~#
	end
end
--/------------------------------------------------------------------
--/ REDIRECTs (for compatibility, later delete)
--/------------------------------------------------------------------
function set_death(...)
	set_scheme(...)
end
function reset_death(...)
	reset_scheme(...)
end
--/ -----------------------------------------------------------------------------------------------