--[[ ----------------------------------------------------------------------------------------------
 File       : lua_help.script
 Description: Reference Manual: "Lists of the classes and namespaces exported to LUA"
 Copyright  : 2004-2013 © GSC Game World
 Author     : Lost Alpha 'xrCore' build 5245
 Last edit  : 15.06.2013 [...]
--/ -----------------------------------------------------------------------------------------------

List of the classes exported to LUA

C++ class entity_memory_object : memory_object {
    property last_level_time;
    property level_time;
    property object_info;
    property self_info;
    
    function object(const entity_memory_object&);
};

C++ class game_memory_object : memory_object {
    property last_level_time;
    property level_time;
    property object_info;
    property self_info;
    
    function object(const game_memory_object&);
};

C++ class fcolor {
    property a;
    property b;
    property g;
    property r;
    
    fcolor ();
    
    function set(number, number, number, number);
    function set(const fcolor&);
    function set(number);
};

C++ class flags16 {
    flags16 ();
    
    function zero();
    function assign(const flags16&);
    function assign(number);
    function is(flags16*, number);
    function and(number);
    function and(const flags16&, number);
    function equal(flags16*, const flags16&);
    function equal(flags16*, const flags16&, number);
    function test(flags16*, number);
    function is_any(flags16*, number);
    function or(number);
    function or(const flags16&, number);
    function one(flags16*);
    function set(flags16*, number, boolean);
    function invert();
    function invert(const flags16&);
    function invert(number);
    function get() const;
};

C++ class flags32 {
    flags32 ();
    
    function zero();
    function assign(const flags32&);
    function assign(number);
    function is(flags32*, number);
    function and(number);
    function and(const flags32&, number);
    function equal(flags32*, const flags32&);
    function equal(flags32*, const flags32&, number);
    function test(flags32*, number);
    function is_any(flags32*, number);
    function or(number);
    function or(const flags32&, number);
    function one();
    function set(flags32*, number, boolean);
    function invert();
    function invert(const flags32&);
    function invert(number);
    function get() const;
};

C++ class matrix {
    property _14_;
    property _24_;
    property _34_;
    property _44_;
    property c;
    property i;
    property j;
    property k;
    
    matrix ();
    
    function mk_xform(const struct _quaternion<number>&, const vector&);
    function set(const matrix&);
    function set(const vector&, const vector&, const vector&, const vector&);
    function div(const matrix&, number);
    function div(number);
    function identity();
    function setHPB(number, number, number);
    function setXYZ(number, number, number);
    function getHPB(matrix*, number*, number*, number*);
    function mul(const matrix&, const matrix&);
    function mul(const matrix&, number);
    function mul(number);
    function setXYZi(number, number, number);
};

C++ class Frect {
    property lt;
    property rb;
    property x1;
    property x2;
    property y1;
    property y2;
    
    Frect ();
    
    function set(number, number, number, number);
};

C++ class vector {
    property x;
    property y;
    property z;
    
    vector ();
    
    function set_length(number);
    function sub(number);
    function sub(const vector&);
    function sub(const vector&, const vector&);
    function sub(const vector&, number);
    function reflect(const vector&, const vector&);
    function slide(const vector&, const vector&);
    function average(const vector&);
    function average(const vector&, const vector&);
    function normalize_safe();
    function normalize_safe(const vector&);
    function normalize();
    function normalize(const vector&);
    function align();
    function magnitude() const;
    function getP() const;
    function max(const vector&);
    function max(const vector&, const vector&);
    function distance_to_xz(const vector&) const;
    function invert();
    function invert(const vector&);
    function mad(const vector&, number);
    function mad(const vector&, const vector&, number);
    function mad(const vector&, const vector&);
    function mad(const vector&, const vector&, const vector&);
    function clamp(const vector&);
    function clamp(const vector&, vector);
    function inertion(const vector&, number);
    function crossproduct(const vector&, const vector&);
    function set(number, number, number);
    function set(const vector&);
    function abs(const vector&);
    function div(number);
    function div(const vector&);
    function div(const vector&, const vector&);
    function div(const vector&, number);
    function dotproduct(const vector&) const;
    function getH() const;
    function min(const vector&);
    function min(const vector&, const vector&);
    function similar(const vector&, number) const;
    function distance_to(const vector&) const;
    function lerp(const vector&, const vector&, number);
    function distance_to_sqr(const vector&) const;
    function mul(number);
    function mul(const vector&);
    function mul(const vector&, const vector&);
    function mul(const vector&, number);
    function setHP(number, number);
    function add(number);
    function add(const vector&);
    function add(const vector&, const vector&);
    function add(const vector&, number);
};

C++ class spawn_story_ids {
    const INVALID_SPAWN_STORY_ID = -1;
    
};

C++ class story_ids {
    const ActorPDA = 9999;
    const CStorage_a1 = 9901;
    const CStorage_a2 = 9902;
    const CStorage_a3 = 9903;
    const Fake_InventoryBox = 9989;
    const INVALID_STORY_ID = -1;
    const Invalid = 65535;
    const aes_actor_btr = 7108;
    const aes_carriage_rukzak_cache = 7139;
    const aes_choppa_door_cache = 7140;
    const aes_dog_roof_cache = 7146;
    const aes_dolg1_leader = 7113;
    const aes_dolg2_leader = 7114;
    const aes_dolg_jeep_cache = 7143;
    const aes_dudaev = 7116;
    const aes_evil_btr = 7106;
    const aes_fake_target = 7117;
    const aes_gates = 7105;
    const aes_heli_hunter1 = 7126;
    const aes_heli_hunter10 = 7135;
    const aes_heli_hunter11 = 7136;
    const aes_heli_hunter12 = 7137;
    const aes_heli_hunter2 = 7127;
    const aes_heli_hunter3 = 7128;
    const aes_heli_hunter4 = 7129;
    const aes_heli_hunter5 = 7130;
    const aes_heli_hunter6 = 7131;
    const aes_heli_hunter7 = 7132;
    const aes_heli_hunter8 = 7133;
    const aes_heli_hunter9 = 7134;
    const aes_heli_hunters = 7138;
    const aes_merc_box_cache = 7142;
    const aes_mil_raiders_cache = 7144;
    const aes_mono_ambush_target1 = 7119;
    const aes_mono_ambush_target2 = 7120;
    const aes_mono_ambush_target3 = 7121;
    const aes_mono_ambush_target4 = 7122;
    const aes_mono_btr = 7115;
    const aes_mono_target1 = 7109;
    const aes_mono_target2 = 7110;
    const aes_mono_target3 = 7111;
    const aes_mono_target4 = 7112;
    const aes_raid_heli1 = 7123;
    const aes_raid_heli2 = 7124;
    const aes_raid_heli3 = 7125;
    const aes_raid_leader = 7118;
    const aes_sarcofag_restr = 7107;
    const aes_shelter_cache = 7145;
    const aes_tower_surprise_cache = 7147;
    const aes_tree_cache = 7141;
    const aes_turret = 7149;
    const aes_vent_cache = 7148;
    const agr_exit_to_forg = 6300;
    const agr_exit_to_gar = 6302;
    const agr_exit_to_ros = 6301;
    const agr_factory_box_cache = 6311;
    const agr_factory_rukzak_cache = 6310;
    const agr_factory_skirmish1 = 6306;
    const agr_gunslinger_book = 6318;
    const agr_gunslinger_box = 6308;
    const agr_gunslinger_flash = 6307;
    const agr_krot = 6304;
    const agr_nii_building1_cache = 6312;
    const agr_nii_building2_cache = 6313;
    const agr_quest_case = 6303;
    const agr_ratcatcher = 6305;
    const agr_stalker_tunnel_cache = 6309;
    const agr_strelok_cache = 6317;
    const agr_swamp_cache = 6314;
    const agr_ug_cache = 6315;
    const agr_zaz = 6316;
    const bar_arena_box = 6526;
    const bar_backroom_boss = 6506;
    const bar_bar_cache = 6515;
    const bar_barman = 6504;
    const bar_dead_rpg = 6512;
    const bar_dolg_guide = 6524;
    const bar_duty_cache = 6517;
    const bar_exit_to_forest = 6525;
    const bar_exit_to_forg = 6502;
    const bar_exit_to_gar = 6500;
    const bar_exit_to_mil = 6501;
    const bar_exit_to_yan = 6503;
    const bar_hidden_cache = 6523;
    const bar_hunter = 6509;
    const bar_informer = 6505;
    const bar_ivancov = 6511;
    const bar_loner_leader = 6514;
    const bar_mutants = 6513;
    const bar_petrenko = 6508;
    const bar_stalker_cache = 6518;
    const bar_tower_cache = 6516;
    const bar_veronin_cache = 6522;
    const bar_voronin = 6507;
    const bar_wild1_cache = 6519;
    const bar_wild2_cache = 6520;
    const bar_wild3_cache = 6521;
    const bas_exit_to_out = 8501;
    const bas_hologram = 8503;
    const bas_lab_switch = 8502;
    const bcr_bandit_attic_cache = 8712;
    const bcr_border_box_cache = 8715;
    const bcr_bus_cache = 8710;
    const bcr_church_cache = 8713;
    const bcr_church_hard_cache = 8714;
    const bcr_collapsed_tunnel = 8703;
    const bcr_dead_scientist = 8705;
    const bcr_exit_to_lost = 8701;
    const bcr_exit_to_rad = 8702;
    const bcr_hatch_cache = 8709;
    const bcr_hermit = 8704;
    const bcr_patrol_leader = 8716;
    const bcr_pipe_cache = 8708;
    const bcr_remote_rukzak_cache = 8711;
    const bcr_underground_entrance = 8706;
    const bcr_wc_cache = 8707;
    const bun_codedoor = 7801;
    const bun_control_room_door = 7802;
    const bun_control_switch_1 = 7804;
    const bun_control_switch_2 = 7805;
    const bun_control_switch_3 = 7806;
    const bun_control_switch_4 = 7807;
    const bun_exit_to_rad = 7800;
    const bunker_security_switch_1 = 7803;
    const bunker_security_switch_2 = 7808;
    const cit_bandit_cache = 7218;
    const cit_boss = 7208;
    const cit_bridge_cache = 7221;
    const cit_building1_cache = 7222;
    const cit_building2_cache = 7223;
    const cit_building3_cache = 7224;
    const cit_building4_cache = 7225;
    const cit_colonel = 7212;
    const cit_doctor = 7203;
    const cit_entrance_guard = 7210;
    const cit_exit_to_mil = 7200;
    const cit_exit_to_rad = 7209;
    const cit_exit_to_swa = 7201;
    const cit_exit_to_yan = 7202;
    const cit_freedom_cache = 7219;
    const cit_gym_cache = 7217;
    const cit_heli = 7226;
    const cit_informer = 7211;
    const cit_jail_button = 7205;
    const cit_jail_door = 7206;
    const cit_merc_base1_cache = 7214;
    const cit_merc_base2_cache = 7215;
    const cit_mercs_box = 7213;
    const cit_office_stash = 7204;
    const cit_party_cache = 7216;
    const cit_swamp_cache = 7220;
    const cit_trader = 7207;
    const corpse_1 = 7925;
    const corpse_2 = 7926;
    const corpse_3 = 7927;
    const corpse_4 = 7928;
    const corpse_5 = 7929;
    const corpse_6 = 7930;
    const corpse_7 = 7931;
    const dam_car_boot_cache = 8612;
    const dam_control_room_switch = 8604;
    const dam_document = 8608;
    const dam_drawers_cache = 8616;
    const dam_exit_to_out = 8603;
    const dam_exit_to_pri = 8602;
    const dam_exit_to_rad = 8601;
    const dam_green_box_cache = 8613;
    const dam_guide = 8609;
    const dam_motor_housing_cache = 8611;
    const dam_roof_sheet_cache = 8610;
    const dam_station_code_docs = 8617;
    const dam_station_codedoor = 8605;
    const dam_truck_fuel_tank_cache = 8614;
    const dam_truck_green_box_cache = 8615;
    const dam_tunnel_storage1_door = 8606;
    const dam_tunnel_storage2_door = 8607;
    const dar_document_1 = 7902;
    const dar_document_2 = 7903;
    const dar_document_3 = 7904;
    const dar_document_4 = 7905;
    const dar_document_5 = 7906;
    const dar_door_01 = 7909;
    const dar_door_02 = 7910;
    const dar_door_03 = 7911;
    const dar_door_04 = 7912;
    const dar_door_05 = 7913;
    const dar_door_06 = 7914;
    const dar_door_07 = 7915;
    const dar_door_08 = 7916;
    const dar_door_09 = 7917;
    const dar_door_10 = 7918;
    const dar_door_11 = 7919;
    const dar_door_12 = 7920;
    const dar_door_13 = 7921;
    const dar_door_14 = 7922;
    const dar_door_15 = 7923;
    const dar_door_16 = 7924;
    const dar_exit_to_val = 7900;
    const dar_hanging_corpse = 7901;
    const dar_pc_darkscape = 6498;
    const dar_stalker_corpse = 7907;
    const dar_stalker_venturer = 7908;
    const dolina_army_heli = 6414;
    const dolina_bandit1_cache = 6417;
    const dolina_bandit2_cache = 6418;
    const dolina_bandit_trader = 6408;
    const dolina_borov = 6406;
    const dolina_borov_doc = 6415;
    const dolina_exit_to_forest = 6429;
    const dolina_field1_cache = 6420;
    const dolina_field2_cache = 6421;
    const dolina_field3_cache = 6422;
    const dolina_field4_cache = 6423;
    const dolina_gusarov = 6409;
    const dolina_locked_dar_door = 6430;
    const dolina_mono1_cache = 6424;
    const dolina_mono2_cache = 6425;
    const dolina_monolith_informer = 6412;
    const dolina_prisoner = 6407;
    const dolina_stalker_lager_cache = 6419;
    const dolina_target = 6428;
    const dolina_tunnel1_cache = 6426;
    const dolina_tunnel2_cache = 6427;
    const dolina_tunnel_entrance = 6416;
    const dolina_white_niva = 6413;
    const dolina_x18_doc = 6411;
    const drunken_bandit = 6410;
    const ds_autostation_leader = 7506;
    const ds_autostation_trader = 7507;
    const ds_autostop_cache = 7516;
    const ds_dolg_disc = 7522;
    const ds_dolg_leader = 7521;
    const ds_exit_to_esc = 7500;
    const ds_exit_to_val = 7501;
    const ds_heli = 7502;
    const ds_leader_box = 7512;
    const ds_military_cache = 7513;
    const ds_mine = 7509;
    const ds_mine_darkstalker_boss = 7503;
    const ds_mine_darkstalker_informator = 7504;
    const ds_reached = 7510;
    const ds_swamp1_cache = 7517;
    const ds_swamp2_cache = 7518;
    const ds_swamp3_cache = 7519;
    const ds_swamp4_cache = 7520;
    const ds_tunnel = 7508;
    const ds_tunnel_exit = 7511;
    const ds_tunnels1_cache = 7514;
    const ds_tunnels2_cache = 7515;
    const ds_village_stalker = 7505;
    const esc_art_tutor = 6023;
    const esc_basement_motor_cache = 6013;
    const esc_blockpost_commander = 6017;
    const esc_blockpost_documents = 6020;
    const esc_blockpost_patrol_leader = 6029;
    const esc_blockpost_sniper_1 = 6018;
    const esc_blockpost_sniper_2 = 6019;
    const esc_blockpost_turret = 6030;
    const esc_dead_train_fuel_cache = 6008;
    const esc_exit_to_dscape_tomb_cache = 6009;
    const esc_exit_to_rosf = 6015;
    const esc_factory = 6028;
    const esc_factory_artefact = 6016;
    const esc_factory_bandit_leader = 6022;
    const esc_factory_wolf = 6032;
    const esc_fox = 6025;
    const esc_kamaz_motor_cache = 6010;
    const esc_killed_flash = 6031;
    const esc_kuznetsov = 6026;
    const esc_level_changer_to_gar = 6001;
    const esc_petruha = 6014;
    const esc_river_under_rocks_cache = 6011;
    const esc_sidorovich = 6006;
    const esc_stalker_maddog = 6021;
    const esc_stalker_novice = 6024;
    const esc_tunnel_moskvichtrunk_cache = 6012;
    const esc_village_tomb_left_cache = 6002;
    const esc_village_tomb_middle_cache = 6003;
    const esc_village_tomb_right_cache = 6004;
    const esc_wolf = 6027;
    const escape_blockpost_rupor = 6005;
    const exit_to_darkscape = 6007;
    const forest_anomalous_cache = 9011;
    const forest_bamm = 9010;
    const forest_barn_roof_cache = 9008;
    const forest_barracks_box_cache = 9005;
    const forest_car_trunk_cache = 9003;
    const forest_desk_cupboard_cache = 9004;
    const forest_exit_to_bar = 9012;
    const forest_exit_to_dolina = 9001;
    const forest_piano_playing = 9009;
    const forest_piano_roof_cache = 9007;
    const forest_safe_cache = 9002;
    const forest_village_storeroom_cache = 9006;
    const forg_bandit_bunker_cache = 8911;
    const forg_bandit_roof_box_cache = 8912;
    const forg_dolg_raid_leader = 8918;
    const forg_electrical_box_cache = 8915;
    const forg_exit_to_agro = 8901;
    const forg_exit_to_bar = 8903;
    const forg_exit_to_yan = 8902;
    const forg_killer_bar_cache = 8909;
    const forg_killer_barman = 8907;
    const forg_killer_tank_cache = 8910;
    const forg_left_wounded = 8919;
    const forg_merc_camp = 8906;
    const forg_stalker_bricks_cache = 8913;
    const forg_stalker_camp = 8905;
    const forg_stalker_concrete_rukzak_cache = 8914;
    const forg_stalker_trader = 8904;
    const forg_toolkit = 8916;
    const forg_tower_rukzak_cache = 8908;
    const forg_transistors = 8917;
    const gar_bandit_sniper = 6108;
    const gar_bes_lager_cache = 6114;
    const gar_blokpost_cache = 6118;
    const gar_boars_lair = 6113;
    const gar_broken_building_cache = 6115;
    const gar_dolg_blockpost_leader = 6112;
    const gar_exit_to_agr = 6101;
    const gar_exit_to_bar_la = 6106;
    const gar_exit_to_esc = 6100;
    const gar_exit_to_rosf = 6102;
    const gar_exit_to_val1 = 6103;
    const gar_exit_to_val2 = 6104;
    const gar_exit_to_val3 = 6105;
    const gar_field_cache = 6119;
    const gar_hellcar = 6107;
    const gar_house_ak74 = 6110;
    const gar_large_hangar_cache = 6117;
    const gar_negotiador = 6122;
    const gar_seriy = 6109;
    const gar_small_hangar_cache = 6121;
    const gar_sniper_tunnel_cache = 6116;
    const gar_yarik = 6111;
    const gar_zombie_cache = 6120;
    const gen_exit_to_npp = 7701;
    const gen_exit_to_war = 7700;
    const gen_ghost = 8650;
    const gen_ghost_after = 8654;
    const gen_lab = 8652;
    const gen_sanctuary = 8655;
    const gen_tnt = 8653;
    const gen_tunnel = 8651;
    const lab_belkin = 8426;
    const lab_dead_scientist = 8403;
    const lab_dead_scientist_pda = 8429;
    const lab_exit_to_lost1 = 8401;
    const lab_exit_to_lost2 = 8402;
    const lab_exit_tunnel = 8424;
    const lab_good_psy_helmet = 8404;
    const lab_labx16_switcher_primary_1_green = 8407;
    const lab_labx16_switcher_primary_1_red = 8408;
    const lab_labx16_switcher_primary_2_green = 8409;
    const lab_labx16_switcher_primary_2_red = 8410;
    const lab_labx16_switcher_primary_3_green = 8411;
    const lab_labx16_switcher_primary_3_red = 8412;
    const lab_loudspeaker_lamp = 8428;
    const lab_maskenikov = 8425;
    const lab_primary_sw_cutscene = 8427;
    const lab_primary_switcher = 8423;
    const lab_stash = 8430;
    const lab_switcher_01 = 8405;
    const lab_switcher_02 = 8406;
    const lab_switcher_03 = 8422;
    const lab_switcher_scene_01 = 8431;
    const lab_switcher_scene_02 = 8432;
    const lab_switcher_scene_03 = 8433;
    const lab_switcher_scene_hanging_lamp_01 = 8434;
    const lab_switcher_scene_hanging_lamp_02 = 8435;
    const lab_switcher_scene_hanging_lamp_03 = 8436;
    const lost_bunker_door = 8305;
    const lost_bus_cache = 8319;
    const lost_crane_cache = 8320;
    const lost_eco_cache = 8306;
    const lost_eco_yard_cache = 8307;
    const lost_exit_to_bcr = 8301;
    const lost_exit_to_lab = 8302;
    const lost_grave_cache = 8315;
    const lost_lab_yard1_cache = 8311;
    const lost_lab_yard2_cache = 8312;
    const lost_lab_yard3_cache = 8313;
    const lost_lab_yard4_cache = 8314;
    const lost_old_snork_cache = 8310;
    const lost_pipe_cache = 8318;
    const lost_readings_cache = 8309;
    const lost_scientist_professor = 8303;
    const lost_shed_door = 8304;
    const lost_substation_cache = 8308;
    const lost_swamp_cache = 8316;
    const lost_valve_cache = 8317;
    const mil_bandit_cache = 6724;
    const mil_barn_merc1 = 6716;
    const mil_barn_merc2 = 6717;
    const mil_base1_cache = 6725;
    const mil_base2_cache = 6726;
    const mil_base3_cache = 6727;
    const mil_base4_cache = 6728;
    const mil_basement_trader = 6704;
    const mil_basement_trader_zone = 6703;
    const mil_contact = 6715;
    const mil_crazy_stalker = 6720;
    const mil_exit_to_bar = 6700;
    const mil_exit_to_cit = 6702;
    const mil_exit_to_rad = 6701;
    const mil_fang = 6721;
    const mil_ghost = 6713;
    const mil_hideout_cache = 6722;
    const mil_killer_base_rupor = 6705;
    const mil_killer_house_cache = 6723;
    const mil_killer_leader = 6711;
    const mil_killer_leader_pc = 6712;
    const mil_killer_sergey = 6714;
    const mil_killer_sniper_1 = 6706;
    const mil_killer_sniper_2 = 6707;
    const mil_killer_sniper_3 = 6708;
    const mil_killer_sniper_4 = 6709;
    const mil_killer_sniper_5 = 6710;
    const mil_lr_special = 6719;
    const mil_restr_contact = 6718;
    const mil_stalker_ug_cache = 6731;
    const mil_tower_cache = 6730;
    const mil_village_cache = 6729;
    const npp_exit_to_gen = 7102;
    const npp_exit_to_pri = 7101;
    const npp_exit_to_rad1 = 7100;
    const npp_exit_to_rad2 = 7104;
    const npp_exit_to_sar = 7103;
    const oso_gman = 8801;
    const oso_gman_lamp = 8807;
    const oso_leader = 8806;
    const oso_priest1 = 8802;
    const oso_priest2 = 8803;
    const oso_priest3 = 8804;
    const oso_priest4 = 8805;
    const out_arnie = 8216;
    const out_bar_backroom_door = 8206;
    const out_bar_barman = 8208;
    const out_bar_cache = 8221;
    const out_bar_entrance_door = 8205;
    const out_bar_guard = 8204;
    const out_bar_informator = 8207;
    const out_bar_ivancov = 8213;
    const out_bug = 8230;
    const out_cook = 8219;
    const out_dolg_guide = 8231;
    const out_exit_to_bas = 8212;
    const out_exit_to_pri = 8202;
    const out_exit_to_rad = 8203;
    const out_exit_to_swa = 8201;
    const out_flashcard = 8229;
    const out_freedom_bar_cache = 8222;
    const out_guide = 8214;
    const out_ivancov_cache = 8223;
    const out_lukash = 8217;
    const out_max = 8220;
    const out_mil_base_documents = 8211;
    const out_mil_base_leader = 8210;
    const out_mil_base_rupor = 8209;
    const out_mono_cache = 8224;
    const out_petrenko = 8215;
    const out_random1_cache = 8225;
    const out_random2_cache = 8226;
    const out_random3_cache = 8227;
    const out_random4_cache = 8228;
    const out_skinflint = 8218;
    const pri_broken_staircase_cache = 6812;
    const pri_bus_rukzak_cache = 6813;
    const pri_cinema_basement_box_cache = 6810;
    const pri_cinema_basement_cabinet_cache = 6811;
    const pri_crane_electrical_box_cache = 6814;
    const pri_desk_cupboard_cache = 6815;
    const pri_ecolog_conatct = 6821;
    const pri_exit_to_dam = 6803;
    const pri_exit_to_npp = 6801;
    const pri_exit_to_out = 6802;
    const pri_exit_to_rad = 6800;
    const pri_field_agent = 6822;
    const pri_ghost = 6804;
    const pri_hotel_door = 6805;
    const pri_rubble_rukzak_cache = 6807;
    const pri_secret_trader = 6806;
    const pri_skirmish1 = 6820;
    const pri_stadium_carriage_cache = 6817;
    const pri_stadium_tank_cache = 6818;
    const pri_staircase_box_cache = 6809;
    const pri_storage_hangar_cache = 6808;
    const pri_tanker_cache = 6816;
    const pri_vasilev = 6819;
    const rad_bunker_restr_zone = 7014;
    const rad_captain = 7016;
    const rad_exit_cit = 7004;
    const rad_exit_to_bcr = 7005;
    const rad_exit_to_bun = 7002;
    const rad_exit_to_dam = 7006;
    const rad_exit_to_mil_01 = 7000;
    const rad_exit_to_mil_02 = 7001;
    const rad_exit_to_npp_1 = 7003;
    const rad_exit_to_out = 7007;
    const rad_heli = 7017;
    const rad_heli_monolith_target = 7015;
    const rad_hermit_belongings = 7008;
    const rad_hermit_house_stash = 7009;
    const rad_hermit_mutant = 7010;
    const rad_mono_base1_cache = 7018;
    const rad_mono_base2_cache = 7019;
    const rad_monolith_base_commander = 7011;
    const rad_monolith_outpost_leader = 7012;
    const rad_random1_cache = 7020;
    const rad_random2_cache = 7021;
    const rad_random3_cache = 7022;
    const rad_random4_cache = 7023;
    const rad_random5_cache = 7024;
    const rad_random6_cache = 7025;
    const radar_safe_object = 7013;
    const ros_exit_to_agr = 7600;
    const ros_exit_to_esc = 7602;
    const ros_exit_to_sec = 7601;
    const rosf_bandit_cache = 7618;
    const rosf_bloodsucker_1 = 7604;
    const rosf_bloodsucker_2 = 7605;
    const rosf_bloodsucker_3 = 7606;
    const rosf_bloodsucker_task = 7611;
    const rosf_construction_cache = 7619;
    const rosf_duty_hq = 7610;
    const rosf_duty_hq1_cache = 7620;
    const rosf_duty_hq2_cache = 7621;
    const rosf_duty_leader = 7603;
    const rosf_duty_safe = 7612;
    const rosf_duty_village_cache = 7615;
    const rosf_eco_cache = 7616;
    const rosf_ecos_tunnel = 7613;
    const rosf_factory1_cache = 7622;
    const rosf_factory2_cache = 7623;
    const rosf_fixer = 7614;
    const rosf_military_cache = 7617;
    const rosf_pda_1 = 7607;
    const rosf_pda_2 = 7608;
    const rosf_pda_3 = 7609;
    const sar_battery_case = 7304;
    const sar_computer = 7302;
    const sar_control_room = 7301;
    const sar_exit_to_npp = 7300;
    const sar_monolith = 7305;
    const sar_powerline = 7303;
    const sec_bloodsucker_king = 8005;
    const sec_bloodsucker_lair = 8004;
    const sec_code_door = 8002;
    const sec_code_door_2 = 8003;
    const sec_control_room = 8001;
    const sec_exit_to_rosf = 8000;
    const secret_bloodsucker = 6604;
    const secret_documents = 6600;
    const secret_pda = 6601;
    const secret_stash1_cache = 6602;
    const secret_stash2_cache = 6603;
    const swa_bandit_cache = 8113;
    const swa_beast1 = 8104;
    const swa_beast2 = 8105;
    const swa_beast3 = 8106;
    const swa_beast4 = 8107;
    const swa_doc = 8108;
    const swa_doc_cache = 8111;
    const swa_doc_hideout = 8109;
    const swa_exit_to_cit = 8102;
    const swa_exit_to_out = 8103;
    const swa_exit_to_yan = 8101;
    const swa_pda_boards = 8110;
    const swa_random1_cache = 8114;
    const swa_random2_cache = 8115;
    const swa_random3_cache = 8116;
    const swa_random4_cache = 8117;
    const swa_stalker_cache = 8112;
    const val1_exit_to_gar1 = 6400;
    const val2_exit_to_gar2 = 6401;
    const val3_exit_to_gar3 = 6402;
    const val_exit_to_dar = 6404;
    const val_exit_to_ds = 6405;
    const war_charger1 = 8693;
    const war_charger2 = 8694;
    const war_charger3 = 8695;
    const war_charger4 = 8696;
    const war_charger5 = 8697;
    const war_codedoor_1 = 7401;
    const war_con_pc = 8689;
    const war_doc_pc = 8683;
    const war_exit_to_gen = 7400;
    const war_exit_to_gen_2 = 7403;
    const war_fuel = 8686;
    const war_generator = 8681;
    const war_pc_information = 7402;
    const war_pipe = 8682;
    const war_scanner1 = 8687;
    const war_scanner2 = 8688;
    const war_switcher = 8685;
    const war_tech_pc = 8684;
    const war_thing = 8690;
    const war_thing_battle_mode = 8692;
    const war_thing_restrictor = 8691;
    const wild_safe_object = 6510;
    const yan_bandits_gastation = 6928;
    const yan_bandits_village = 6927;
    const yan_base = 6909;
    const yan_base_leader = 6908;
    const yan_bunker_door = 6906;
    const yan_dolg_leader = 6926;
    const yan_eco_cache = 6911;
    const yan_eco_yard_cache = 6912;
    const yan_exit_to_bar = 6901;
    const yan_exit_to_bar_2 = 6904;
    const yan_exit_to_cit = 6903;
    const yan_exit_to_forg = 6900;
    const yan_exit_to_swa = 6902;
    const yan_gman = 6925;
    const yan_kruglov = 6910;
    const yan_labx16switcher_lamp1 = 8413;
    const yan_labx16switcher_lamp2 = 8414;
    const yan_labx16switcher_lamp3 = 8415;
    const yan_labx16switcher_primary_1_green = 8416;
    const yan_labx16switcher_primary_1_red = 8417;
    const yan_labx16switcher_primary_2_green = 8418;
    const yan_labx16switcher_primary_2_red = 8419;
    const yan_labx16switcher_primary_3_green = 8420;
    const yan_labx16switcher_primary_3_red = 8421;
    const yan_military_cache = 6913;
    const yan_professor = 6905;
    const yan_rats_cache = 6922;
    const yan_rifle = 6923;
    const yan_rifle_dude = 6924;
    const yan_shed_door = 6907;
    const yan_swamp1_cache = 6914;
    const yan_swamp2_cache = 6915;
    const yan_swamp3_cache = 6916;
    const yan_swamp4_cache = 6917;
    const yan_tunnels1_cache = 6918;
    const yan_tunnels2_cache = 6919;
    const yan_tunnels3_cache = 6920;
    const yan_tunnels4_cache = 6921;
    
};

C++ class callback {
    const action_animation = 20;
    const action_movement = 18;
    const action_object = 23;
    const action_particle = 22;
    const action_sound = 21;
    const action_watch = 19;
    const actor_sleep = 24;
    const article_info = 12;
    const death = 8;
    const helicopter_on_hit = 26;
    const helicopter_on_point = 25;
    const hit = 16;
    const inventory_info = 11;
    const inventory_pda = 10;
    const level_border_enter = 7;
    const level_border_exit = 6;
    const map_location_added = 14;
    const on_button_hold = 31;
    const on_button_press = 29;
    const on_button_release = 30;
    const on_item_drop = 28;
    const on_item_take = 27;
    const on_move_to_belt = 33;
    const on_move_to_ruck = 34;
    const on_move_to_slot = 32;
    const patrol_path_in_point = 9;
    const script_animation = 35;
    const sound = 17;
    const take_item_from_box = 39;
    const task_state = 13;
    const trade_perform_operation = 3;
    const trade_sell_buy_item = 2;
    const trade_start = 0;
    const trade_stop = 1;
    const trader_global_anim_request = 36;
    const trader_head_anim_request = 37;
    const trader_sound_end = 38;
    const use_object = 15;
    const zone_enter = 4;
    const zone_exit = 5;
    
};

C++ class key_bindings {
    const kACCEL = 7;
    const kBACK = 10;
    const kBUY = 50;
    const kCAM_1 = 16;
    const kCAM_2 = 17;
    const kCAM_3 = 18;
    const kCAM_4 = 19;
    const kCAM_ZOOM_IN = 20;
    const kCAM_ZOOM_OUT = 21;
    const kCHAT = 44;
    const kCONSOLE = 48;
    const kCROUCH = 5;
    const kCROUCH_TOGGLE = 6;
    const kDOWN = 3;
    const kDROP = 41;
    const kENGINE = 15;
    const kFWD = 9;
    const kINVENTORY = 49;
    const kJUMP = 4;
    const kLEFT = 0;
    const kL_LOOKOUT = 13;
    const kL_STRAFE = 11;
    const kNIGHT_VISION = 23;
    const kQUICK_LOAD = 76;
    const kQUICK_SAVE = 75;
    const kQUIT = 47;
    const kRIGHT = 1;
    const kR_LOOKOUT = 14;
    const kR_STRAFE = 12;
    const kSCORES = 43;
    const kSCREENSHOT = 46;
    const kSKIN = 51;
    const kTEAM = 52;
    const kTORCH = 22;
    const kUP = 2;
    const kUSE = 42;
    const kUSE_BANDAGE = 73;
    const kUSE_MEDKIT = 74;
    const kWPN_1 = 24;
    const kWPN_2 = 25;
    const kWPN_3 = 26;
    const kWPN_4 = 27;
    const kWPN_5 = 28;
    const kWPN_6 = 29;
    const kWPN_FIRE = 32;
    const kWPN_FUNC = 37;
    const kWPN_NEXT = 31;
    const kWPN_RELOAD = 36;
    const kWPN_ZOOM = 33;
    
};

C++ class game_messages {
    const GAME_EVENT_ARTEFACT_DESTROYED = 15;
    const GAME_EVENT_ARTEFACT_DROPPED = 17;
    const GAME_EVENT_ARTEFACT_ONBASE = 18;
    const GAME_EVENT_ARTEFACT_SPAWNED = 14;
    const GAME_EVENT_ARTEFACT_TAKEN = 16;
    const GAME_EVENT_BUY_MENU_CLOSED = 21;
    const GAME_EVENT_PLAYER_BUY_FINISHED = 2;
    const GAME_EVENT_PLAYER_CHANGE_SKIN = 4;
    const GAME_EVENT_PLAYER_CHANGE_TEAM = 4;
    const GAME_EVENT_PLAYER_CONNECTED = 6;
    const GAME_EVENT_PLAYER_DISCONNECTED = 7;
    const GAME_EVENT_PLAYER_ENTER_TEAM_BASE = 19;
    const GAME_EVENT_PLAYER_JOIN_TEAM = 11;
    const GAME_EVENT_PLAYER_KILL = 1;
    const GAME_EVENT_PLAYER_KILLED = 9;
    const GAME_EVENT_PLAYER_LEAVE_TEAM_BASE = 20;
    const GAME_EVENT_PLAYER_READY = 0;
    const GAME_EVENT_ROUND_END = 13;
    const GAME_EVENT_ROUND_STARTED = 12;
    const GAME_EVENT_SCRIPT_BEGINS_FROM = 38;
    const GAME_EVENT_SKIN_MENU_CLOSED = 23;
    const GAME_EVENT_TEAM_MENU_CLOSED = 22;
    
};

C++ class game_phases {
    const GAME_PHASE_INPROGRESS = 1;
    const GAME_PHASE_NONE = 0;
    const GAME_PHASE_PENDING = 2;
    const GAME_PHASE_SCRIPT_BEGINS_FROM = 9;
    const GAME_PHASE_TEAM1_SCORES = 3;
    const GAME_PHASE_TEAM2_SCORES = 4;
    const GAME_PHASE_TEAMS_IN_A_DRAW = 7;
    
};

C++ class game_player_flags {
    const GAME_PLAYER_FLAG_LOCAL = 1;
    const GAME_PLAYER_FLAG_READY = 2;
    const GAME_PLAYER_FLAG_SCRIPT_BEGINS_FROM = 16;
    const GAME_PLAYER_FLAG_SPECTATOR = 8;
    const GAME_PLAYER_FLAG_VERY_VERY_DEAD = 4;
    
};

C++ class GAME_TYPE {
    const GAME_ARTEFACTHUNT = 7;
    const GAME_DEATHMATCH = 2;
    const GAME_TEAMDEATHMATCH = 6;
    const GAME_UNKNOWN = 0;
    
};

C++ class game_difficulty {
    const master = 3;
    const novice = 0;
    const stalker = 1;
    const veteran = 2;
    
};

C++ class snd_type {
    const ambient = 128;
    const anomaly = 268435456;
    const anomaly_idle = 268437504;
    const attack = 8192;
    const bullet_hit = 524288;
    const die = 131072;
    const drop = 33554432;
    const eat = 4096;
    const empty = 1048576;
    const hide = 16777216;
    const idle = 2048;
    const injure = 65536;
    const item = 1073741824;
    const item_drop = 1107296256;
    const item_hide = 1090519040;
    const item_pick_up = 1140850688;
    const item_take = 1082130432;
    const item_use = 1077936128;
    const monster = 536870912;
    const monster_attack = 536879104;
    const monster_die = 537001984;
    const monster_eat = 536875008;
    const monster_injure = 536936448;
    const monster_step = 536903680;
    const monster_talk = 536887296;
    const no_sound = 0;
    const object_break = 1024;
    const object_collide = 512;
    const object_explode = 256;
    const pick_up = 67108864;
    const reload = 262144;
    const shoot = 2097152;
    const step = 32768;
    const take = 8388608;
    const talk = 16384;
    const use = 4194304;
    const weapon = -2147483648;
    const weapon_bullet_hit = -2146959360;
    const weapon_empty = -2146435072;
    const weapon_reload = -2147221504;
    const weapon_shoot = -2145386496;
    const world = 134217728;
    const world_ambient = 134217856;
    const world_object_break = 134218752;
    const world_object_collide = 134218240;
    const world_object_explode = 134217984;
    
};

C++ class task {
    const completed = 2;
    const fail = 0;
    const in_progress = 1;
    const skipped = 3;
    const task_dummy = -1;
    
};

C++ class ui_events {
    const BUTTON_CLICKED = 16;
    const BUTTON_DOWN = 17;
    const CHECK_BUTTON_RESET = 20;
    const CHECK_BUTTON_SET = 19;
    const DRAG_DROP_ITEM_DB_CLICK = 24;
    const DRAG_DROP_ITEM_DRAG = 22;
    const DRAG_DROP_ITEM_DROP  = 23;
    const DRAG_DROP_ITEM_RBUTTON_CLICK = 25;
    const EDIT_TEXT_CHANGED = 75;
    const EDIT_TEXT_COMMIT = 76;
    const INTERACTIVE_ITEM_CLICK = 37;
    const INVENTORY_ATTACH_ADDON  = 61;
    const INVENTORY_DETACH_GRENADE_LAUNCHER_ADDON = 67;
    const INVENTORY_DETACH_SCOPE_ADDON = 63;
    const INVENTORY_DETACH_SILENCER_ADDON = 65;
    const INVENTORY_DROP_ACTION = 56;
    const INVENTORY_EAT_ACTION = 57;
    const INVENTORY_TO_BAG_ACTION = 60;
    const INVENTORY_TO_BELT_ACTION  = 58;
    const INVENTORY_TO_SLOT_ACTION = 59;
    const LIST_ITEM_CLICKED = 32;
    const LIST_ITEM_DB_CLICKED = 33;
    const LIST_ITEM_SELECT = 34;
    const MESSAGE_BOX_CANCEL_CLICKED = 44;
    const MESSAGE_BOX_NO_CLICKED = 43;
    const MESSAGE_BOX_OK_CLICKED = 39;
    const MESSAGE_BOX_QUIT_GAME_CLICKED = 42;
    const MESSAGE_BOX_QUIT_WIN_CLICKED = 41;
    const MESSAGE_BOX_YES_CLICKED = 40;
    const OUTFIT_RETURNED_BACK = 55;
    const PDA_CONTACTS_WND_CONTACT_SELECTED = 51;
    const PDA_DIALOG_WND_BACK_BUTTON_CLICKED = 49;
    const PDA_DIALOG_WND_MESSAGE_BUTTON_CLICKED = 50;
    const PROPERTY_CLICKED = 38;
    const RADIOBUTTON_SET = 21;
    const SCROLLBAR_HSCROLL = 29;
    const SCROLLBAR_VSCROLL = 28;
    const SCROLLBOX_MOVE = 27;
    const STATIC_FOCUS_LOST = 15;
    const STATIC_FOCUS_RECEIVED = 14;
    const TAB_CHANGED = 18;
    const TALK_DIALOG_QUESTION_CLICKED = 46;
    const TALK_DIALOG_TRADE_BUTTON_CLICKED = 45;
    const TRADE_WND_CLOSED = 52;
    const UNDRESS_OUTFIT = 54;
    const WINDOW_KEYBOARD_CAPTURE_LOST = 13;
    const WINDOW_KEY_PRESSED = 10;
    const WINDOW_KEY_RELEASED = 11;
    const WINDOW_LBUTTON_DB_CLICK = 9;
    const WINDOW_LBUTTON_DOWN = 0;
    const WINDOW_LBUTTON_UP = 3;
    const WINDOW_MOUSE_CAPTURE_LOST  = 12;
    const WINDOW_MOUSE_MOVE = 6;
    const WINDOW_RBUTTON_DOWN = 1;
    const WINDOW_RBUTTON_UP = 4;
    
};

C++ class hit_memory_object : entity_memory_object {
    property amount;
    property bone_index;
    property direction;
    property last_level_time;
    property level_time;
    property object_info;
    property self_info;
    
    function object(const entity_memory_object&);
};

C++ class clsid {
    const actor = 86;
    const ameba_zone = 194;
    const art_bast_artefact = 0;
    const art_black_drops = 1;
    const art_dummy = 3;
    const art_electric_ball = 4;
    const art_faded_ball = 5;
    const art_galantine = 6;
    const art_gravi = 7;
    const art_gravi_black = 2;
    const art_mercury_ball = 8;
    const art_needles = 9;
    const art_rusty_hair = 10;
    const art_thorn = 11;
    const art_zuda = 12;
    const artefact = 41;
    const artefact_s = 98;
    const attachable_s = 78;
    const bloodsucker = 13;
    const bloodsucker_s = 103;
    const boar = 14;
    const boar_s = 104;
    const burer = 15;
    const burer_s = 105;
    const car = 52;
    const car_s = 99;
    const cat = 16;
    const cat_s = 106;
    const chimera = 29;
    const chimera_s = 107;
    const controller = 17;
    const controller_s = 108;
    const crow = 18;
    const device_detector_simple = 54;
    const device_pda = 53;
    const device_torch = 55;
    const device_torch_s = 131;
    const dog_black = 19;
    const dog_red = 22;
    const dog_s = 111;
    const equ_exo = 56;
    const equ_military = 57;
    const equ_scientific = 58;
    const equ_stalker = 59;
    const equ_stalker_s = 60;
    const flesh = 23;
    const flesh_group = 24;
    const flesh_s = 112;
    const fracture = 25;
    const fracture_s = 115;
    const game = 64;
    const game_cl_LastStanding = 47;
    const game_cl_artefact_hunt = 45;
    const game_cl_deathmatch = 46;
    const game_cl_single = 48;
    const game_cl_team_deathmatch = 49;
    const game_sv_LastStanding = 128;
    const game_sv_artefact_hunt = 126;
    const game_sv_deathmatch = 127;
    const game_sv_single = 129;
    const game_sv_team_deathmatch = 130;
    const game_ui_artefact_hunt = 132;
    const game_ui_deathmatch = 133;
    const game_ui_single = 134;
    const game_ui_team_deathmatch = 135;
    const ghost_boss = 26;
    const ghostboss_s = 113;
    const gigant_s = 114;
    const graph_point = 28;
    const hanging_lamp = 89;
    const helicopter = 50;
    const hud_manager = 67;
    const inventory_box = 90;
    const karlik = 30;
    const karlik_s = 116;
    const level = 63;
    const level_changer = 82;
    const main_menu = 83;
    const mp_players_bag = 84;
    const nogravity_zone = 204;
    const obj_antirad = 68;
    const obj_attachable = 69;
    const obj_bandage = 70;
    const obj_battery = 71;
    const obj_bolt = 72;
    const obj_bottle = 73;
    const obj_breakable = 87;
    const obj_climable = 88;
    const obj_document = 74;
    const obj_explosive = 75;
    const obj_food = 76;
    const obj_medkit = 77;
    const obj_phskeleton = 95;
    const obj_phys_destroyable = 94;
    const obj_physic = 91;
    const online_offline_group = 85;
    const phantom = 31;
    const poltergeist = 32;
    const poltergeist_s = 117;
    const projector = 93;
    const pseudo_gigant = 27;
    const pseudodog_s = 118;
    const psy_dog = 21;
    const psy_dog_phantom = 20;
    const psy_dog_phantom_s = 109;
    const psy_dog_s = 110;
    const rat_s = 119;
    const respawn = 96;
    const script_anom_zone = 79;
    const script_heli = 51;
    const script_object = 100;
    const script_phys = 92;
    const script_restr = 124;
    const script_shelter = 81;
    const script_stalker = 35;
    const script_trader = 37;
    const script_zone = 97;
    const smart_terrain = 101;
    const smart_zone = 102;
    const snork = 33;
    const snork_s = 120;
    const space_restrictor = 123;
    const spectator = 125;
    const stalker = 34;
    const team_base_zone = 208;
    const torrid_zone = 209;
    const trader = 36;
    const tushkano = 38;
    const tushkano_s = 121;
    const wpn_ak74 = 155;
    const wpn_ak74_s = 136;
    const wpn_ammo = 40;
    const wpn_ammo_m209 = 42;
    const wpn_ammo_og7b = 43;
    const wpn_ammo_vog25 = 44;
    const wpn_binocular = 156;
    const wpn_binocular_s = 137;
    const wpn_bm16 = 157;
    const wpn_bm16_s = 138;
    const wpn_fireball = 158;
    const wpn_fn2000 = 159;
    const wpn_fort = 160;
    const wpn_grenade_f1 = 61;
    const wpn_grenade_fake = 62;
    const wpn_grenade_launcher = 161;
    const wpn_grenade_rgd5 = 65;
    const wpn_grenade_rpg7 = 66;
    const wpn_groza = 162;
    const wpn_groza_s = 139;
    const wpn_hpsa = 163;
    const wpn_hpsa_s = 140;
    const wpn_knife = 164;
    const wpn_knife_s = 141;
    const wpn_lr300 = 165;
    const wpn_lr300_s = 142;
    const wpn_mounted = 166;
    const wpn_pm = 167;
    const wpn_pm_s = 143;
    const wpn_rg6 = 168;
    const wpn_rg6_s = 144;
    const wpn_rpg7 = 169;
    const wpn_rpg7_s = 145;
    const wpn_scope = 170;
    const wpn_scope_s = 146;
    const wpn_shotgun = 171;
    const wpn_shotgun_s = 147;
    const wpn_silencer = 172;
    const wpn_stat_mgun = 173;
    const wpn_svd = 174;
    const wpn_svd_s = 148;
    const wpn_svu = 175;
    const wpn_svu_s = 149;
    const wpn_turret = 176;
    const wpn_usp45 = 177;
    const wpn_usp45_s = 150;
    const wpn_val = 178;
    const wpn_val_s = 151;
    const wpn_vintorez = 179;
    const wpn_vintorez_s = 152;
    const wpn_walther = 180;
    const wpn_walther_s = 153;
    const wpn_wmagaz = 181;
    const wpn_wmaggl = 182;
    const wpn_zoom_s = 154;
    const wpn_zoomable = 183;
    const zombie = 39;
    const zombie_s = 122;
    const zone = 210;
    const zone_acid_fog = 193;
    const zone_bfuzz = 195;
    const zone_bfuzz_s = 184;
    const zone_buzz_s = 185;
    const zone_campfire = 196;
    const zone_dead = 197;
    const zone_elec_s = 186;
    const zone_flame_s = 198;
    const zone_galant_s = 187;
    const zone_galantine = 199;
    const zone_mbald_s = 188;
    const zone_mincer = 201;
    const zone_mincer_s = 189;
    const zone_mine_field = 203;
    const zone_mine_s = 202;
    const zone_mosquito_bald = 200;
    const zone_nogravity_s = 190;
    const zone_radioactive = 205;
    const zone_rusty_fog = 206;
    const zone_rusty_hair = 207;
    const zone_rustyhair_s = 191;
    const zone_zhar_s = 192;
    
};

C++ class memory_info : visible_memory_object {
    property hit_info;
    property last_level_time;
    property level_time;
    property object_info;
    property self_info;
    property sound_info;
    property visual_info;
    
    function object(const game_memory_object&);
};

C++ class MonsterSpace {
    const head_anim_angry = 1;
    const head_anim_glad = 2;
    const head_anim_kind = 3;
    const head_anim_normal = 0;
    const sound_script = 128;
    
};

C++ class not_yet_visible_object {
    property value;
    
    function object(const not_yet_visible_object&);
};

C++ class CSightParams {
    const eSightTypeAnimationDirection = 11;
    const eSightTypeCover = 5;
    const eSightTypeCoverLookOver = 8;
    const eSightTypeCurrentDirection = 0;
    const eSightTypeDirection = 2;
    const eSightTypeDummy = -1;
    const eSightTypeFireObject = 9;
    const eSightTypeFirePosition = 10;
    const eSightTypeLookOver = 7;
    const eSightTypeObject = 4;
    const eSightTypePathDirection = 1;
    const eSightTypePosition = 3;
    const eSightTypeSearch = 6;
    
    property m_object;
    property m_sight_type;
    property m_vector;
    
    CSightParams ();
    
};

C++ class sound_memory_object : game_memory_object {
    property last_level_time;
    property level_time;
    property object_info;
    property power;
    property self_info;
    
    function object(const game_memory_object&);
    function type() const;
};

C++ class visible_memory_object : game_memory_object {
    property last_level_time;
    property level_time;
    property object_info;
    property self_info;
    
    function object(const game_memory_object&);
};

C++ class FS_item {
    function Modif();
    function NameFull();
    function NameShort();
    function ModifDigitOnly();
    function Size();
};

C++ class Patch_Dawnload_Progress {
    function GetProgress();
    function GetInProgress();
    function GetStatus();
    function GetFlieName();
};

C++ class RPoint {
    property A;
    property P;
    
    RPoint ();
    
};

C++ class color {
    property b;
    property g;
    property r;
    
    color ();
    color (number, number, number);
    
    function set(number, number, number);
};

C++ class SDrawStaticStruct {
    property m_endTime;
    
    function wnd();
};

C++ class duality {
    property h;
    property v;
    
    duality ();
    duality (number, number);
    
    function set(number, number);
};

C++ class memory_object {
    property last_level_time;
    property level_time;
    
};

C++ class noise {
    property fps;
    property grain;
    property intensity;
    
    noise ();
    noise (number, number, number);
    
    function set(number, number, number);
};

C++ class object_params {
    property level_vertex;
    property position;
    
};

C++ class effector_params {
    property blur;
    property color_add;
    property color_base;
    property color_gray;
    property dual;
    property gray;
    property noise;
    
    effector_params ();
    
    function assign(effector_params*, effector_params*);
};

C++ class rotation {
    property pitch;
    property yaw;
    
};

C++ class SZoneMapEntityData {
    property color;
    property pos;
    
    SZoneMapEntityData ();
    
};

C++ class TEX_INFO {
    function get_rect();
    function get_file_name();
};

C++ class fs_file {
    property modif;
    property name;
    property ptr;
    property size_compressed;
    property size_real;
    property vfs;
    
};

C++ class game_PlayerState {
    property GameID;
    property LastBuyAcount;
    property RespawnTime;
    property deaths;
    property flags;
    property kills;
    property lasthitter;
    property lasthitweapon;
    property money_delta;
    property money_for_round;
    property pItemList;
    property ping;
    property skin;
    property team;
    
    game_PlayerState ();
    
    function clear();
    function setName(string);
    function testFlag(number) const;
    function net_Import(net_packet&);
    function resetFlag(number);
    function net_Export(net_packet&, number);
    function getName();
    function setFlag(number);
};

C++ class DIK_keys {
    const DIK_0 = 11;
    const DIK_1 = 2;
    const DIK_2 = 3;
    const DIK_3 = 4;
    const DIK_4 = 5;
    const DIK_5 = 6;
    const DIK_6 = 7;
    const DIK_7 = 8;
    const DIK_8 = 9;
    const DIK_9 = 10;
    const DIK_A = 30;
    const DIK_ADD = 78;
    const DIK_APOSTROPHE = 40;
    const DIK_APPS = 221;
    const DIK_AT = 145;
    const DIK_AX = 150;
    const DIK_B = 48;
    const DIK_BACK = 14;
    const DIK_BACKSLASH = 43;
    const DIK_C = 46;
    const DIK_CAPITAL = 58;
    const DIK_CIRCUMFLEX = 144;
    const DIK_COLON = 146;
    const DIK_COMMA = 51;
    const DIK_CONVERT = 121;
    const DIK_D = 32;
    const DIK_DECIMAL = 83;
    const DIK_DELETE = 211;
    const DIK_DIVIDE = 181;
    const DIK_DOWN = 208;
    const DIK_E = 18;
    const DIK_END = 207;
    const DIK_EQUALS = 13;
    const DIK_ESCAPE = 1;
    const DIK_F = 33;
    const DIK_F1 = 59;
    const DIK_F10 = 68;
    const DIK_F11 = 87;
    const DIK_F12 = 88;
    const DIK_F13 = 100;
    const DIK_F14 = 101;
    const DIK_F15 = 102;
    const DIK_F2 = 60;
    const DIK_F3 = 61;
    const DIK_F4 = 62;
    const DIK_F5 = 63;
    const DIK_F6 = 64;
    const DIK_F7 = 65;
    const DIK_F8 = 66;
    const DIK_F9 = 67;
    const DIK_G = 34;
    const DIK_GRAVE = 41;
    const DIK_H = 35;
    const DIK_HOME = 199;
    const DIK_I = 23;
    const DIK_INSERT = 210;
    const DIK_J = 36;
    const DIK_K = 37;
    const DIK_KANA = 112;
    const DIK_KANJI = 148;
    const DIK_L = 38;
    const DIK_LBRACKET = 26;
    const DIK_LCONTROL = 29;
    const DIK_LEFT = 203;
    const DIK_LMENU = 56;
    const DIK_LSHIFT = 42;
    const DIK_LWIN = 219;
    const DIK_M = 50;
    const DIK_MINUS = 12;
    const DIK_MULTIPLY = 55;
    const DIK_N = 49;
    const DIK_NEXT = 209;
    const DIK_NOCONVERT = 123;
    const DIK_NUMLOCK = 69;
    const DIK_NUMPAD0 = 82;
    const DIK_NUMPAD1 = 79;
    const DIK_NUMPAD2 = 80;
    const DIK_NUMPAD3 = 81;
    const DIK_NUMPAD4 = 75;
    const DIK_NUMPAD5 = 76;
    const DIK_NUMPAD6 = 77;
    const DIK_NUMPAD7 = 71;
    const DIK_NUMPAD8 = 72;
    const DIK_NUMPAD9 = 73;
    const DIK_NUMPADCOMMA = 179;
    const DIK_NUMPADENTER = 156;
    const DIK_NUMPADEQUALS = 141;
    const DIK_O = 24;
    const DIK_P = 25;
    const DIK_PAUSE = 197;
    const DIK_PERIOD = 52;
    const DIK_PRIOR = 201;
    const DIK_Q = 16;
    const DIK_R = 19;
    const DIK_RBRACKET = 27;
    const DIK_RCONTROL = 157;
    const DIK_RETURN = 28;
    const DIK_RIGHT = 205;
    const DIK_RMENU = 184;
    const DIK_RSHIFT = 54;
    const DIK_RWIN = 220;
    const DIK_S = 31;
    const DIK_SCROLL = 70;
    const DIK_SEMICOLON = 39;
    const DIK_SLASH = 53;
    const DIK_SPACE = 57;
    const DIK_STOP = 149;
    const DIK_SUBTRACT = 74;
    const DIK_SYSRQ = 183;
    const DIK_T = 20;
    const DIK_TAB = 15;
    const DIK_U = 22;
    const DIK_UNDERLINE = 147;
    const DIK_UNLABELED = 151;
    const DIK_UP = 200;
    const DIK_V = 47;
    const DIK_W = 17;
    const DIK_X = 45;
    const DIK_Y = 21;
    const DIK_YEN = 125;
    const DIK_Z = 44;
    const MOUSE_1 = 337;
    const MOUSE_2 = 338;
    const MOUSE_3 = 339;
    
};

C++ class color_animator {
    color_animator (string);
    
    function calculate(number);
    function load(string);
    function length();
};

C++ class profile_timer {
    profile_timer ();
    profile_timer (profile_timer&);
    
    operator +(const profile_timer&, profile_timer);
    function stop();
    function start();
    function time() const;
    operator <(const profile_timer&, profile_timer);
};

C++ class token {
    property id;
    property name;
    
    token ();
    
};

C++ class action_base {
    property object;
    property storage;
    
    action_base ();
    action_base (game_object*);
    action_base (game_object*, string);
    
    function finalize();
    function add_precondition(const world_property&);
    function execute();
    function remove_precondition(const number&);
    function setup(game_object*, property_storage*);
    function set_weight(const number&);
    function add_effect(const world_property&);
    function show(string);
    function weight(const world_state&, const world_state&) const;
    function initialize();
    function remove_effect(const number&);
};

C++ class action_planner {
    property object;
    property storage;
    
    action_planner ();
    
    function initialized() const;
    function remove_action(const number&);
    function action(const number&);
    function add_action(const number&, action_base*);
    function show(string);
    function update();
    function clear();
    function evaluator(const number&);
    function setup(game_object*);
    function set_goal_world_state(action_planner*, world_state*);
    function current_action();
    function add_evaluator(const number&, property_evaluator*);
    function remove_evaluator(const number&);
    function current_action_id() const;
    function actual(const action_planner*);
};

C++ class planner_action : action_planner,action_base {
    property object;
    property storage;
    
    planner_action ();
    planner_action (game_object*);
    planner_action (game_object*, string);
    
    function finalize();
    function action(const number&);
    function add_precondition(const world_property&);
    function add_action(const number&, action_base*);
    function update();
    function weight(const world_state&, const world_state&) const;
    function current_action();
    function current_action_id() const;
    function initialized() const;
    function remove_effect(const number&);
    function initialize();
    function actual(const action_planner*);
    function remove_action(const number&);
    function remove_precondition(const number&);
    function execute();
    function clear();
    function evaluator(const number&);
    function set_goal_world_state(action_planner*, world_state*);
    function set_weight(const number&);
    function add_effect(const world_property&);
    function show(string);
    function setup(game_object*);
    function setup(game_object*, property_storage*);
    function remove_evaluator(const number&);
    function add_evaluator(const number&, property_evaluator*);
};

C++ class world_state {
    world_state ();
    world_state (world_state);
    
    function clear();
    function includes(const world_state&) const;
    operator ==(const world_state&, world_state);
    function remove_property(const number&);
    function add_property(const world_property&);
    operator <(const world_state&, world_state);
    function property(const number&) const;
};

C++ class world_property {
    world_property (number, boolean);
    
    function value() const;
    operator <(const world_property&, world_property);
    function condition() const;
    operator ==(const world_property&, world_property);
};

C++ class property_evaluator {
    property object;
    property storage;
    
    property_evaluator ();
    property_evaluator (game_object*);
    property_evaluator (game_object*, string);
    
    function evaluate();
    function setup(game_object*, property_storage*);
};

C++ class property_evaluator_const : property_evaluator {
    property object;
    property storage;
    
    property_evaluator_const (boolean);
    
    function evaluate();
    function setup(game_object*, property_storage*);
};

C++ class ipure_alife_load_object {
};

C++ class ipure_alife_save_object {
};

C++ class ipure_alife_load_save_object : ipure_alife_load_object,ipure_alife_save_object {
};

C++ class Fbox {
    property max;
    property min;
    
    Fbox ();
    
};

C++ class ZoneMapEntities {
    function push_back(const SZoneMapEntityData&);
};

C++ class CAI_Bloodsucker : CGameObject {
    CAI_Bloodsucker ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CAI_Boar : CGameObject {
    CAI_Boar ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CAI_Dog : CGameObject {
    CAI_Dog ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CAI_Flesh : CGameObject {
    CAI_Flesh ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CAI_PseudoDog : CGameObject {
    CAI_PseudoDog ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CAI_Stalker : CGameObject {
    CAI_Stalker ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CAI_Trader : CGameObject {
    CAI_Trader ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CALifeHumanBrain : CALifeMonsterBrain {
    function can_choose_alife_tasks(boolean);
    function update(boolean);
    function movement(const CALifeMonsterBrain*);
};

C++ class CALifeMonsterBrain {
    function can_choose_alife_tasks(boolean);
    function update(boolean);
    function movement(const CALifeMonsterBrain*);
};

C++ class CALifeMonsterDetailPathManager {
    function completed() const;
    function target(const number&, const number&, const vector&);
    function target(const number&);
    function target(const CALifeSmartTerrainTask*);
    function failed() const;
    function speed	(const number&);
    function speed	() const;
    function actual() const;
};

C++ class CALifeMonsterMovementManager {
    function completed() const;
    function patrol(const CALifeMonsterMovementManager*);
    function actual() const;
    function path_type(const enum MovementManager::EPathType&);
    function path_type() const;
    function detail(const CALifeMonsterMovementManager*);
};

C++ class CALifeMonsterPatrolPathManager {
    function path(string);
    function target_game_vertex_id() const;
    function target_position(CALifeMonsterPatrolPathManager*);
    function target_level_vertex_id() const;
    function completed() const;
    function route_type(const enum PatrolPathManager::EPatrolRouteType&);
    function route_type() const;
    function use_randomness(const boolean&);
    function use_randomness() const;
    function start_type(const enum PatrolPathManager::EPatrolStartType&);
    function start_type() const;
    function start_vertex_index(const number&);
    function actual() const;
};

C++ class alife_simulator {
    function level_name(const alife_simulator*, number);
    function store(alife_simulator*);
    function switch_distance() const;
    function switch_distance(number);
    function dont_has_info(const alife_simulator*, const number&, string);
    function release(alife_simulator*, cse_abstract*, boolean);
    function switch_online(alife_simulator*, number);
    function create_ammo(alife_simulator*, string, const vector&, number, number, number, number);
    function switch_offline(alife_simulator*, number);
    function add_out_restriction(alife_simulator*, cse_alife_monster_abstract*, number);
    function teleport_entity(alife_simulator*, cse_abstract*, vector&, number, number);
    function set_interactive(number, boolean);
    function add_in_restriction(alife_simulator*, cse_alife_monster_abstract*, number);
    function remove_in_restriction(alife_simulator*, cse_alife_monster_abstract*, number);
    function change_actor_level(alife_simulator*, vector, number, number, vector);
    function create_anomaly(alife_simulator*, string, const vector&, number, number, number, number);
    function create_anomaly(alife_simulator*, string, const vector&, number, number, number, number, number);
    function level_id(alife_simulator*);
    function valid_object_id(const alife_simulator*, number);
    function remove_out_restriction(alife_simulator*, cse_alife_monster_abstract*, number);
    function create_restrictor(alife_simulator*, string, const vector&, number, number, number, number);
    function kill_entity(cse_alife_monster_abstract*, const number&, cse_alife_schedulable*);
    function kill_entity(alife_simulator*, cse_alife_monster_abstract*, const number&);
    function kill_entity(alife_simulator*, cse_alife_monster_abstract*);
    function set_switch_online(number, boolean);
    function set_switch_offline(number, boolean);
    function has_info(const alife_simulator*, const number&, string);
    function remove_all_restrictions(number, const enum RestrictionSpace::ERestrictorTypes&);
    function object(const alife_simulator*, number);
    function object(const alife_simulator*, string);
    function object(const alife_simulator*, number, boolean);
    function actor(const alife_simulator*);
    function story_object(const alife_simulator*, number);
    function spawn_id(alife_simulator*, number);
    function force_entity_update(const alife_simulator*, number);
    function create(alife_simulator*, number);
    function create(alife_simulator*, string, const vector&, number, number, number);
    function create(alife_simulator*, string, const vector&, number, number);
    function create(alife_simulator*, string, number, const vector&, number, number);
    function create(alife_simulator*, string, const vector&, const vector&, number, number, number);
};

C++ class CALifeSmartTerrainTask {
    CALifeSmartTerrainTask (string);
    CALifeSmartTerrainTask (string, number);
    CALifeSmartTerrainTask (number, number);
    
    function level_vertex_id() const;
    function position() const;
    function game_vertex_id() const;
};

C++ class CBastArtefact : CGameObject {
    CBastArtefact ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CBlackDrops : CGameObject {
    CBlackDrops ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CBlackGraviArtefact : CGameObject {
    CBlackGraviArtefact ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CBlend {
};

C++ class CBurer : CGameObject {
    CBurer ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CCar : CGameObject,holder {
    const eWpnActivate = 3;
    const eWpnAutoFire = 5;
    const eWpnDesiredDir = 1;
    const eWpnDesiredPos = 2;
    const eWpnFire = 4;
    const eWpnToDefaultDir = 6;
    
    CCar ();
    
    function _construct();
    function GetfHealth() const;
    function CurrentVel();
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function ShowTrunk();
    function SetParam(number, vector);
    function net_Export(net_packet&);
    function CloseTrunkBone();
    function Visual() const;
    function IsObjectVisible(game_object*);
    function SetExplodeTime(number);
    function net_Import(net_packet&);
    function HasWeapon();
    function OpenTrunkBone();
    function RemoveDamageParticles();
    function SetfHealth(number);
    function engaged();
    function ExplodeTime();
    function FireDirDiff();
    function CarExplode();
    function CanHit();
    function getEnabled() const;
    function Action(number, number);
    function use(CGameObject*);
};

C++ class CCat : CGameObject {
    CCat ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CChimera : CGameObject {
    CChimera ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class client_spawn_manager {
    function remove(number, number);
    function add(number, number, const function<void>&, object);
    function add(number, number, const function<void>&);
};

C++ class CConsole {
    function execute_script(string);
    function get_string(string);
    function execute(string);
    function get_bool(CConsole*, string);
    function get_float(CConsole*, string);
    function get_integer(CConsole*, string);
    function is_active(CConsole*);
    function get_token(string);
    function show();
    function hide();
};

C++ class CController : CGameObject {
    CController ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class cover_point {
    function level_vertex_id() const;
    function position() const;
};

C++ class danger_object {
    const attack_sound = 1;
    const attacked = 5;
    const bullet_ricochet = 0;
    const enemy_sound = 7;
    const entity_attacked = 2;
    const entity_corpse = 4;
    const entity_death = 3;
    const grenade = 6;
    const hit = 2;
    const sound = 1;
    const visual = 0;
    
    function type() const;
    function time() const;
    operator ==(const danger_object&, danger_object);
    function position(const danger_object*);
    function object(const danger_object*);
    function perceive_type() const;
    function dependent_object(const danger_object*);
};

C++ class CDialogHolder {
    function start_stop_menu(CUIDialogWnd*, boolean);
    function RemoveDialogToRender(CUIWindow*);
    function AddDialogToRender(CUIWindow*);
    function MainInputReceiver();
};

C++ class CDummyArtefact : CGameObject {
    CDummyArtefact ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class DynamicPatrolPath {
    DynamicPatrolPath (string);
    
    function add_link(DynamicPatrolPoint*, DynamicPatrolPoint*);
    function add_point(DynamicPatrolPoint*);
};

C++ class DynamicPatrolPoint {
    DynamicPatrolPoint (class CPatrolPath*, DynamicPatrolPoint*);
    DynamicPatrolPoint ();
    
    function set_position(vector);
    function set_game_vertex_id(number);
    function set_level_vertex_id(number);
    function set_name(string);
    function set_flags(number);
};

C++ class cef_storage {
    function evaluate(cef_storage*, string, game_object*);
    function evaluate(cef_storage*, string, game_object*, game_object*);
    function evaluate(cef_storage*, string, game_object*, game_object*, game_object*);
    function evaluate(cef_storage*, string, game_object*, game_object*, game_object*, game_object*);
    function evaluate(cef_storage*, string, cse_alife_object*);
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*);
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*, cse_alife_object*);
    function evaluate(cef_storage*, string, cse_alife_object*, cse_alife_object*, cse_alife_object*, cse_alife_object*);
};

C++ class CElectricBall : CGameObject {
    CElectricBall ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class explosive {
    function explode();
};

C++ class CF1 : CGameObject {
    CF1 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CFadedBall : CGameObject {
    CFadedBall ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CFireball : CGameObject {
    CFireball ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CFracture : CGameObject {
    CFracture ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CGalantineArtefact : CGameObject {
    CGalantineArtefact ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CGameFont {
    const alCenter = 2;
    const alLeft = 0;
    const alRight = 1;
    
};

C++ class CGameGraph {
    function vertex_id(const GameGraph__CVertex*) const;
    function accessible(const CGameGraph*, const number&);
    function accessible(const CGameGraph*, const number&, boolean);
    function vertex(const number&) const;
    function valid_vertex_id(const number&) const;
};

C++ class CGameObject : DLL_Pure,ISheduled,ICollidable,IRenderable {
    CGameObject ();
    
    function Visual() const;
    function getEnabled() const;
    function _construct();
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Export(net_packet&);
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CGameTask {
    CGameTask ();
    
    function get_id();
    function set_priority(number);
    function add_objective(SGameTaskObjective*);
    function set_title(string);
    function get_objectives_cnt();
    function get_title();
    function set_id(string);
    function get_objective(number);
    function load(string);
    function get_priority();
};

C++ class CGhostBoss : CGameObject {
    CGhostBoss ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CGraviArtefact : CGameObject {
    CGraviArtefact ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CHairsZone : CGameObject {
    CHairsZone ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class hanging_lamp : CGameObject {
    hanging_lamp ();
    
    function Visual() const;
    function getEnabled() const;
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function turn_on();
    function turn_off();
    function net_Export(net_packet&);
    function _construct();
    function use(CGameObject*);
};

C++ class CHelicopter : CGameObject {
    const eAlive = 0;
    const eBodyByPath = 0;
    const eBodyToPoint = 1;
    const eDead = 1;
    const eEnemyEntity = 2;
    const eEnemyNone = 0;
    const eEnemyPoint = 1;
    const eMovLanding = 4;
    const eMovNone = 0;
    const eMovPatrolPath = 2;
    const eMovRoundPath = 3;
    const eMovTakeOff = 5;
    const eMovToPoint = 1;
    
    property m_dead;
    property m_exploded;
    property m_flame_started;
    property m_light_started;
    property m_max_mgun_dist;
    property m_max_rocket_dist;
    property m_min_mgun_dist;
    property m_min_rocket_dist;
    property m_syncronize_rocket;
    property m_time_between_rocket_attack;
    property m_use_mgun_on_attack;
    property m_use_rocket_on_attack;
    
    CHelicopter ();
    
    function _construct();
    function SetSpeedInDestPoint(number);
    function getVisible() const;
    function LookAtPoint(vector, boolean);
    function GetRealAltitude();
    function GetCurrVelocity();
    function SetLinearAcc(number, number);
    function GoPatrolByPatrolPath(string, number);
    function GetSpeedInDestPoint(number);
    function isVisible(game_object*);
    function net_Import(net_packet&);
    function SetMaxVelocity(number);
    function SetfHealth(number);
    function GetMovementState();
    function SetEnemy(game_object*);
    function SetEnemy(vector*);
    function getEnabled() const;
    function GetfHealth() const;
    function Explode();
    function SetOnPointRangeDist(number);
    function SetFireTrailLength(number);
    function GetOnPointRangeDist();
    function GetMaxVelocity();
    function TurnLighting(boolean);
    function SetBarrelDirTolerance(number);
    function GetBodyState();
    function GetCurrVelocityVec();
    function net_Export(net_packet&);
    function SetDestPosition(vector*);
    function UseFireTrail();
    function UseFireTrail(boolean);
    function GoPatrolByRoundPath(vector, number, boolean);
    function net_Spawn(cse_abstract*);
    function GetState();
    function Die();
    function StartFlame();
    function Visual() const;
    function GetDistanceToDestPosition();
    function GetHuntState();
    function TurnEngineSound(boolean);
    function GetSafeAltitude();
    function ClearEnemy();
    function use(CGameObject*);
};

C++ class holder {
    function engaged();
    function Action(number, number);
    function SetParam(number, vector);
};

C++ class CInventoryItemObject : CGameObject {
    CInventoryItemObject ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CKarlik : CGameObject {
    CKarlik ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class FS {
    const FS_ClampExt = 4;
    const FS_ListFiles = 1;
    const FS_ListFolders = 2;
    const FS_RootOnly = 8;
    const FS_sort_by_modif_down = 5;
    const FS_sort_by_modif_up = 4;
    const FS_sort_by_name_down = 1;
    const FS_sort_by_name_up = 0;
    const FS_sort_by_size_down = 3;
    const FS_sort_by_size_up = 2;
    
    function get_file_age(string);
    function file_length(string);
    function file_rename(string, string, boolean);
    function r_open(string, string);
    function r_open(string);
    function append_path(string, string, string, number);
    function file_copy(string, string);
    function get_file_age_str(FS*, string);
    function dir_delete(FS*, string, number);
    function dir_delete(FS*, string, string, number);
    function update_path(FS*, string, string);
    function r_close(reader*&);
    function exist(string);
    function exist(string, string);
    function w_close(class IWriter*&);
    function file_list_open(FS*, string, number);
    function file_list_open(FS*, string, string, number);
    function path_exist(string);
    function file_list_open_ex(FS*, string, number, string);
    function get_path(string);
    function file_delete(string, string);
    function file_delete(string);
    function w_open(string, string);
    function w_open(string);
};

C++ class CMainMenu {
    function GetGSVer();
    function CancelDownload();
    function IsActive();
    function GetPatchProgress();
    function ValidateCDKey();
};

C++ class CMercuryBall : CGameObject {
    CMercuryBall ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CMincer : CGameObject {
    CMincer ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CMosquitoBald : CGameObject {
    CMosquitoBald ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CMountedTurret : CGameObject,holder {
    const eActivate = 1;
    const eDeactivate = 2;
    const eDesiredDir = 3;
    const eDesiredEnemyDir = 4;
    const eDesiredEnemyPos = 5;
    const eFireStart = 6;
    const eFireStop = 7;
    
    CMountedTurret ();
    
    function Visual() const;
    function getEnabled() const;
    function net_Import(net_packet&);
    function GetFirePoint() const;
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function GetFireDir() const;
    function engaged();
    function SetNpcOwner(game_object*);
    function SetEnemy(game_object*);
    function SetParam(number, vector);
    function SetParam(number, struct _vector2<number>);
    function Action(number, number);
    function net_Export(net_packet&);
    function _construct();
    function use(CGameObject*);
};

C++ class CNoGravityZone : CGameObject {
    CNoGravityZone ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class object_factory {
    function register(string, string, string, string);
    function register(string, string, string);
};

C++ class particle_params {
    particle_params ();
    particle_params (const vector&);
    particle_params (const vector&, const vector&);
    particle_params (const vector&, const vector&, const vector&);
    
};

C++ class patrol {
    const continue = 1;
    const custom = 3;
    const dummy = -1;
    const nearest = 2;
    const next = 4;
    const start = 0;
    const stop = 0;
    
    patrol (string);
    patrol (string, enum PatrolPathManager::EPatrolStartType);
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType);
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean);
    patrol (string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean, number);
    
    function level_vertex_id(number) const;
    function point(const patrol*, number);
    function flag(number, number) const;
    function game_vertex_id(number) const;
    function flags(number) const;
    function name(number) const;
    function index(string) const;
    function terminal(number) const;
    function count() const;
    function get_nearest(const vector&) const;
};

C++ class CPhrase {
    function GetPhraseScript();
};

C++ class CPhraseDialog {
    function AddPhrase(string, string, string, number);
};

C++ class CPhraseScript {
    function AddHasInfo(string);
    function AddGiveInfo(string);
    function AddDisableInfo(string);
    function AddDontHasInfo(string);
    function AddAction(string);
    function AddPrecondition(string);
};

C++ class CPhysicObject : CGameObject {
    CPhysicObject ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class physics_element {
    function get_density();
    function apply_impulse(const vector&, number);
    function get_mass();
    function is_fixed();
    function is_breakable();
    function get_volume();
    function get_linear_vel(vector&);
    function fix();
    function get_angular_vel(vector&);
    function apply_force(number, number, number);
    function release_fixed();
    function global_transform(physics_element*);
};

C++ class physics_joint {
    function set_limits(number, number, number);
    function get_axis_angle(number);
    function get_anchor(vector&);
    function get_axis_dir(number, vector&);
    function get_bone_id();
    function is_breakable();
    function set_max_force_and_velocity(number, number, number);
    function set_axis_dir_global(number, number, number, number);
    function get_first_element();
    function set_axis_dir_vs_second_element(number, number, number, number);
    function get_axes_number();
    function set_joint_spring_dumping_factors(number, number);
    function set_axis_spring_dumping_factors(number, number, number);
    function set_anchor_vs_first_element(number, number, number);
    function get_stcond_element();
    function set_anchor_global(number, number, number);
    function get_limits(number&, number&, number);
    function set_anchor_vs_second_element(number, number, number);
    function set_axis_dir_vs_first_element(number, number, number, number);
    function get_max_force_and_velocity(number&, number&, number);
};

C++ class physics_shell {
    function get_joints_number();
    function get_elements_number();
    function is_breakable();
    function get_joint_by_bone_name(string);
    function get_element_by_bone_name(string);
    function apply_force(number, number, number);
    function get_joint_by_order(number);
    function get_mass();
    function get_element_by_bone_id(number);
    function apply_gravity(boolean);
    function unblock_breaking();
    function block_breaking();
    function get_element_by_order(number);
    function get_angular_vel(vector&);
    function is_breaking_blocked();
    function get_linear_vel(vector&);
    function get_joint_by_bone_id(number);
};

C++ class CPoltergeist : CGameObject {
    CPoltergeist ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class property_storage {
    property_storage ();
    
    function property(const number&) const;
    function set_property(const number&, const boolean&);
};

C++ class CPseudoGigant : CGameObject {
    CPseudoGigant ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CPsyDog : CGameObject {
    CPsyDog ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CPsyDogPhantom : CGameObject {
    CPsyDogPhantom ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class cpure_server_object : ipure_server_object {
};

C++ class CRGD5 : CGameObject {
    CRGD5 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class render_device {
    property aspect_ratio;
    property cam_dir;
    property cam_pos;
    property cam_right;
    property cam_top;
    property f_time_delta;
    property fov;
    property frame;
    property height;
    property precache_frame;
    property time_delta;
    property width;
    
    function is_r2_active();
    function time_global(const render_device*);
    function is_paused(render_device*);
    function pause(render_device*, boolean);
};

C++ class CRustyHairArtefact : CGameObject {
    CRustyHairArtefact ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class cse_anomalous_zone : cse_custom_zone {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_anomalous_zone (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function interactive() const;
    function add_shape_size(number);
    function clsid() const;
    function on_spawn();
    function on_register();
    function UPDATE_Read(net_packet&);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function keep_saved_data_anyway() const;
    function init();
    function used_ai_locations() const;
    function spawn_artefacts();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_car : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_car (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_creature_abstract : cse_alife_dynamic_object_visual {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_creature_abstract (string);
    
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_squad();
    function clsid() const;
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function alive() const;
    function set_visual(string);
    function on_before_register();
    function get_visual() const;
    function g_group();
    function can_save() const;
    function health() const;
    function g_team();
    function on_spawn();
    function set_custom_data(string);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function used_ai_locations() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function section_name(const cse_abstract*);
};

C++ class cse_alife_creature_actor : cse_alife_creature_abstract,cse_alife_trader_abstract,cse_ph_skeleton {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_creature_actor (string);
    
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_team();
    function clsid() const;
    function get_visual() const;
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function profile_name(cse_alife_trader_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function used_ai_locations() const;
    function community() const;
    function visible_for_map() const;
    function visible_for_map(boolean);
    function alive() const;
    function STATE_Write(net_packet&);
    function character_name();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function section_name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function on_unregister();
    function on_before_register();
    function on_register();
    function reputation();
    function g_squad();
    function interactive() const;
    function set_visual(string);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function STATE_Read(net_packet&, number);
    function health() const;
    function set_custom_data(string);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function rank();
};

C++ class cse_alife_creature_crow : cse_alife_creature_abstract {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_creature_crow (string);
    
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_team();
    function clsid() const;
    function get_visual() const;
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function used_ai_locations() const;
    function visible_for_map() const;
    function visible_for_map(boolean);
    function alive() const;
    function section_name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function on_unregister();
    function on_before_register();
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function g_squad();
    function interactive() const;
    function set_visual(string);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function STATE_Read(net_packet&, number);
    function health() const;
    function set_custom_data(string);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function STATE_Write(net_packet&);
};

C++ class cse_alife_creature_phantom : cse_alife_creature_abstract {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_creature_phantom (string);
    
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_team();
    function clsid() const;
    function get_visual() const;
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function used_ai_locations() const;
    function visible_for_map() const;
    function visible_for_map(boolean);
    function alive() const;
    function section_name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function on_unregister();
    function on_before_register();
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function g_squad();
    function interactive() const;
    function set_visual(string);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function STATE_Read(net_packet&, number);
    function health() const;
    function set_custom_data(string);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function STATE_Write(net_packet&);
};

C++ class cse_custom_zone : cse_alife_dynamic_object,cse_shape {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_custom_zone (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function clsid() const;
    function move_offline() const;
    function move_offline(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function init();
    function set_custom_data(string);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function used_ai_locations() const;
    function keep_saved_data_anyway() const;
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function on_spawn();
};

C++ class cse_alife_dynamic_object : cse_alife_object {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_dynamic_object (string);
    
    function used_ai_locations() const;
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function clsid() const;
    function keep_saved_data_anyway() const;
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_register();
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_before_register();
    function init();
    function on_spawn();
    function interactive() const;
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function set_custom_data(string);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function move_offline() const;
    function move_offline(boolean);
};

C++ class cse_alife_dynamic_object_visual : cse_alife_dynamic_object,cse_visual {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_dynamic_object_visual (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function get_startup_animation();
    function clsid() const;
    function move_offline() const;
    function move_offline(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function init();
    function set_custom_data(string);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function used_ai_locations() const;
    function keep_saved_data_anyway() const;
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function on_spawn();
};

C++ class cse_alife_graph_point : cse_abstract {
    property direction;
    property id;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_graph_point (string);
    
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function UPDATE_Read(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function set_custom_data(string);
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function UPDATE_Write(net_packet&);
};

C++ class cse_alife_group_abstract {
};

C++ class cse_alife_helicopter : cse_alife_dynamic_object_visual,cse_motion,cse_ph_skeleton {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_helicopter (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function get_engine_sound();
    function set_engine_sound(string);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_human_abstract : cse_alife_trader_abstract,cse_alife_monster_abstract {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_smart_terrain_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_human_abstract (string);
    
    function set_startup_animation(string);
    function can_save() const;
    function brain(cse_alife_monster_abstract*);
    function brain(cse_alife_human_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function clsid() const;
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function profile_name(cse_alife_trader_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function community() const;
    function g_group();
    function set_rank(number);
    function get_visual() const;
    function on_spawn();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function set_custom_data(string);
    function alive() const;
    function health() const;
    function g_team();
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_visual(string);
    function move_offline() const;
    function move_offline(boolean);
    function g_squad();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function on_register();
    function reputation();
    function used_ai_locations() const;
    function on_before_register();
    function on_unregister();
    function update();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function section_name(const cse_abstract*);
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function UPDATE_Write(net_packet&);
    function character_name();
    function rank();
};

C++ class cse_alife_human_stalker : cse_alife_human_abstract,cse_ph_skeleton {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_smart_terrain_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_human_stalker (string);
    
    function set_startup_animation(string);
    function set_visual(string);
    function brain(cse_alife_monster_abstract*);
    function brain(cse_alife_human_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_team();
    function clsid() const;
    function get_visual() const;
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function profile_name(cse_alife_trader_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function community() const;
    function set_custom_data(string);
    function set_rank(number);
    function character_name();
    function STATE_Write(net_packet&);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function alive() const;
    function section_name(const cse_abstract*);
    function interactive() const;
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function update();
    function on_unregister();
    function on_before_register();
    function used_ai_locations() const;
    function on_register();
    function reputation();
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function g_squad();
    function can_save() const;
    function STATE_Read(net_packet&, number);
    function health() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function rank();
};

C++ class cse_alife_inventory_box : cse_alife_dynamic_object_visual {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_inventory_box (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_inventory_item {
};

C++ class cse_alife_item : cse_alife_dynamic_object_visual,cse_alife_inventory_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function bfUseful();
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_item_ammo : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_ammo (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_artefact : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_artefact (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_bolt : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_bolt (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_custom_outfit : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_custom_outfit (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_detector : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_detector (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_document : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_document (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_explosive : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_explosive (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_grenade : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_grenade (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_pda : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_pda (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_torch : cse_alife_item {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_torch (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_weapon : cse_alife_item {
    const eAddonAttachable = 2;
    const eAddonDisabled = 0;
    const eAddonPermanent = 1;
    const eWeaponAddonGrenadeLauncher = 2;
    const eWeaponAddonScope = 1;
    const eWeaponAddonSilencer = 4;
    
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_weapon (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function get_ammo_magsize();
    function on_register();
    function get_ammo_in_magazine();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function set_ammo_in_magazine(number);
    function get_addon_flags();
    function UPDATE_Read(net_packet&);
    function used_ai_locations() const;
    function clsid() const;
    function can_save() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function get_startup_animation();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_item_weapon_magazined : cse_alife_item_weapon {
    const eAddonAttachable = 2;
    const eAddonDisabled = 0;
    const eAddonPermanent = 1;
    const eWeaponAddonGrenadeLauncher = 2;
    const eWeaponAddonScope = 1;
    const eWeaponAddonSilencer = 4;
    
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_weapon_magazined (string);
    
    function used_ai_locations() const;
    function set_startup_animation(string);
    function set_custom_data(string);
    function get_ammo_in_magazine();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function on_register();
    function on_spawn();
    function keep_saved_data_anyway() const;
    function interactive() const;
    function clsid() const;
    function STATE_Read(net_packet&, number);
    function get_startup_animation();
    function on_before_register();
    function get_addon_flags();
    function spawn_ini(cse_abstract*);
    function init();
    function STATE_Write(net_packet&);
    function bfUseful();
    function get_ammo_magsize();
    function section_name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_ammo_in_magazine(number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function can_save() const;
};

C++ class cse_alife_item_weapon_magazined_w_gl : cse_alife_item_weapon_magazined {
    const eAddonAttachable = 2;
    const eAddonDisabled = 0;
    const eAddonPermanent = 1;
    const eWeaponAddonGrenadeLauncher = 2;
    const eWeaponAddonScope = 1;
    const eWeaponAddonSilencer = 4;
    
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_weapon_magazined_w_gl (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function on_register();
    function UPDATE_Read(net_packet&);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function name(const cse_abstract*);
    function clsid() const;
    function set_ammo_in_magazine(number);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function section_name(const cse_abstract*);
    function get_addon_flags();
    function get_ammo_magsize();
    function init();
    function bfUseful();
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function used_ai_locations() const;
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function get_ammo_in_magazine();
    function set_custom_data(string);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function keep_saved_data_anyway() const;
};

C++ class cse_alife_item_weapon_shotgun : cse_alife_item_weapon {
    const eAddonAttachable = 2;
    const eAddonDisabled = 0;
    const eAddonPermanent = 1;
    const eWeaponAddonGrenadeLauncher = 2;
    const eWeaponAddonScope = 1;
    const eWeaponAddonSilencer = 4;
    
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_item_weapon_shotgun (string);
    
    function used_ai_locations() const;
    function set_startup_animation(string);
    function set_custom_data(string);
    function get_ammo_in_magazine();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function on_register();
    function on_spawn();
    function keep_saved_data_anyway() const;
    function interactive() const;
    function clsid() const;
    function STATE_Read(net_packet&, number);
    function get_startup_animation();
    function on_before_register();
    function get_addon_flags();
    function spawn_ini(cse_abstract*);
    function init();
    function STATE_Write(net_packet&);
    function bfUseful();
    function get_ammo_magsize();
    function section_name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_ammo_in_magazine(number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function can_save() const;
};

C++ class cse_alife_level_changer : cse_alife_space_restrictor {
    const DEFAULT_RESTRICTOR_TYPE_IN = 2;
    const DEFAULT_RESTRICTOR_TYPE_NONE = 0;
    const DEFAULT_RESTRICTOR_TYPE_OUT = 1;
    const RESTRICTOR_TYPE_IN = 4;
    const RESTRICTOR_TYPE_NONE = 3;
    const RESTRICTOR_TYPE_OUT = 5;
    
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_level_changer (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function set_space_restrictor_type(number);
    function clsid() const;
    function can_save() const;
    function set_custom_data(string);
    function get_space_restrictor_type() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function keep_saved_data_anyway() const;
    function init();
    function used_ai_locations() const;
    function interactive() const;
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_monster_abstract : cse_alife_creature_abstract,cse_alife_schedulable {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_smart_terrain_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_monster_abstract (string);
    
    function set_startup_animation(string);
    function can_save() const;
    function update();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function g_team();
    function clsid() const;
    function get_visual() const;
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function used_ai_locations() const;
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function alive() const;
    function STATE_Write(net_packet&);
    function brain(cse_alife_monster_abstract*);
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function section_name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function on_unregister();
    function on_before_register();
    function on_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function g_squad();
    function interactive() const;
    function set_visual(string);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function STATE_Read(net_packet&, number);
    function health() const;
    function set_custom_data(string);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function rank();
};

C++ class cse_alife_monster_base : cse_alife_monster_abstract,cse_ph_skeleton {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_smart_terrain_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_monster_base (string);
    
    function set_startup_animation(string);
    function on_register();
    function brain(cse_alife_monster_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function clsid() const;
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function section_name(const cse_abstract*);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function g_group();
    function alive() const;
    function move_offline() const;
    function move_offline(boolean);
    function on_spawn();
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function set_custom_data(string);
    function health() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function set_visual(string);
    function on_before_register();
    function can_save() const;
    function update();
    function g_team();
    function g_squad();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function get_visual() const;
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function rank();
};

C++ class cse_alife_monster_zombie : cse_alife_monster_abstract {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_smart_terrain_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_monster_zombie (string);
    
    function set_startup_animation(string);
    function on_register();
    function brain(cse_alife_monster_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function clsid() const;
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function section_name(const cse_abstract*);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function g_group();
    function alive() const;
    function move_offline() const;
    function move_offline(boolean);
    function on_spawn();
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function set_custom_data(string);
    function health() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function set_visual(string);
    function on_before_register();
    function can_save() const;
    function update();
    function g_team();
    function g_squad();
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function get_visual() const;
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function rank();
};

C++ class cse_alife_mounted_turret : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_mounted_turret (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_mounted_weapon : cse_alife_dynamic_object_visual {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_mounted_weapon (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_object : cse_abstract {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_object (string);
    
    function used_ai_locations() const;
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function init();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function set_custom_data(string);
    function UPDATE_Write(net_packet&);
    function STATE_Write(net_packet&);
    function interactive() const;
};

C++ class cse_alife_object_breakable : cse_alife_dynamic_object_visual {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_object_breakable (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_object_climable : cse_shape,cse_abstract {
    property direction;
    property id;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_object_climable (string);
    
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function UPDATE_Read(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function set_custom_data(string);
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function UPDATE_Write(net_packet&);
};

C++ class cse_alife_object_hanging_lamp : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_object_hanging_lamp (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_object_physic : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_object_physic (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function set_yaw(cse_alife_object_physic*, number);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_object_projector : cse_alife_dynamic_object_visual {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_object_projector (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_online_offline_group : cse_alife_dynamic_object,cse_alife_schedulable {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_online_offline_group (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function clsid() const;
    function move_offline() const;
    function move_offline(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function can_save() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function init();
    function set_custom_data(string);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function used_ai_locations() const;
    function keep_saved_data_anyway() const;
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function on_spawn();
};

C++ class cse_alife_ph_skeleton_object : cse_alife_dynamic_object_visual,cse_ph_skeleton {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_ph_skeleton_object (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function interactive() const;
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_alife_psydog_phantom : cse_alife_monster_base {
    property direction;
    property group;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_smart_terrain_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    property squad;
    property team;
    
    cse_alife_psydog_phantom (string);
    
    function set_startup_animation(string);
    function set_visual(string);
    function brain(cse_alife_monster_abstract*);
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function smart_terrain_id(cse_alife_monster_abstract*);
    function clsid() const;
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function on_death(cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function get_startup_animation();
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_unregister();
    function alive() const;
    function set_custom_data(string);
    function smart_terrain_task_activate(cse_alife_monster_abstract*);
    function smart_terrain_task_deactivate(cse_alife_monster_abstract*);
    function get_visual() const;
    function interactive() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function g_squad();
    function clear_smart_terrain(cse_alife_monster_abstract*);
    function g_team();
    function update();
    function on_register();
    function can_save() const;
    function on_before_register();
    function used_ai_locations() const;
    function STATE_Read(net_packet&, number);
    function health() const;
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function g_group();
    function rank();
};

C++ class cse_alife_schedulable : ipure_schedulable_object {
};

C++ class cse_alife_smart_zone : cse_alife_space_restrictor,cse_alife_schedulable {
    const DEFAULT_RESTRICTOR_TYPE_IN = 2;
    const DEFAULT_RESTRICTOR_TYPE_NONE = 0;
    const DEFAULT_RESTRICTOR_TYPE_OUT = 1;
    const RESTRICTOR_TYPE_IN = 4;
    const RESTRICTOR_TYPE_NONE = 3;
    const RESTRICTOR_TYPE_OUT = 5;
    
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_smart_zone (string);
    
    function on_register();
    function update();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function set_space_restrictor_type(number);
    function clsid() const;
    function task(cse_alife_monster_abstract*);
    function enabled(cse_alife_monster_abstract*) const;
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function name(const cse_abstract*);
    function keep_saved_data_anyway() const;
    function register_npc(cse_alife_monster_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function smart_touch(cse_alife_monster_abstract*);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function get_space_restrictor_type() const;
    function detect_probability();
    function can_save() const;
    function on_before_register();
    function unregister_npc(cse_alife_monster_abstract*);
    function suitable(cse_alife_monster_abstract*) const;
    function on_spawn();
    function set_custom_data(string);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function used_ai_locations() const;
};

C++ class cse_alife_space_restrictor : cse_alife_dynamic_object,cse_shape {
    const DEFAULT_RESTRICTOR_TYPE_IN = 2;
    const DEFAULT_RESTRICTOR_TYPE_NONE = 0;
    const DEFAULT_RESTRICTOR_TYPE_OUT = 1;
    const RESTRICTOR_TYPE_IN = 4;
    const RESTRICTOR_TYPE_NONE = 3;
    const RESTRICTOR_TYPE_OUT = 5;
    
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_space_restrictor (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function can_save() const;
    function set_space_restrictor_type(number);
    function clsid() const;
    function move_offline() const;
    function move_offline(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function get_space_restrictor_type() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function init();
    function set_custom_data(string);
    function name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function interactive() const;
    function used_ai_locations() const;
    function keep_saved_data_anyway() const;
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function on_spawn();
};

C++ class cse_alife_team_base_zone : cse_alife_space_restrictor {
    const DEFAULT_RESTRICTOR_TYPE_IN = 2;
    const DEFAULT_RESTRICTOR_TYPE_NONE = 0;
    const DEFAULT_RESTRICTOR_TYPE_OUT = 1;
    const RESTRICTOR_TYPE_IN = 4;
    const RESTRICTOR_TYPE_NONE = 3;
    const RESTRICTOR_TYPE_OUT = 5;
    
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_team_base_zone (string);
    
    function on_before_register();
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function on_spawn();
    function set_space_restrictor_type(number);
    function clsid() const;
    function can_save() const;
    function set_custom_data(string);
    function get_space_restrictor_type() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function keep_saved_data_anyway() const;
    function init();
    function used_ai_locations() const;
    function interactive() const;
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function UPDATE_Read(net_packet&);
};

C++ class cse_torrid_zone : cse_custom_zone,cse_motion {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_torrid_zone (string);
    
    function on_before_register();
    function can_save() const;
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function clsid() const;
    function on_spawn();
    function on_register();
    function UPDATE_Read(net_packet&);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function keep_saved_data_anyway() const;
    function init();
    function used_ai_locations() const;
    function interactive() const;
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function set_custom_data(string);
};

C++ class cse_alife_trader : cse_alife_dynamic_object_visual,cse_alife_trader_abstract {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_alife_trader (string);
    
    function on_before_register();
    function set_startup_animation(string);
    function UPDATE_Read(net_packet&);
    function can_save() const;
    function character_name();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function visible_for_map() const;
    function visible_for_map(boolean);
    function interactive() const;
    function community() const;
    function STATE_Write(net_packet&);
    function on_spawn();
    function clsid() const;
    function on_register();
    function set_custom_data(string);
    function keep_saved_data_anyway() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function used_ai_locations() const;
    function init();
    function reputation();
    function section_name(const cse_abstract*);
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function profile_name(cse_alife_trader_abstract*);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function move_offline() const;
    function move_offline(boolean);
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function rank();
};

C++ class cse_alife_trader_abstract {
    function profile_name(cse_alife_trader_abstract*);
    function community() const;
    function reputation();
    function character_name();
    function rank();
};

C++ class cse_zone_visual : cse_anomalous_zone,cse_visual {
    property direction;
    property id;
    property m_game_vertex_id;
    property m_level_vertex_id;
    property m_story_id;
    property online;
    property parent_id;
    property position;
    property script_version;
    
    cse_zone_visual (string);
    
    function used_ai_locations() const;
    function set_startup_animation(string);
    function on_register();
    function can_switch_online() const;
    function can_switch_online(boolean);
    function UPDATE_Read(net_packet&);
    function get_startup_animation();
    function set_custom_data(string);
    function can_save() const;
    function clsid() const;
    function on_before_register();
    function can_switch_offline() const;
    function can_switch_offline(boolean);
    function move_offline() const;
    function move_offline(boolean);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function name(const cse_abstract*);
    function init();
    function STATE_Read(net_packet&, number);
    function spawn_artefacts();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function STATE_Write(net_packet&);
    function add_shape_size(number);
    function interactive() const;
    function keep_saved_data_anyway() const;
    function on_spawn();
    function UPDATE_Write(net_packet&);
    function on_unregister();
    function visible_for_map() const;
    function visible_for_map(boolean);
};

C++ class cse_abstract : cpure_server_object {
    property direction;
    property id;
    property parent_id;
    property position;
    property script_version;
    
    function STATE_Write(net_packet&);
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function UPDATE_Read(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function set_custom_data(string);
    function clsid() const;
    function UPDATE_Write(net_packet&);
};

C++ class CSE_AbstractVisual : cse_visual,cse_abstract {
    property direction;
    property id;
    property parent_id;
    property position;
    property script_version;
    
    CSE_AbstractVisual (string);
    
    function STATE_Write(net_packet&);
    function set_startup_animation(string);
    function getStartupAnimation();
    function init();
    function spawn_ini(cse_abstract*);
    function get_startup_animation();
    function UPDATE_Read(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function set_custom_data(string);
    function clsid() const;
    function UPDATE_Write(net_packet&);
    function section_name(const cse_abstract*);
};

C++ class cse_motion {
};

C++ class cse_ph_skeleton {
};

C++ class cse_shape {
};

C++ class cse_spectator : cse_abstract {
    property direction;
    property id;
    property parent_id;
    property position;
    property script_version;
    
    cse_spectator (string);
    
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function UPDATE_Read(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function set_custom_data(string);
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function UPDATE_Write(net_packet&);
};

C++ class cse_temporary : cse_abstract {
    property direction;
    property id;
    property parent_id;
    property position;
    property script_version;
    
    cse_temporary (string);
    
    function STATE_Write(net_packet&);
    function init();
    function spawn_ini(cse_abstract*);
    function section_name(const cse_abstract*);
    function UPDATE_Read(net_packet&);
    function STATE_Read(net_packet&, number);
    function name(const cse_abstract*);
    function set_custom_data(string);
    function clsid() const;
    function FillProps(string, class xr_vector<class PropItem *,class xalloc<class PropItem *> >&);
    function UPDATE_Write(net_packet&);
};

C++ class cse_visual {
    function get_startup_animation();
    function set_startup_animation(string);
};

C++ class CSavedGameWrapper {
    CSavedGameWrapper (string);
    
    function level_name(const CSavedGameWrapper*);
    function level_id() const;
    function game_time(const CSavedGameWrapper*);
    function actor_health() const;
};

C++ class CScope : CGameObject {
    CScope ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class cond {
    const act_end = 128;
    const anim_end = 4;
    const look_end = 2;
    const move_end = 1;
    const object_end = 32;
    const sound_end = 8;
    const time_end = 64;
    
    cond ();
    cond (number);
    cond (number, double);
    
};

C++ class anim {
    const attack = 7;
    const danger = 0;
    const eat = 4;
    const free = 1;
    const lie_idle = 3;
    const look_around = 8;
    const panic = 2;
    const rest = 6;
    const sit_idle = 2;
    const sleep = 5;
    const stand_idle = 0;
    const turn = 9;
    
    anim ();
    anim (string);
    anim (string, boolean);
    anim (enum MonsterSpace::EMentalState);
    anim (enum MonsterSpace::EScriptMonsterAnimAction, number);
    
    function completed();
    function type(enum MonsterSpace::EMentalState);
    function anim(string);
};

C++ class object_binder {
    property object;
    
    object_binder (game_object*);
    
    function save(net_packet*);
    function update(number);
    function reload(string);
    function net_export(net_packet*);
    function net_save_relevant();
    function load(reader*);
    function net_destroy();
    function reinit();
    function net_Relcase(game_object*);
    function net_spawn(cse_alife_object*);
    function net_import(net_packet*);
};

C++ class effector {
    effector (number, number);
    
    function start(effector*);
    function process(effector_params*);
    function finish(effector*);
};

C++ class entity_action {
    entity_action ();
    entity_action (const entity_action*);
    
    function set_action(move&);
    function set_action(look&);
    function set_action(anim&);
    function set_action(sound&);
    function set_action(particle&);
    function set_action(object&);
    function set_action(cond&);
    function set_action(act&);
    function move() const;
    function particle() const;
    function completed();
    function object() const;
    function all();
    function time();
    function look() const;
    function sound() const;
    function anim() const;
};

C++ class game_object {
    const action_type_count = 6;
    const animation = 2;
    const dialog_pda_msg = 0;
    const dummy = -1;
    const enemy = 2;
    const friend = 0;
    const game_path = 0;
    const info_pda_msg = 1;
    const level_path = 1;
    const movement = 0;
    const neutral = 1;
    const no_path = 3;
    const no_pda_msg = 2;
    const object = 5;
    const particle = 4;
    const patrol_path = 2;
    const relation_attack = 1;
    const relation_fight_help_human = 2;
    const relation_fight_help_monster = 4;
    const relation_kill = 0;
    const sound = 3;
    const watch = 1;
    
    property health;
    property morale;
    property power;
    property psy_health;
    property radiation;
    property bleeding;
    
    function memory_time(const game_object&);
    function dont_has_info(string);
    function max_ignore_monster_distance(const number&);
    function max_ignore_monster_distance() const;
    function has_scope_installed() const;
    function disable_info_portion(string);
    function add_animation(string, boolean, boolean);
    function get_script() const;
    function enable_anomaly();
    function buy_supplies(ini_file*, string);
    function sound_voice_prefix() const;
    function get_start_dialog();
    function memory_visible_objects() const;
    function who_hit_name();
    function restore_default_start_dialog();
    function set_actor_state(enum EActorState, boolean);
    function disable_trade();
    function active_item();
    function teleport_alive_entity(vector, vector);
    function set_start_dialog(string);
    function enable_trade();
    function general_goodwill(game_object*);
    function switch_to_talk();
    function is_inv_box_empty();
    function base_out_restrictions();
    function attach_vehicle(number);
    function debug_planner(const action_planner*);
    function best_weapon();
    function active_slot();
    function bone_name_to_id(string);
    function inventory_for_each(const function<void>&);
    function disable_talk();
    function game_vertex_id() const;
    function set_previous_point(number);
    function set_item(enum MonsterSpace::EObjectAction);
    function set_item(enum MonsterSpace::EObjectAction, game_object*);
    function set_item(enum MonsterSpace::EObjectAction, game_object*, number);
    function set_item(enum MonsterSpace::EObjectAction, game_object*, number, number);
    function team() const;
    function set_condition(number);
    function active_zone_contact(number);
    function action_count() const;
    function berserk();
    function is_blocked_slots_and_inventory();
    function name() const;
    function set_range(number);
    function restore_sound_threshold();
    function object_count() const;
    function is_talk_enabled();
    function animation_slot() const;
    function get_current_direction();
    function action() const;
    function give_talk_message(string, string, Frect, string);
    function set_actor_direction_vector(vector);
    function not_yet_visible_objects() const;
    function set_mental_state(enum MonsterSpace::EMentalState);
    function accessible_nearest(const vector&, vector&);
    function reset_action_queue();
    function script(boolean, string);
    function set_actor_direction(number);
    function inventory_box_foreach(const function<void>&);
    function drop_item(game_object*);
    function add_restrictions(string, string);
    function get_monster_hit_info();
    function memory_hit_objects() const;
    function bind_object(object_binder*);
    function get_ammo_section();
    function binded_object();
    function path_completed() const;
    function set_fastcall(const function<boolean>&, object);
    function level_vertex_id() const;
    function set_start_point(number);
    function set_fov(number);
    function attach_addon(number);
    function set_path_type(enum MovementManager::EPathType);
    function weapon_strapped() const;
    function get_ammo_total() const;
    function best_danger();
    function restore_max_ignore_monster_distance();
    function enable_memory_object(game_object*, boolean);
    function get_current_outfit() const;
    function animation_count() const;
    function memory_sound_objects() const;
    function activate_slot(number);
    function get_hanging_lamp();
    function get_torch_state();
    function invulnerable() const;
    function invulnerable(boolean);
    function movement_type() const;
    function parent() const;
    function remove_home();
    function condition() const;
    function switch_to_trade();
    function set_dest_level_vertex_id(number);
    function eat(game_object*);
    function block_slots_and_inventory(boolean);
    function get_script_name() const;
    function spawn_ini() const;
    function drop_item_and_teleport(game_object*, vector);
    function get_current_holder();
    function set_body_state(enum MonsterSpace::EBodyState);
    function set_invisible(boolean);
    function get_icon();
    function has_info(string);
    function anomaly_detector_enable(boolean);
    function play_sound(number);
    function play_sound(number, number);
    function play_sound(number, number, number);
    function play_sound(number, number, number, number);
    function play_sound(number, number, number, number, number);
    function play_sound(number, number, number, number, number, number);
    function play_hud_animation(string, number);
    function set_character_community(string, number, number);
    function get_actor_relation_flags() const;
    function disable_anomaly();
    function motivation_action_manager(game_object*);
    function bone_position(string) const;
    function object(string);
    function object(number);
    function fov() const;
    function set_default_panic_threshold();
    function set_actor_relation_flags(flags32);
    function get_bleeding() const;
    function hide_weapon();
    function is_body_turning() const;
    function marked_dropped(game_object*);
    function set_character_rank(number);
    function set_actor_camera(number);
    function object_on_belt(string);
    function object_on_belt(number);
    function patrol_path_make_inactual();
    function fake_death_stand_up();
    function character_rank();
    function remove_sound(number);
    function set_detail_path_type(enum DetailPathManager::EDetailPathType);
    function extrapolate_length() const;
    function extrapolate_length(number);
    function has_silencer_installed() const;
    function play_cycle(string);
    function play_cycle(string, boolean);
    function object_on_belt_count() const;
    function patrol();
    function story_id() const;
    function in_restrictions();
    function deactivate_slot();
    function visibility_threshold() const;
    function section() const;
    function get_current_point_index();
    function set_alien_control(boolean);
    function set_patrol_path(string, enum PatrolPathManager::EPatrolStartType, enum PatrolPathManager::EPatrolRouteType, boolean);
    function set_torch_state(boolean);
    function bone_exist(string);
    function set_const_force(const vector&, number, number);
    function sell_condition(ini_file*, string);
    function sell_condition(number, number);
    function change_team(number, number, number);
    function set_trader_sound(string, string);
    function direction() const;
    function kill(game_object*);
    function cost() const;
    function level_vertex_light(const number&) const;
    function skip_transfer_enemy(boolean);
    function see(const game_object*);
    function see(string);
    function info_add(string);
    function get_task_state(string, number);
    function set_sight(enum SightManager::ESightType, const vector*, number);
    function set_sight(enum SightManager::ESightType, boolean, boolean);
    function set_sight(enum SightManager::ESightType, const vector&, boolean);
    function set_sight(enum SightManager::ESightType, const vector*);
    function set_sight(game_object*);
    function set_sight(game_object*, boolean);
    function set_sight(game_object*, boolean, boolean);
    function set_sight(game_object*, boolean, boolean, boolean);
    function remove_restrictions(string, string);
    function is_first_eye();
    function money();
    function get_ammo_magsize();
    function enable_talk();
    function set_task_state(enum ETaskState, string, number);
    function add_sound(string, number, enum ESoundTypes, number, number, number);
    function add_sound(string, number, enum ESoundTypes, number, number, number, string);
    function max_health() const;
    function restore_ignore_monster_threshold();
    function set_queue_size(number);
    function remove_from_inventory(number);
    function get_bone_visible(string);
    function enable_vision(boolean);
    function alive() const;
    function target_movement_type() const;
    function target_body_state() const;
    function head_orientation() const;
    function move_to_ruck(game_object*);
    function set_actor_position(vector);
    function remove_all_restrictions();
    function active_sound_count();
    function active_sound_count(boolean);
    function set_bone_visible(string, boolean, boolean);
    function item_in_slot(number) const;
    function is_trade_enabled();
    function set_sound_mask(number);
    function vision_enabled() const;
    function fake_death_fall_down();
    function mark_item_dropped(game_object*);
    function ignore_monster_threshold(number);
    function ignore_monster_threshold() const;
    function attachable_item_enabled() const;
    function wounded() const;
    function wounded(boolean);
    function critically_wounded();
    function move_to_slot(game_object*, boolean);
    function set_actor_look_at_position(vector, number);
    function body_state() const;
    function sight_params();
    function stop_talk();
    function profile_name();
    function unload_magazine();
    function set_goodwill(number, game_object*);
    function location_on_path(number, vector*);
    function run_talk_dialog(game_object*);
    function sound_prefix() const;
    function sound_prefix(string);
    function set_custom_panic_threshold(number);
    function show_condition(ini_file*, string);
    function anomaly_detector_enabled();
    function buy_condition(ini_file*, string);
    function buy_condition(number, number);
    function is_talking();
    function make_object_visible_somewhen(game_object*);
    function jump(const vector&, number);
    function info_clear();
    function inside(const vector&, number) const;
    function inside(const vector&) const;
    function has_grenade_launcher_installed() const;
    function set_relation(enum ALife::ERelationType, game_object*);
    function out_restrictions();
    function set_nonscript_usable(boolean);
    function enable_attachable_item(boolean);
    function set_tip_text_default();
    function set_tip_text(string);
    function detach_vehicle();
    function set_desired_position();
    function set_desired_position(const vector*);
    function get_holder_class();
    function get_physics_shell() const;
    function get_turret();
    function give_info_portion(string);
    function get_car();
    function give_game_news(string, string, Frect, number, number);
    function external_sound_start(string);
    function get_anomaly_power();
    function set_trader_global_anim(string);
    function set_callback(enum GameObject::ECallbackType, const function<void>&);
    function set_callback(enum GameObject::ECallbackType, const function<void>&, object);
    function set_callback(enum GameObject::ECallbackType);
    function get_corpse() const;
    function set_ammo_elapsed(number);
    function set_home(string, number, number, boolean);
    function best_item();
    function path_type() const;
    function rank();
    function detail_path_type() const;
    function set_anomaly_power(number);
    function remove_fast_update();
    function set_fast_update(const function<void>&, object);
    function get_enemy() const;
    function get_ammo_in_magazine();
    function mental_state() const;
    function best_enemy();
    function vertex_in_direction(number, vector, number) const;
    function clear_animations();
    function center();
    function best_cover(const vector&, const vector&, number, number, number);
    function clsid() const;
    function set_manual_invisibility(boolean);
    function command(const entity_action*, boolean);
    function get_enemy_strength() const;
    function range() const;
    function get_current_holder_id();
    function mass() const;
    function change_character_reputation(number);
    function character_reputation();
    function accessible(const vector&);
    function accessible(number);
    function character_name();
    function accuracy() const;
    function set_patrol_extrapolate_callback();
    function set_patrol_extrapolate_callback(const function<boolean>&);
    function set_patrol_extrapolate_callback(const function<boolean>&, object);
    function change_goodwill(number, game_object*);
    function who_hit_section_name();
    function hit(hit*);
    function iterate_inventory(function<void>, object);
    function goodwill(game_object*);
    function movement_enabled(boolean);
    function movement_enabled();
    function relation(game_object*);
    function restore_weapon();
    function weapon_unstrapped() const;
    function is_weapon_hidden();
    function character_community();
    function group() const;
    function get_current_outfit_protection(number);
    function give_money(number);
    function transfer_money(number, game_object*);
    function transfer_item(game_object*, game_object*);
    function base_in_restrictions();
    function squad() const;
    function set_trader_head_anim(string);
    function set_actor_legs_visible(boolean);
    function can_script_capture() const;
    function give_task(CGameTask*, number, boolean);
    function set_desired_direction();
    function set_desired_direction(const vector*);
    function get_info_time(string);
    function get_helicopter();
    function get_sound_info();
    function safe_cover(const vector&, number, number);
    function id() const;
    function explode(number);
    function set_sound_threshold(number);
    function memory_position(const game_object&);
    function death_time() const;
    function external_sound_stop();
    function position() const;
    function target_mental_state() const;
    function action_by_index(number);
    function object_on_belt_by_id(number);
    function set_movement_type(enum MonsterSpace::EMovementType);
    function set_enemy_callback();
    function set_enemy_callback(const function<boolean>&);
    function set_enemy_callback(const function<boolean>&, object);
	//for stashes only
	function 	set_stash_as_safe	(boolean is_safe);
	function	set_safe_code		(string code);
	boolean 	is_stash_a_safe		();
	string 		get_safe_code		();
	function	set_unlock_info		(string);
	string		get_unlock_info		();
	function 	open_safe_box		();//îòêðûòèå ñýéôà, íà êîòîðîðûé ñìîòðèò àêòîð db.actor:open_safe_box()
};

C++ class hit {
    const burn = 0;
    const chemical_burn = 6;
    const dummy = 11;
    const explosion = 7;
    const fire_wound = 8;
    const radiation = 4;
    const shock = 1;
    const strike = 2;
    const telepatic = 5;
    const wound = 3;
    
    property direction;
    property draftsman;
    property impulse;
    property power;
    property type;
    
    hit ();
    hit (const hit*);
    
    function bone(string);
};

C++ class ini_file {
    ini_file (string);
    
    function line_count(string);
    function r_bool(string, string);
    function section_exist(string);
    function r_float(string, string);
    function r_clsid(string, string);
    function r_s32(string, string);
    function section_count();
    function r_line(ini_file*, string, number, string&, string&);
    function r_token(string, string, const token_list&);
    function r_vector(string, string);
    function r_u32(string, string);
    function r_string_wq(string, string);
    function r_string(string, string);
    function line_exist(string, string);
};

C++ class act {
    const attack = 2;
    const eat = 1;
    const panic = 3;
    const rest = 0;
    
    act ();
    act (enum MonsterSpace::EScriptMonsterGlobalAction);
    act (enum MonsterSpace::EScriptMonsterGlobalAction, game_object*);
    
};

C++ class MonsterHitInfo {
    property direction;
    property time;
    property who;
    
};

C++ class move {
    const back = 4;
    const criteria = 2;
    const crouch = 0;
    const curve = 0;
    const curve_criteria = 2;
    const default = 0;
    const dodge = 1;
    const down = 64;
    const drag = 3;
    const force = 1;
    const fwd = 2;
    const handbrake = 128;
    const jump = 4;
    const left = 8;
    const line = 0;
    const none = 1;
    const off = 512;
    const on = 256;
    const right = 16;
    const run = 1;
    const run_fwd = 2;
    const stand = 2;
    const standing = 1;
    const steal = 5;
    const up = 32;
    const walk = 0;
    const walk_bkwd = 1;
    const walk_fwd = 0;
    
    move ();
    move (enum CScriptMovementAction::EInputKeys);
    move (enum CScriptMovementAction::EInputKeys, number);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, game_object*);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, game_object*, number);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, const patrol&);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, const patrol&, number);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, const vector&);
    move (enum MonsterSpace::EBodyState, enum MonsterSpace::EMovementType, enum DetailPathManager::EDetailPathType, const vector&, number);
    move (const vector&, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector&);
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol&);
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*);
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector&, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, number, vector&);
    move (enum MonsterSpace::EScriptMonsterMoveAction, number, vector&, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol&, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*, number);
    move (enum MonsterSpace::EScriptMonsterMoveAction, vector&, number, enum MonsterSpace::EScriptMonsterSpeedParam);
    move (enum MonsterSpace::EScriptMonsterMoveAction, patrol&, number, enum MonsterSpace::EScriptMonsterSpeedParam);
    move (enum MonsterSpace::EScriptMonsterMoveAction, game_object*, number, enum MonsterSpace::EScriptMonsterSpeedParam);
    
    function completed();
    function path(enum DetailPathManager::EDetailPathType);
    function move(enum MonsterSpace::EMovementType);
    function position(const vector&);
    function input(enum CScriptMovementAction::EInputKeys);
    function patrol(const class CPatrolPath*, class shared_str);
    function object(game_object*);
    function body(enum MonsterSpace::EBodyState);
};

C++ class object {
    const activate = 16;
    const aim1 = 4;
    const aim2 = 5;
    const deactivate = 17;
    const drop = 11;
    const dummy = -1;
    const fire1 = 6;
    const fire2 = 8;
    const hide = 22;
    const idle = 9;
    const reload = 2;
    const reload1 = 2;
    const reload2 = 3;
    const show = 21;
    const strap = 10;
    const switch1 = 0;
    const switch2 = 1;
    const take = 23;
    const turn_off = 20;
    const turn_on = 19;
    const use = 18;
    
    object ();
    object (game_object*, enum MonsterSpace::EObjectAction);
    object (game_object*, enum MonsterSpace::EObjectAction, number);
    object (enum MonsterSpace::EObjectAction);
    object (string, enum MonsterSpace::EObjectAction);
    
    function completed();
    function object(string);
    function object(game_object*);
    function action(enum MonsterSpace::EObjectAction);
};

C++ class particle {
    particle ();
    particle (string, string);
    particle (string, string, const particle_params&);
    particle (string, string, const particle_params&, boolean);
    particle (string, const particle_params&);
    particle (string, const particle_params&, boolean);
    
    function set_velocity(const vector&);
    function set_position(const vector&);
    function set_bone(string);
    function set_angles(const vector&);
    function completed();
    function set_particle(string, boolean);
};

C++ class particles_object {
    particles_object (string);
    
    function pause_path(boolean);
    function play_at_pos(const vector&);
    function move_to(const vector&, const vector&);
    function looped() const;
    function load_path(string);
    function set_dir(const vector&, const vector&);
    function start_path(boolean);
    function stop();
    function stop_path();
    function stop_deffered();
    function play();
    function play(const vector&, const vector&, const vector&);
    function playing() const;
};

C++ class rtoken_list {
    rtoken_list ();
    
    function clear();
    function remove(number);
    function count();
    function get(number);
    function add(string);
};

C++ class sound_object {
    const looped = 1;
    const s2d = 2;
    const s3d = 0;
    
    property frequency;
    property max_distance;
    property min_distance;
    property volume;
    
    sound_object (string);
    sound_object (string, enum ESoundTypes);
    
    function set_position(const vector&);
    function stop_deffered();
    function get_position() const;
    function play_no_feedback(game_object*, number, number, vector, number);
    function play_at_pos(game_object*, const vector&);
    function play_at_pos(game_object*, const vector&, number);
    function play_at_pos(game_object*, const vector&, number, number);
    function stop();
    function length();
    function play(game_object*);
    function play(game_object*, number);
    function play(game_object*, number, number);
    function playing() const;
};

C++ class sound {
    const attack = 3;
    const attack_hit = 4;
    const die = 7;
    const eat = 2;
    const idle = 1;
    const panic = 11;
    const steal = 10;
    const take_damage = 5;
    const threaten = 9;
    
    sound ();
    sound (string, string);
    sound (string, string, const vector&);
    sound (string, string, const vector&, const vector&);
    sound (string, string, const vector&, const vector&, boolean);
    sound (string, const vector&);
    sound (string, const vector&, const vector&);
    sound (string, const vector&, const vector&, boolean);
    sound (sound_object&, string, const vector&);
    sound (sound_object&, string, const vector&, const vector&);
    sound (sound_object&, string, const vector&, const vector&, boolean);
    sound (sound_object&, const vector&);
    sound (sound_object&, const vector&, const vector&);
    sound (sound_object&, const vector&, const vector&, boolean);
    sound (enum MonsterSound::EType);
    sound (enum MonsterSound::EType, number);
    sound (string, string, enum MonsterSpace::EMonsterHeadAnimType);
    
    function set_sound(string);
    function set_sound(const sound_object&);
    function set_position(const vector&);
    function set_bone(string);
    function set_angles(const vector&);
    function set_sound_type(enum ESoundTypes);
    function completed();
};

C++ class SoundInfo {
    property danger;
    property position;
    property power;
    property time;
    property who;
    
};

C++ class token_list {
    token_list ();
    
    function clear();
    function remove(string);
    function name(number);
    function id(string);
    function add(string, number);
};

C++ class look {
    const cur_dir = 0;
    const danger = 5;
    const direction = 2;
    const fire_point = 10;
    const path_dir = 1;
    const point = 3;
    const search = 6;
    
    look ();
    look (enum SightManager::ESightType);
    look (enum SightManager::ESightType, vector&);
    look (enum SightManager::ESightType, game_object*);
    look (enum SightManager::ESightType, game_object*, string);
    look (const vector&, number, number);
    look (game_object*, number, number);
    
    function completed();
    function type(enum SightManager::ESightType);
    function object(game_object*);
    function bone(string);
    function direct(const vector&);
};

C++ class CScriptXmlInit {
    CScriptXmlInit ();
    
    function InitSpinText(string, CUIWindow*);
    function InitTab(string, CUIWindow*);
    function InitStatic(string, CUIWindow*);
    function InitList(string, CUIWindow*);
    function InitTrackBar(string, CUIWindow*);
    function InitSpinFlt(string, CUIWindow*);
    function ParseShTexInfo(string);
    function InitLabel(string, CUIWindow*);
    function InitSpinNum(string, CUIWindow*);
    function InitMapList(string, CUIWindow*);
    function ParseFile(string);
    function ParseFile(string, string);
    function InitCDkey(string, CUIWindow*);
    function InitProgressBar(string, CUIWindow*);
    function InitKeyBinding(string, CUIWindow*);
    function InitMMShniaga(string, CUIWindow*);
    function InitWindow(string, number, CUIWindow*);
    function InitEditBox(string, CUIWindow*);
    function InitCheck(string, CUIWindow*);
    function InitAutoStaticGroup(string, CUIWindow*);
    function InitScrollView(string, CUIWindow*);
    function InitMapInfo(string, CUIWindow*);
    function InitServerList(string, CUIWindow*);
    function Init3tButton(string, CUIWindow*);
    function InitAnimStatic(string, CUIWindow*);
    function InitFrameLine(string, CUIWindow*);
    function InitComboBox(string, CUIWindow*);
    function InitButton(string, CUIWindow*);
    function InitFrame(string, CUIWindow*);
};

C++ class ce_script_zone : DLL_Pure {
    ce_script_zone ();
    
    function _construct();
};

C++ class CServerList : CUIWindow {
    CServerList ();
    
    function SetPlayerName(string);
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetFilters(SServerFilters&);
    function RefreshList(boolean);
    function SetSortFunc(string, boolean);
    function SetAutoDelete(boolean);
    function NetRadioChanged(boolean);
    function ShowServerInfo();
    function RefreshQuick();
    function AttachChild(CUIWindow*);
    function GetWidth() const;
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function ConnectToSelected();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class ce_smart_zone : DLL_Pure {
    ce_smart_zone ();
    
    function _construct();
};

C++ class CSnork : CGameObject {
    CSnork ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class sound_params {
    property frequency;
    property max_distance;
    property min_distance;
    property position;
    property volume;
    
};

C++ class CSpaceRestrictor : CGameObject {
    CSpaceRestrictor ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CStalkerOutfit : CGameObject {
    CStalkerOutfit ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class stalker_ids {
    const action_accomplish_task = 7;
    const action_aim_enemy = 16;
    const action_alife_planner = 58;
    const action_anomaly_planner = 60;
    const action_combat_planner = 59;
    const action_communicate_with_customer = 9;
    const action_critically_wounded = 36;
    const action_danger_by_sound_planner = 43;
    const action_danger_grenade_look_around = 55;
    const action_danger_grenade_planner = 42;
    const action_danger_grenade_search = 56;
    const action_danger_grenade_take_cover = 52;
    const action_danger_grenade_take_cover_after_explosion = 54;
    const action_danger_grenade_wait_for_explosion = 53;
    const action_danger_in_direction_detour = 50;
    const action_danger_in_direction_hold_position = 49;
    const action_danger_in_direction_look_out = 48;
    const action_danger_in_direction_planner = 41;
    const action_danger_in_direction_search = 51;
    const action_danger_in_direction_take_cover = 47;
    const action_danger_planner = 61;
    const action_danger_unknown_look_around = 45;
    const action_danger_unknown_planner = 40;
    const action_danger_unknown_search = 46;
    const action_danger_unknown_take_cover = 44;
    const action_dead = 0;
    const action_death_planner = 57;
    const action_detour_enemy = 25;
    const action_dying = 1;
    const action_find_ammo = 15;
    const action_find_item_to_kill = 13;
    const action_gather_items = 2;
    const action_get_distance = 24;
    const action_get_item_to_kill = 12;
    const action_get_ready_to_kill = 17;
    const action_hold_position = 23;
    const action_kill_enemy = 19;
    const action_kill_enemy_if_not_visible = 29;
    const action_kill_if_enemy_critically_wounded = 37;
    const action_kill_if_player_on_the_path = 35;
    const action_kill_wounded_enemy = 33;
    const action_look_out = 22;
    const action_make_item_killing = 14;
    const action_no_alife = 3;
    const action_post_combat_wait = 34;
    const action_prepare_wounded_enemy = 32;
    const action_reach_customer_location = 8;
    const action_reach_task_location = 6;
    const action_reach_wounded_enemy = 30;
    const action_retreat_from_enemy = 20;
    const action_script = 62;
    const action_search_enemy = 26;
    const action_smart_terrain_task = 4;
    const action_solve_zone_puzzle = 5;
    const action_sudden_attack = 28;
    const action_take_cover = 21;
    const action_throw_grenade = 39;
    const detect_anomaly = 11;
    const get_out_of_anomaly = 10;
    const property_alife = 3;
    const property_alive = 0;
    const property_already_dead = 2;
    const property_anomaly = 44;
    const property_cover_actual = 40;
    const property_cover_reached = 41;
    const property_critically_wounded = 29;
    const property_danger = 8;
    const property_danger_by_sound = 39;
    const property_danger_grenade = 38;
    const property_danger_in_direction = 37;
    const property_danger_unknown = 36;
    const property_dead = 1;
    const property_enemy = 7;
    const property_enemy_critically_wounded = 30;
    const property_enemy_detoured = 21;
    const property_found_ammo = 12;
    const property_found_item_to_kill = 10;
    const property_grenade_exploded = 43;
    const property_in_cover = 18;
    const property_inside_anomaly = 45;
    const property_item_can_kill = 11;
    const property_item_to_kill = 9;
    const property_items = 6;
    const property_looked_around = 42;
    const property_looked_out = 19;
    const property_panic = 17;
    const property_position_holded = 20;
    const property_pure_enemy = 23;
    const property_puzzle_solved = 4;
    const property_ready_to_detour = 14;
    const property_ready_to_kill = 13;
    const property_script = 47;
    const property_see_enemy = 15;
    const property_should_throw_grenade = 46;
    const property_smart_terrain_task = 5;
    const property_use_crouch_to_look_out = 24;
    const property_use_suddenness = 22;
    const sound_alarm = 4;
    const sound_attack_allies_several_enemies = 7;
    const sound_attack_allies_single_enemy = 6;
    const sound_attack_no_allies = 5;
    const sound_backup = 8;
    const sound_detour = 9;
    const sound_die = 0;
    const sound_die_in_anomaly = 1;
    const sound_enemy_critically_wounded = 21;
    const sound_enemy_killed_or_wounded = -805302272;
    const sound_friendly_grenade_alarm = 17;
    const sound_grenade_alarm = 16;
    const sound_humming = 3;
    const sound_injuring = 2;
    const sound_injuring_by_friend = 12;
    const sound_kill_wounded = 20;
    const sound_need_backup = 18;
    const sound_panic_human = 13;
    const sound_panic_monster = 14;
    const sound_running_in_danger = 19;
    const sound_script = 24;
    const sound_search1_no_allies = 11;
    const sound_search1_with_allies = 10;
    const sound_tolls = 15;
    
};

C++ class CThornArtefact : CGameObject {
    CThornArtefact ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CTorch : CGameObject {
    CTorch ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CTushkano : CGameObject {
    CTushkano ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CUI3tButton : CUIButton {
    CUI3tButton ();
    
    function SetHighlightColor(number);
    function IsComplexMode();
    function Enable(boolean);
    function SetHeight(number);
    function GetText();
    function GetColor() const;
    function GetWidth() const;
    function GetClipperState();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function GetTextureColor() const;
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function SetColor(number);
    function SetStretchTexture(boolean);
    function GetFont();
    function ClipperOff();
    function SetHeading(number);
    function ClipperOn();
    function SetOriginalRect(number, number, number, number);
    function SetAutoDelete(boolean);
    function GetTextY();
    function SetTextColor(number, number, number, number);
    function GetStretchTexture();
    function AttachChild(CUIWindow*);
    function SetTextureColor(number);
    function SetWndPos(number, number);
    function SetTextST(string);
    function GetTextAlign();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function SetWindowName(string);
    function WindowName();
    function SetTextureOffset(number, number);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetComplexMode(boolean);
    function SetText(string);
    function InitTexture(string);
    function SetTextX(number);
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function IsAutoDelete();
};

C++ class CUIButton : CUIStatic {
    CUIButton ();
    
    function SetHighlightColor(number);
    function IsComplexMode();
    function Enable(boolean);
    function SetText(string);
    function GetText();
    function GetColor() const;
    function GetWidth() const;
    function GetClipperState();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function GetTextureColor() const;
    function GetHeading();
    function GetFont();
    function EnableTextHighlighting(boolean);
    function SetStretchTexture(boolean);
    function IsAutoDelete();
    function ClipperOff();
    function SetTextX(number);
    function ClipperOn();
    function SetHeight(number);
    function SetAutoDelete(boolean);
    function SetOriginalRect(number, number, number, number);
    function SetTextColor(number, number, number, number);
    function SetComplexMode(boolean);
    function AttachChild(CUIWindow*);
    function SetTextureColor(number);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function GetTextAlign();
    function SetTextST(string);
    function SetTextureOffset(number, number);
    function WindowName();
    function SetWindowName(string);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetStretchTexture();
    function GetTextY();
    function InitTexture(string);
    function SetHeading(number);
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function SetColor(number);
};

C++ class CUICaption {
    function addCustomMessage(const class shared_str&, number, number, number, CGameFont*, enum CGameFont::EAligment, number, string);
    function setCaption(const class shared_str&, string, number, boolean);
};

C++ class CUICheckButton : CUI3tButton {
    CUICheckButton ();
    
    function SetHighlightColor(number);
    function GetTextY();
    function Enable(boolean);
    function SetHeight(number);
    function GetText();
    function GetColor() const;
    function GetWidth() const;
    function GetClipperState();
    function GetCheck();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function GetTextureColor() const;
    function SetDependControl(CUIWindow*);
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function SetComplexMode(boolean);
    function IsAutoDelete();
    function SetStretchTexture(boolean);
    function GetFont();
    function SetHeading(number);
    function SetTextX(number);
    function ClipperOn();
    function IsComplexMode();
    function SetAutoDelete(boolean);
    function SetText(string);
    function SetTextColor(number, number, number, number);
    function SetCheck(boolean);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function GetStretchTexture();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function GetTextAlign();
    function SetTextST(string);
    function SetTextureOffset(number, number);
    function WindowName();
    function SetWindowName(string);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetTextureColor(number);
    function ClipperOff();
    function InitTexture(string);
    function SetOriginalRect(number, number, number, number);
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function SetColor(number);
};

C++ class CUIComboBox : CUIWindow {
    CUIComboBox ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetCurrentValueScript(number);
    function SetText(string);
    function AddItemToBox(string, number);
    function GetText();
    function SetAutoDelete(boolean);
    function SetListLength(number);
    function SetFont(CGameFont*);
    function CurrentID();
    function AttachChild(CUIWindow*);
    function GetWidth() const;
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(number, number, number);
    function SetVertScroll(boolean);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetCurrentID(number);
    function IsAutoDelete();
};

C++ class CUICustomEdit : CUIWindow {
    function GetFont();
    function SetNumbersOnly(boolean);
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetTextPosX(number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetTextAlignment();
    function GetText();
    function SetAutoDelete(boolean);
    function SetTextAlignment(enum CGameFont::EAligment);
    function SetTextColor(number);
    function GetTextColor();
    function AttachChild(CUIWindow*);
    function SetText(string);
    function SetWndPos(number, number);
    function SetTextPosY(number);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUICustomSpin : CUIWindow {
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function GetText();
    function SetAutoDelete(boolean);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUIDialogWnd : CUIWindow {
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetAutoDelete(boolean);
    function SetHolder(CDialogHolder*);
    function AttachChild(CUIWindow*);
    function SetWndSize(number, number);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function GetHolder();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUIScriptWnd : CUIDialogWnd,DLL_Pure {
    CUIScriptWnd ();
    
    function _construct();
    function Register(CUIWindow*);
    function Register(CUIWindow*, string);
    function Enable(boolean);
    function SetHeight(number);
    function GetFrameLineWnd(string);
    function SetHolder(CDialogHolder*);
    function GetWidth() const;
    function GetCheckButton(string);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function ResetPPMode();
    function GetPropertiesBox(string);
    function GetFont();
    function Update();
    function AddCallback(string, number, const function<void>&);
    function AddCallback(string, number, const function<void>&, object);
    function GetButton(string);
    function SetAutoDelete(boolean);
    function OnKeyboard(number, enum EUIMessages);
    function Dispatch(number, number);
    function GetListWnd(string);
    function AttachChild(CUIWindow*);
    function GetStatic(string);
    function SetWndPos(number, number);
    function GetTabControl(string);
    function GetRadioButton(string);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetFrameWindow(string);
    function WindowName();
    function GetDialogWnd(string);
    function GetHolder();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetEditBox(string);
    function SetWindowName(string);
    function GetProgressBar(string);
    function GetMessageBox(string);
    function SetWndSize(number, number);
    function Load(string);
    function IsAutoDelete();
};

C++ class CUIEditBox : CUICustomEdit {
    CUIEditBox ();
    
    function GetWidth() const;
    function GetTextAlignment();
    function AttachChild(CUIWindow*);
    function SetWindowName(string);
    function Enable(boolean);
    function SetText(string);
    function SetTextPosX(number);
    function SetFont(CGameFont*);
    function ResetPPMode();
    function GetText();
    function SetAutoDelete(boolean);
    function GetTextColor();
    function SetTextColor(number);
    function Show(boolean);
    function SetNumbersOnly(boolean);
    function DetachChild(CUIWindow*);
    function SetWndPos(number, number);
    function SetTextPosY(number);
    function WindowName();
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetPPMode();
    function SetTextAlignment(enum CGameFont::EAligment);
    function IsShown();
    function GetFont();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function InitTexture(string);
    function IsEnabled();
    function SetWndSize(number, number);
    function SetHeight(number);
    function IsAutoDelete();
};

C++ class CUIEditBoxEx : CUICustomEdit {
    CUIEditBoxEx ();
    
    function GetWidth() const;
    function GetTextAlignment();
    function AttachChild(CUIWindow*);
    function SetWindowName(string);
    function Enable(boolean);
    function SetText(string);
    function SetTextPosX(number);
    function SetFont(CGameFont*);
    function ResetPPMode();
    function GetText();
    function SetAutoDelete(boolean);
    function GetTextColor();
    function SetTextColor(number);
    function Show(boolean);
    function SetNumbersOnly(boolean);
    function DetachChild(CUIWindow*);
    function SetWndPos(number, number);
    function SetTextPosY(number);
    function WindowName();
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetPPMode();
    function SetTextAlignment(enum CGameFont::EAligment);
    function IsShown();
    function GetFont();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function InitTexture(string);
    function IsEnabled();
    function SetWndSize(number, number);
    function SetHeight(number);
    function IsAutoDelete();
};

C++ class CUIFrameLineWnd : CUIWindow {
    CUIFrameLineWnd ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetAutoDelete(boolean);
    function SetOrientation(boolean);
    function GetTitleStatic();
    function AttachChild(CUIWindow*);
    function SetColor(number);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number, boolean);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUIFrameWindow : CUIWindow {
    CUIFrameWindow ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetAutoDelete(boolean);
    function GetTitleStatic();
    function AttachChild(CUIWindow*);
    function SetColor(number);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUIGameCustom {
    function AddCustomMessage(string, number, number, number, CGameFont*, number, number);
    function AddCustomMessage(string, number, number, number, CGameFont*, number, number, number);
    function GetCustomStatic(string);
    function RemoveCustomStatic(string);
    function RemoveCustomMessage(string);
    function AddCustomStatic(string, boolean);
    function CustomMessageOut(string, string, number);
    function RemoveDialogToRender(CUIWindow*);
    function AddDialogToRender(CUIWindow*);
};

C++ class CUILabel : CUIFrameLineWnd {
    CUILabel ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function GetText();
    function SetAutoDelete(boolean);
    function SetOrientation(boolean);
    function SetText(string);
    function IsAutoDelete();
    function AttachChild(CUIWindow*);
    function SetFont(CGameFont*);
    function SetWndPos(number, number);
    function ResetPPMode();
    function DetachChild(CUIWindow*);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number, boolean);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function Show(boolean);
    function GetTitleStatic();
    function GetHeight() const;
    function SetWidth(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function IsEnabled();
    function SetWndSize(number, number);
    function GetWidth() const;
    function SetColor(number);
};

C++ class CUIListItem : CUIButton {
    CUIListItem ();
    
    function SetHighlightColor(number);
    function IsComplexMode();
    function Enable(boolean);
    function SetHeight(number);
    function GetText();
    function GetColor() const;
    function GetWidth() const;
    function GetClipperState();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function GetTextureColor() const;
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function SetColor(number);
    function SetStretchTexture(boolean);
    function GetFont();
    function ClipperOff();
    function SetHeading(number);
    function ClipperOn();
    function SetOriginalRect(number, number, number, number);
    function SetAutoDelete(boolean);
    function GetTextY();
    function SetTextColor(number, number, number, number);
    function GetStretchTexture();
    function AttachChild(CUIWindow*);
    function SetTextureColor(number);
    function SetWndPos(number, number);
    function SetTextST(string);
    function GetTextAlign();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function SetWindowName(string);
    function WindowName();
    function SetTextureOffset(number, number);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetComplexMode(boolean);
    function SetText(string);
    function InitTexture(string);
    function SetTextX(number);
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function IsAutoDelete();
};

C++ class CUIListItemEx : CUIListItem {
    CUIListItemEx ();
    
    function SetHighlightColor(number);
    function SetSelectionColor(number);
    function GetTextY();
    function Enable(boolean);
    function SetHeight(number);
    function GetText();
    function GetColor() const;
    function GetWidth() const;
    function GetClipperState();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function GetTextureColor() const;
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function IsAutoDelete();
    function SetStretchTexture(boolean);
    function GetFont();
    function SetHeading(number);
    function SetTextX(number);
    function ClipperOn();
    function IsComplexMode();
    function SetAutoDelete(boolean);
    function SetText(string);
    function SetTextColor(number, number, number, number);
    function SetComplexMode(boolean);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function GetStretchTexture();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function GetTextAlign();
    function SetTextST(string);
    function SetTextureOffset(number, number);
    function WindowName();
    function SetWindowName(string);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetTextureColor(number);
    function ClipperOff();
    function InitTexture(string);
    function SetOriginalRect(number, number, number, number);
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function SetColor(number);
};

C++ class CUIListWnd : CUIWindow {
    CUIListWnd ();
    
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function ActivateList(boolean);
    function ScrollToBegin();
    function GetVertFlip();
    function GetWidth() const;
    function GetSize();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function ResetPPMode();
    function SetItemHeight(number);
    function GetFont();
    function EnableScrollBar(boolean);
    function GetItemPos(CUIListItem*);
    function ResetFocusCapture();
    function SetAutoDelete(boolean);
    function GetSelectedItem();
    function SetTextColor(number);
    function ShowSelectedItem(boolean);
    function AttachChild(CUIWindow*);
    function GetFocusedItem();
    function SetWndPos(number, number);
    function ScrollToEnd();
    function SetFocusedItem(number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function IsScrollBarEnabled();
    function WindowName();
    function SetVertFlip(boolean);
    function IsListActive();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function ScrollToPos(number);
    function RemoveAll();
    function RemoveItem(number);
    function AddItem(CUIListItem*);
    function SetWndSize(number, number);
    function GetItem(number);
    function IsAutoDelete();
};

C++ class CUIMMShniaga : CUIWindow {
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetAutoDelete(boolean);
    function AttachChild(CUIWindow*);
    function SetVisibleMagnifier(boolean);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUIMapInfo : CUIWindow {
    CUIMapInfo ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function InitMap(string);
    function SetAutoDelete(boolean);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUIMapList : CUIWindow {
    CUIMapList ();
    
    function SetWindowName(string);
    function SaveMapList();
    function SetHeight(number);
    function GetCommandLine(string);
    function GetWidth() const;
    function GetCurGameType();
    function SetServerParams(string);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function SetWeatherSelector(CUIComboBox*);
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function IsEnabled();
    function ResetPPMode();
    function GetFont();
    function StartDedicatedServer();
    function SetModeSelector(CUISpinText*);
    function OnModeChange();
    function SetAutoDelete(boolean);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function SetMapPic(CUIStatic*);
    function Init(number, number, number, number);
    function Init(Frect*);
    function WindowName();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function IsEmpty();
    function SetMapInfo(CUIMapInfo*);
    function Enable(boolean);
    function SetWndSize(number, number);
    function LoadMapList();
    function IsAutoDelete();
};

C++ class CUIMessageBox : CUIStatic {
    CUIMessageBox ();
    
    function IsComplexMode();
    function Enable(boolean);
    function SetText(string);
    function GetText();
    function GetColor() const;
    function GetWidth() const;
    function GetClipperState();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function GetTextureColor() const;
    function GetHeading();
    function GetFont();
    function GetPassword();
    function GetHost();
    function SetStretchTexture(boolean);
    function IsAutoDelete();
    function ClipperOff();
    function SetTextX(number);
    function ClipperOn();
    function SetHeight(number);
    function SetAutoDelete(boolean);
    function SetOriginalRect(number, number, number, number);
    function SetTextColor(number, number, number, number);
    function SetComplexMode(boolean);
    function AttachChild(CUIWindow*);
    function SetTextureColor(number);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function Init(string);
    function GetTextAlign();
    function SetTextST(string);
    function SetTextureOffset(number, number);
    function WindowName();
    function SetWindowName(string);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetStretchTexture();
    function GetTextY();
    function InitTexture(string);
    function SetHeading(number);
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function SetColor(number);
};

C++ class CUIMessageBoxEx : CUIDialogWnd {
    CUIMessageBoxEx ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function GetPassword();
    function SetAutoDelete(boolean);
    function SetHolder(CDialogHolder*);
    function GetHost();
    function SetText(string);
    function AttachChild(CUIWindow*);
    function GetWidth() const;
    function SetWndPos(number, number);
    function SetFont(CGameFont*);
    function ResetPPMode();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function GetHolder();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function SetWndSize(number, number);
    function DetachChild(CUIWindow*);
    function IsAutoDelete();
};

C++ class COptionsManager {
    COptionsManager ();
    
    function SendMessage2Group(string, string);
    function SaveBackupValues(string);
    function IsGroupChanged(string);
    function SaveValues(string);
    function SetCurrentValues(string);
    function UndoGroup(string);
    function OptionsPostAccept();
};

C++ class CUIProgressBar : CUIWindow {
    CUIProgressBar ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function GetRange_max();
    function SetAutoDelete(boolean);
    function GetRange_min();
    function SetProgressPos(number);
    function AttachChild(CUIWindow*);
    function GetProgressPos();
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUIPropertiesBox : CUIFrameWindow {
    CUIPropertiesBox ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function AddItem(string);
    function AutoUpdateSize();
    function SetFont(CGameFont*);
    function SetAutoDelete(boolean);
    function RemoveAll();
    function RemoveItem(number);
    function IsAutoDelete();
    function AttachChild(CUIWindow*);
    function Hide();
    function SetWndPos(number, number);
    function ResetPPMode();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function Show(boolean);
    function Show(number, number);
    function GetTitleStatic();
    function GetHeight() const;
    function SetWidth(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function IsEnabled();
    function SetWndSize(number, number);
    function GetWidth() const;
    function SetColor(number);
};

C++ class CUIScrollView : CUIWindow {
    CUIScrollView ();
    
    function GetFont();
    function SetScrollPos(number);
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function GetCurrentScrollPos();
    function GetMaxScrollPos();
    function RemoveWindow(CUIWindow*);
    function ScrollToBegin();
    function SetAutoDelete(boolean);
    function GetMinScrollPos();
    function AddWindow(CUIWindow*, boolean);
    function Init(number, number, number, number);
    function Init(Frect*);
    function AttachChild(CUIWindow*);
    function Clear();
    function SetWndPos(number, number);
    function ScrollToEnd();
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUISpinFlt : CUICustomSpin {
    CUISpinFlt ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetStep(number);
    function SetMinValue(number);
    function GetText();
    function SetAutoDelete(boolean);
    function SetMaxValue(number);
    function GetStep();
    function GetValue();
    function AttachChild(CUIWindow*);
    function SetValue(number);
    function SetWndPos(number, number);
    function DetachChild(CUIWindow*);
    function SetFont(CGameFont*);
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function ResetPPMode();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function SetWndSize(number, number);
    function GetWidth() const;
    function IsAutoDelete();
};

C++ class CUISpinNum : CUICustomSpin {
    CUISpinNum ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetStep(number);
    function SetMinValue(number);
    function GetText();
    function SetAutoDelete(boolean);
    function SetMaxValue(number);
    function GetStep();
    function GetValue();
    function AttachChild(CUIWindow*);
    function SetValue(number);
    function SetWndPos(number, number);
    function DetachChild(CUIWindow*);
    function SetFont(CGameFont*);
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function ResetPPMode();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function SetWndSize(number, number);
    function GetWidth() const;
    function IsAutoDelete();
};

C++ class CUISpinText : CUICustomSpin {
    CUISpinText ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function GetText();
    function SetAutoDelete(boolean);
    function GetWidth() const;
    function GetCurrentID();
    function GetTokenText();
    function AttachChild(CUIWindow*);
    function AddItem(string, number);
    function SetWndPos(number, number);
    function DetachChild(CUIWindow*);
    function SetFont(CGameFont*);
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function ResetPPMode();
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function SetWndSize(number, number);
    function SetCurrentID(number);
    function IsAutoDelete();
};

C++ class CUIStatic : CUIWindow {
    CUIStatic ();
    
    function GetTextY();
    function Enable(boolean);
    function SetText(string);
    function GetText();
    function GetColor() const;
    function GetWidth() const;
    function SetTextX(number);
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function GetTextureColor() const;
    function GetHeading();
    function GetFont();
    function SetStretchTexture(boolean);
    function SetComplexMode(boolean);
    function IsComplexMode();
    function GetClipperState();
    function ClipperOn();
    function ClipperOff();
    function SetAutoDelete(boolean);
    function SetHeading(number);
    function SetTextColor(number, number, number, number);
    function SetOriginalRect(number, number, number, number);
    function AttachChild(CUIWindow*);
    function SetTextST(string);
    function SetWndPos(number, number);
    function GetStretchTexture();
    function GetTextAlign();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function SetTextureOffset(number, number);
    function WindowName();
    function SetWindowName(string);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetTextureColor(number);
    function SetColor(number);
    function InitTexture(string);
    function SetHeight(number);
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function IsAutoDelete();
};

C++ class CUITabButton : CUIButton {
    CUITabButton ();
    
    function SetHighlightColor(number);
    function IsComplexMode();
    function Enable(boolean);
    function SetHeight(number);
    function GetText();
    function GetColor() const;
    function GetWidth() const;
    function GetClipperState();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Show(boolean);
    function GetHeight() const;
    function SetWidth(number);
    function GetTextX();
    function IsEnabled();
    function ResetPPMode();
    function GetTextureColor() const;
    function GetHeading();
    function EnableTextHighlighting(boolean);
    function SetColor(number);
    function SetStretchTexture(boolean);
    function GetFont();
    function ClipperOff();
    function SetHeading(number);
    function ClipperOn();
    function SetOriginalRect(number, number, number, number);
    function SetAutoDelete(boolean);
    function GetTextY();
    function SetTextColor(number, number, number, number);
    function GetStretchTexture();
    function AttachChild(CUIWindow*);
    function SetTextureColor(number);
    function SetWndPos(number, number);
    function SetTextST(string);
    function GetTextAlign();
    function Init(number, number, number, number);
    function Init(Frect*);
    function Init(string, number, number, number, number);
    function SetWindowName(string);
    function WindowName();
    function SetTextureOffset(number, number);
    function SetTextY(number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function SetComplexMode(boolean);
    function SetText(string);
    function InitTexture(string);
    function SetTextX(number);
    function SetWndSize(number, number);
    function SetTextAlign(number);
    function IsAutoDelete();
};

C++ class CUITabControl : CUIWindow {
    CUITabControl ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function GetButtonByIndex(number);
    function SetNewActiveTab(number);
    function GetTabsCount() const;
    function SetAutoDelete(boolean);
    function RemoveAll();
    function GetActiveIndex();
    function RemoveItem(number);
    function AttachChild(CUIWindow*);
    function AddItem(CUITabButton*);
    function AddItem(string, string, number, number, number, number);
    function SetWndPos(number, number);
    function Init(number, number, number, number);
    function Init(Frect*);
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUITrackBar : CUIWindow {
    CUITrackBar ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetAutoDelete(boolean);
    function SetCheck(boolean);
    function AttachChild(CUIWindow*);
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetWndPos(number, number);
    function GetCheck();
    function GetWidth() const;
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function WindowName();
    function IsShown();
    function SetWndSize(number, number);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function ResetPPMode();
    function SetFont(CGameFont*);
    function IsAutoDelete();
};

C++ class CUIWindow {
    CUIWindow ();
    
    function GetFont();
    function SetWindowName(string);
    function Enable(boolean);
    function SetHeight(number);
    function SetAutoDelete(boolean);
    function AttachChild(CUIWindow*);
    function SetWndPos(number, number);
    function ResetPPMode();
    function WindowName();
    function DetachChild(CUIWindow*);
    function SetPPMode();
    function SetFont(CGameFont*);
    function IsShown();
    function Init(number, number, number, number);
    function Init(Frect*);
    function SetWndRect(Frect);
    function SetWndRect(number, number, number, number);
    function GetHeight() const;
    function SetWidth(number);
    function Show(boolean);
    function IsEnabled();
    function SetWndSize(number, number);
    function GetWidth() const;
    function IsAutoDelete();
};

C++ class GameGraph__CVertex {
    function level_vertex_id() const;
    function game_point(const GameGraph__CVertex*);
    function level_id() const;
    function level_point(const GameGraph__CVertex*);
};

C++ class CWeaponAK74 : CGameObject {
    CWeaponAK74 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponBM16 : CGameObject {
    CWeaponBM16 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponBinoculars : CGameObject {
    CWeaponBinoculars ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponFN2000 : CGameObject {
    CWeaponFN2000 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponFORT : CGameObject {
    CWeaponFORT ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponGroza : CGameObject {
    CWeaponGroza ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponHPSA : CGameObject {
    CWeaponHPSA ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponKnife : CGameObject {
    CWeaponKnife ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponLR300 : CGameObject {
    CWeaponLR300 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponPM : CGameObject {
    CWeaponPM ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponRG6 : CGameObject {
    CWeaponRG6 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponRPG7 : CGameObject {
    CWeaponRPG7 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponSVD : CGameObject {
    CWeaponSVD ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponSVU : CGameObject {
    CWeaponSVU ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponShotgun : CGameObject {
    CWeaponShotgun ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponUSP45 : CGameObject {
    CWeaponUSP45 ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponVal : CGameObject {
    CWeaponVal ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponVintorez : CGameObject {
    CWeaponVintorez ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponWalther : CGameObject {
    CWeaponWalther ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CWeaponZoomable : CGameObject {
    CWeaponZoomable ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CZombie : CGameObject {
    CZombie ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CZoneCampfire : CGameObject {
    CZoneCampfire ();
    
    function Visual() const;
    function getEnabled() const;
    function net_Import(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function is_on();
    function turn_on();
    function turn_off();
    function net_Export(net_packet&);
    function _construct();
    function use(CGameObject*);
};

C++ class CZoneGalantine : CGameObject {
    CZoneGalantine ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CZoneMine : CGameObject {
    CZoneMine ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class CZudaArtefact : CGameObject {
    CZudaArtefact ();
    
    function Visual() const;
    function _construct();
    function getEnabled() const;
    function net_Import(net_packet&);
    function net_Export(net_packet&);
    function getVisible() const;
    function net_Spawn(cse_abstract*);
    function use(CGameObject*);
};

C++ class ClientID {
    ClientID ();
    
    function value() const;
    operator ==(ClientID&, ClientID);
    function set(number);
};

C++ class DLL_Pure {
    DLL_Pure ();
    
    function _construct();
};

C++ class FS_file_list {
    function Free();
    function GetAt(number);
    function Size();
};

C++ class FS_file_list_ex {
    function Sort(number);
    function GetAt(number);
    function Size();
};

C++ class ICollidable {
    ICollidable ();
    
};

C++ class IKinematicsAnimated {
    function PlayCycle(IKinematicsAnimated*, string);
};

C++ class ipure_schedulable_object {
};

C++ class ipure_server_object : ipure_alife_load_save_object {
};

C++ class reader {
    function r_advance(number);
    function r_u64(unsigned __int64&);
    function r_u64();
    function r_bool(reader*);
    function r_dir(vector&);
    function r_u8(number&);
    function r_u8();
    function r_eof(reader*);
    function r_float_q8(number, number);
    function r_vec3(reader*, vector*);
    function r_stringZ(reader*);
    function r_u16(number&);
    function r_u16();
    function r_float_q16(number, number);
    function r_angle16();
    function r_s64(__int64&);
    function r_s64();
    function r_float(number&);
    function r_float();
    function r_s32(number&);
    function r_s32();
    function r_elapsed() const;
    function r_sdir(vector&);
    function r_tell() const;
    function r_s8(signed char&);
    function r_s8();
    function r_s16(number&);
    function r_s16();
    function r_seek(number);
    function r_u32(number&);
    function r_u32();
    function r_angle8();
};

C++ class IRender_Visual {
    IRender_Visual ();
    
};

C++ class IRenderable {
};

C++ class ISheduled {
};

C++ class net_packet {
    net_packet ();
    
    function r_advance(number);
    function r_begin(number&);
    function w_chunk_open16(number&);
    function r_u32(number&);
    function r_u32();
    function w_begin(number);
    function w_float_q8(number, number, number);
    function r_u8(number&);
    function r_u8();
    function r_eof(net_packet*);
    function w_chunk_open8(number&);
    function r_vec3(vector&);
    function r_vec3(net_packet*);
    function w_u8(number);
    function r_u16(number&);
    function r_u16();
    function w_u24(number);
    function r_angle16(number&);
    function r_s64(__int64&);
    function r_s64();
    function w_tell();
    function r_tell();
    function r_elapsed();
    function r_s16(number&);
    function r_s16();
    function r_clientID(net_packet*);
    function r_matrix(matrix&);
    function w_clientID(ClientID&);
    function r_stringZ(net_packet*);
    function r_u64(unsigned __int64&);
    function r_u64();
    function w_sdir(const vector&);
    function r_sdir(vector&);
    function r_dir(vector&);
    function w_u16(number);
    function r_float_q8(number&, number, number);
    function w_s16(number);
    function r_float_q16(number&, number, number);
    function w_matrix(matrix&);
    function r_bool(net_packet*);
    function w_u32(number);
    function w_s64(__int64);
    function r_u24(number&);
    function r_u24();
    function w_angle16(number);
    function w_dir(const vector&);
    function w_s32(number);
    function w_stringZ(string);
    function w_float_q16(number, number, number);
    function r_s8(signed char&);
    function r_s8();
    function w_angle8(number);
    function r_float(number&);
    function r_float();
    function w_s8(signed char);
    function r_s32(number&);
    function r_s32();
    function w_float(number);
    function w_bool(net_packet*, boolean);
    function r_seek(number);
    function w_chunk_close8(number);
    function w_vec3(const vector&);
    function w_chunk_close16(number);
    function w_u64(unsigned __int64);
    function r_angle8(number&);
};

C++ class SGameTaskObjective {
    property def_ml_enabled;
    
    SGameTaskObjective (CGameTask*, number);
    
    function set_article_key(string);
    function add_on_complete_func(string);
    function set_map_hint(string);
    function add_on_fail_info(string);
    function add_complete_func(string);
    function add_fail_func(string);
    function get_state();
    function set_icon_name(string);
    function add_complete_info(string);
    function add_on_complete_info(string);
    function set_description(string);
    function get_idx();
    function get_description();
    function add_on_fail_func(string);
    function set_map_location(string);
    function set_object_id(number);
    function set_article_id(string);
    function add_fail_info(string);
};

C++ class SServerFilters {
    property empty;
    property full;
    property listen_servers;
    property with_battleye;
    property with_pass;
    property without_ff;
    property without_pass;
    
    SServerFilters ();
    
};

C++ class UIGame_custom_script : CUIGameCustom {
    UIGame_custom_script ();
    
    function AddCustomMessage(string, number, number, number, CGameFont*, number, number);
    function AddCustomMessage(string, number, number, number, CGameFont*, number, number, number);
    function SetClGame(game_cl_GameState*);
    function Init();
    function AddCustomStatic(string, boolean);
    function RemoveCustomMessage(string);
    function AddDialogToRender(CUIWindow*);
    function GetCustomStatic(string);
    function RemoveDialogToRender(CUIWindow*);
    function CustomMessageOut(string, string, number);
    function RemoveCustomStatic(string);
};

C++ class game_GameState : DLL_Pure {
    property round;
    property start_time;
    property type;
    
    game_GameState ();
    
    function Type() const;
    function _construct();
    function Phase() const;
    function Round() const;
    function StartTime() const;
};

C++ class game_cl_GameState : game_GameState {
    property local_player;
    property local_svdpnid;
    property round;
    property start_time;
    property type;
    
    function Type() const;
    function _construct();
    function Phase() const;
    function Round() const;
    function StartTime() const;
};

C++ class game_cl_mp : game_cl_GameState {
    property local_player;
    property local_svdpnid;
    property round;
    property start_time;
    property type;
    
    function Type() const;
    function _construct();
    function Phase() const;
    function Round() const;
    function StartTime() const;
};

C++ class game_cl_mp_script : game_cl_mp {
    property local_player;
    property local_svdpnid;
    property round;
    property start_time;
    property type;
    
    game_cl_mp_script ();
    
    function _construct();
    function EventSend(net_packet*);
    function shedule_Update(number);
    function GetPlayerByOrderID(number);
    function OnKeyboardRelease(number);
    function createGameUI();
    function GameEventGen(net_packet*, number);
    function GetLocalPlayer();
    function CommonMessageOut(string);
    function Round() const;
    function GetRoundTime();
    function OnKeyboardPress(number);
    function EventGen(net_packet*, number, number);
    function Type() const;
    function GetObjectByGameID(number);
    function Init();
    function Phase() const;
    function TranslateGameMessage(number, net_packet&);
    function FillMapEntities(ZoneMapEntities&);
    function GetClientIDByOrderID(number);
    function net_import_state(net_packet&);
    function StartMenu(CUIDialogWnd*, boolean);
    function StopMenu(CUIDialogWnd*, boolean);
    function CanBeReady();
    function GetPlayersCount() const;
    function StartStopMenu(CUIDialogWnd*, boolean);
    function createPlayerState();
    function StartTime() const;
};

C++ class game_sv_Deathmatch : game_sv_GameState {
    property round;
    property start_time;
    property type;
    
    game_sv_Deathmatch ();
    
    function get_id(ClientID);
    function _construct();
    function get_id_2_eid(ClientID);
    function GetTeamData(number);
    function getRPcount(number);
    function get_players_count();
    function get_it_2_id(number);
    function Round() const;
    function Type() const;
    function get_player_name_id(ClientID);
    function Phase() const;
    function type_name() const;
    function getRP(number, number);
    function StartTime() const;
    function get_name_it(number);
    function get_option_s(string, string, string);
    function get_name_id(ClientID);
    function get_eid(number);
    function u_EventSend(net_packet&, number);
    function get_it(number);
    function GenerateGameMessage(net_packet&);
    function get_option_i(string, string, number);
};

C++ class game_sv_GameState : game_GameState {
    property round;
    property start_time;
    property type;
    
    function get_id(ClientID);
    function _construct();
    function get_id_2_eid(ClientID);
    function getRPcount(number);
    function get_players_count();
    function get_it_2_id(number);
    function Round() const;
    function Type() const;
    function get_player_name_id(ClientID);
    function Phase() const;
    function get_option_i(string, string, number);
    function getRP(number, number);
    function get_name_it(number);
    function get_option_s(string, string, string);
    function get_name_id(ClientID);
    function get_eid(number);
    function GenerateGameMessage(net_packet&);
    function get_it(number);
    function u_EventSend(net_packet&, number);
    function StartTime() const;
};

C++ class game_sv_mp : game_sv_GameState {
    property round;
    property start_time;
    property type;
    
    game_sv_mp ();
    
    function get_id(ClientID);
    function _construct();
    function get_id_2_eid(ClientID);
    function KillPlayer(ClientID, number);
    function getRPcount(number);
    function get_players_count();
    function get_it_2_id(number);
    function Round() const;
    function SpawnWeaponForActor(number, string, boolean, boolean, boolean);
    function Type() const;
    function get_player_name_id(ClientID);
    function signal_Syncronize();
    function Phase() const;
    function SendPlayerKilledMessage(number, enum KILL_TYPE, number, number, enum SPECIAL_KILL_TYPE);
    function getRP(number, number);
    function StartTime() const;
    function get_name_it(number);
    function get_option_s(string, string, string);
    function get_name_id(ClientID);
    function get_eid(number);
    function u_EventSend(net_packet&, number);
    function get_it(number);
    function GenerateGameMessage(net_packet&);
    function get_option_i(string, string, number);
};

C++ class game_sv_mp_script : game_sv_mp {
    property round;
    property start_time;
    property type;
    
    game_sv_mp_script ();
    
    function get_id(ClientID);
    function _construct();
    function switch_Phase(number);
    function getRPcount(number);
    function get_players_count();
    function get_it_2_id(number);
    function SpawnPlayer(ClientID, string, string, RPoint);
    function Type() const;
    function get_player_name_id(ClientID);
    function Phase() const;
    function OnPlayerHitPlayer(number, number, net_packet&);
    function Create(string);
    function get_name_it(number);
    function SendPlayerKilledMessage(number, enum KILL_TYPE, number, number, enum SPECIAL_KILL_TYPE);
    function get_eid(number);
    function net_Export_State(net_packet&, ClientID);
    function get_it(number);
    function createPlayerState();
    function u_EventSend(net_packet&, number);
    function KillPlayer(ClientID, number);
    function Update();
    function GetTeamData(number);
    function GetHitParamsPower(net_packet*);
    function GenerateGameMessage(net_packet&);
    function signal_Syncronize();
    function StartTime() const;
    function SpawnWeaponForActor(number, string, boolean, boolean, boolean);
    function OnRoundEnd();
    function SetHitParams(net_packet*, number, number);
    function getRP(number, number);
    function OnEvent(net_packet&, number, number, ClientID);
    function OnRoundStart();
    function get_option_s(string, string, string);
    function get_name_id(ClientID);
    function GetHitParamsImpulse(net_packet*);
    function type_name() const;
    function get_id_2_eid(ClientID);
    function Round() const;
    function get_option_i(string, string, number);
};

C++ class CTime {
    const DateToDay = 0;
    const DateToMonth = 1;
    const DateToYear = 2;
    const TimeToHours = 0;
    const TimeToMilisecs = 3;
    const TimeToMinutes = 1;
    const TimeToSeconds = 2;
    
    CTime ();
    CTime (const CTime&);
    CTime (number, number, number, number, number);
    
    function sub(CTime*);
    function timeToString(number);
    function dateToString(number);
    operator ==(const CTime&, CTime);
    function get(number&, number&, number&, number&, number&, number&, number&);
    function set(number, number, number, number, number, number, number);
    function setHMSms(number, number, number, number);
    function diffSec(CTime*);
    operator <(const CTime&, CTime);
    operator +(CTime&, CTime);
    operator >=(const CTime&, CTime);
    function setHMS(number, number, number);
    operator >(const CTime&, CTime);
    operator -(CTime&, CTime);
    operator <=(const CTime&, CTime);
    function add(CTime*);
};

End of list of the classes exported to LUA

 
List of the namespaces exported to LUA

 
namespace  {
    function game_ini();
    function bit_and(number, number);
    function alife();
    function GetFontGraffiti32Russian();
    function device();
    function cast_planner(action_base*);
    function debug_print(string);
    function IsGameTypeSingle();
    function game_graph();
    function dik_to_bind(number);
    function GetFontGraffiti19Russian();
    function sell_condition(ini_file*, string);
    function sell_condition(number, number);
    function buy_condition(ini_file*, string);
    function buy_condition(number, number);
    function create_ini_file(string);
    function get_hud();
    function GetFontSmall();
    function error_log(string);
    function GetFontLetterica18Russian();
    function command_line();
    function user_name();
    function getFS();
    function valid_saved_game(string);
    function bit_xor(number, number);
    function get_console();
    function GetFontGraffiti50Russian();
    function app_ready();
    function GetTextureName(string);
    function xrRender_test_r2_hw();
    function bit_or(number, number);
    function bit_rshift(number, number);
    function GetFontDI();
    function GetFontLetterica16Russian();
    function system_ini();
    function bit_lshift(number, number);
    function show_condition(ini_file*, string);
    function IsMixedMode();
    function prefetch(string);
    function GetARGB(number, number, number, number);
    function bind_to_dik(enum EGameActions);
    function GetFontLetterica25();
    function GetFontMedium();
    function ef_storage();
    function GetTextureInfo(string, string);
    function flush();
    function GetFontGraffiti22Russian();
    function bit_not(number);
    function time_global();
    function verify_if_thread_is_running();
    function script_server_object_version();
    function GetTextureRect(string);
    function editor();
    function EngineBuildId();
 
    namespace level {
        function vertex_id(vector);
        function debug_object(string);
        function remove_call(const function<boolean>&, const function<void>&);
        function remove_call(object, const function<boolean>&, const function<void>&);
        function remove_call(object, string, string);
        function is_save_allowed();
        function send_event_key_release(number);
        function add_call(const function<boolean>&, const function<void>&);
        function add_call(object, const function<boolean>&, const function<void>&);
        function add_call(object, string, string);
        function set_weather_fx(string);
        function add_cam_effector2(string, number, boolean, string);
        function set_level_sound_enabled(boolean);
        function prefetch_sound(string);
        function save_allowed(boolean);
        function remove_cam_effector(number);
        function disable_keyboard_input();
        function ai_ignore_actor(boolean);
        function present();
        function hide_indicators();
        function send_event_mouse_move(number, number);
        function main_input_receiver();
        function map_add_object_spot_ser(number, string, string);
        function map_add_position_spot_ser(vector, string, string, string);
        function cover_in_direction(number, const vector&);
        function enable_pda_downloads(boolean);
        function get_time_minutes();
        function get_time_factor();
        function send_event_mouse_wheel(number);
        function map_highlight_spot(number, string, boolean);
        function remove_calls_for_object(object);
        function add_dialog_to_render(CUIDialogWnd*);
        function get_game_difficulty();
        function show_indicators();
        function map_get_spot_hint(number, string);
        function enable_input();
        function game_id();
        function vertex_in_direction(number, vector, number);
        function map_add_object_spot(number, string, string);
        function rain_factor();
        function remove_pp_effector(number);
        function get_bounding_volume();
        function set_game_time(number, number);
        function valid_vertex_id(number);
        function name();
        function environment();
        function remove_complex_effector(number);
        function add_complex_effector(string, number);
        function set_pp_effector_factor(number, number, number);
        function set_pp_effector_factor(number, number);
        function object_by_id(number);
        function add_pp_effector(string, number, boolean);
        function get_weather();
        function add_cam_effector(string, number, boolean, string);
        function level_sound_enabled();
        function physics_world();
        function get_time_hours();
        function send_event_key_hold(number);
        function get_snd_volume();
        function iterate_sounds(string, number, function<void>);
        function iterate_sounds(string, number, object, function<void>);
        function spawn_phantom(const vector&);
        function map_remove_object_spot(number, string);
        function check_object(game_object*);
        function enable_keyboard_input();
        function set_weather(string, boolean);
        function indicators_shown();
        function map_change_spot_hint(number, string, string);
        function set_game_difficulty(enum ESingleGameDifficulty);
        function disable_input();
        function enable_pda_skills(boolean);
        function set_time_factor(number);
        function start_stop_menu(CUIDialogWnd*, boolean);
        function get_time_days();
        function patrol_path_exists(string);
        function send_event_key_pressed(number);
        function is_wfx_playing();
        function remove_dialog_to_render(CUIDialogWnd*);
        function client_spawn_manager();
        function map_has_object_spot(number, string);
        function set_snd_volume(number);
        function add_patrol(DynamicPatrolPath*);
        function vertex_position(number);
        function debug_actor();
    };
 
    namespace relation_registry {
        function community_goodwill(string, number);
        function change_community_goodwill(string, number, number);
        function set_community_goodwill(string, number, number);
    };
 
    namespace main_menu {
        function get_main_menu();
    };
 
    namespace game {
        function convert_time(number);
        function convert_time(const CTime&);
        function is_infoportion_valid(string);
        function get_game_time();
        function time();
        function has_active_tutorial();
        function start_tutorial(string);
        function translate_string(string);
        function reload_language();
    };
  };
--]] ----------------------------------------------------------------------------------------------