--[[ ----------------------------------------------------------------------------------------------
 File       : bind_trader.script
 Description: Trader binding (Sidorovich)
 Copyright  : 2012 © LA-team
 Author     : ...
 Editors    : 
 Last edit  : 11.07.2013 [...]
--]] ----------------------------------------------------------------------------------------------

--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local tDbgName = {}
local bDebug   = false --/ false|true enabled\disabled debug mode
--/ --------------------------
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt, ...) _G.log(sModule..":"..tostring(fmt), ...) end
--/ -----------------------------------------------------------------
function InitDebug() --/#+#
	if db.tDbgName then
		tDbgName = db.tDbgName
		bDebug = true
	end
end
--/ -----------------------------------------------------------------
--/ Trader binding - registering of objects in binder
--/ -----------------------------------------------------------------
function bind(obj)
	if obj:clsid() == clsid.script_trader then
		obj:bind_object( trader_binder(obj) )
	end
end
--/ -----------------------------------------------------------------------------------------------
class "trader_binder" (object_binder)
--/ -----------------------------------------------------------------------------------------------
function trader_binder:__init(obj) super(obj)
	self.loaded       = false
	self.first_update = true
	self.obj_id       = obj:id() --/#+#
	self.obj_cid      = obj:clsid() --/#+#
	self.log = bDebug and tDbgName[obj:name()] --/#+# for debug!
end

function trader_binder:reload(section)
	object_binder.reload(self, section)
end

function trader_binder:reinit()
	object_binder.reinit(self)
	db.storage[self.obj_id] = {}
	self.st = db.storage[self.obj_id]
	db.add_obj(self.object,self.obj_id,self.obj_cid)
end

function trader_binder:net_spawn(server_object)
	if not object_binder.net_spawn(self, server_object) then
		return false --/>
	end
	local se_obj = alife():object(self.obj_id) --/ full server object
	if not se_obj then
		abort("%s:net_spawn:NPC=[%s/%s],server_object=NIL:<%s>", sModule, self.object:name(), self.obj_id, "Error!")
		return true --/>
	end
	--if self.log then log("net_spawn:NPC=[%s/%s],ID=[%s],alive=(%s)", self.object:name(), Get_CharName(self.object), self.obj_id, self.object:alive(), "") end --/#~#
	if self.object:alive() then
		self:set_callbacks() --/< all CALLBACKs set here
		xr_gulag.setup_gulag_and_logic_on_spawn(self.object, self.st, se_obj, modules.stype_trader, self.loaded)
	end
	event("npc_spawn"):trigger({obj=self.object,obj_id=self.obj_id,obj_cid=self.obj_cid,se_obj=se_obj,binder=self}) --/#+#>
	return true --/>
end

function trader_binder:net_destroy()
	if self.st then
		event("npc_destroy"):trigger({obj=self.object,obj_id=self.obj_id,obj_cid=self.obj_cid}) --/#+#>
		if self.st.active_scheme then
			xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "net_destroy")
		end
	end
	self:clear_callbacks()
	db.del_obj(self.object,self.obj_id,self.obj_cid)
	
	object_binder.net_destroy(self)
end

function trader_binder:update(delta)
	object_binder.update(self, delta)
	
	local oNPC = self.object
	if self.first_update then
		self.first_update = false
		if not oNPC:alive() then
			self:clear_callbacks()
		end
	end
	event("mob_update_dbg"):trigger({binder=self}) --/#+#> for debug
	
	if oNPC:alive() then
		if oNPC:is_talk_enabled() then
			oNPC:set_tip_text("character_use")
		else
			oNPC:set_tip_text("")
		end
		trade_manager.update(oNPC) --/ trading update
		
		if self.st.active_section then
			xr_logic.issue_event(oNPC, self.st[self.st.active_scheme], "update", delta)
		end
	else
		oNPC:set_tip_text_default()
	end
	event("npc_update"):trigger({obj=self.object,obj_id=self.obj_id,delta=delta}) --/#+#>
end

function trader_binder:net_save_relevant()
	return true
end

function trader_binder:save(packet)
	event("npc_save"):trigger({obj=self.object,obj_id=self.obj_id}) --/#+#>
	set_save_marker(packet, "save", false, sModule, self.object)
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
	trade_manager.save(self.object, packet)
	set_save_marker(packet, "save", true, sModule, self.object)
end

function trader_binder:load(reader)
	self.loaded = true
	set_save_marker(reader, "load", false, sModule, self.object)
	object_binder.load(self, reader)
	if reader:r_eof() then
		abort("load:SAVE_FILE_IS_CORRUPT:Obj=[%s],ID=[%s]:<%s>", self.object:name(), self.object:id(), "Error!")
	end
	xr_logic.load_obj(self.object, reader)
	trade_manager.load(self.object, reader)
	set_save_marker(reader, "load", true, sModule, self.object)
	event("npc_load"):trigger({obj=self.object,obj_id=self.obj_id}) --/#+#>
end

--/------------------------------------------------------------------
--/ CALLBACKs
--/------------------------------------------------------------------
function trader_binder:set_callbacks()
	self.object:set_callback(callback.patrol_path_in_point, self.waypoint_callback, self) --/#?# do we need it?
end

function trader_binder:clear_callbacks()
	self.object:set_callback(callback.patrol_path_in_point, nil)
end

function trader_binder:waypoint_callback(obj, action_type, index)
	if self.st.active_section then
--		log("waypoint_callback:action_type=[%s/%s]:[%s]", action_type, index, ">") --/#~#
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", obj or self.object, action_type, index)
	end
end
--/------------------------------------------------------------------------------------------------