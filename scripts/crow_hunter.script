--[[ ----------------------------------------------------------------------------------------------
 File       : crow_hunter.script
 Description: ...
 Copyright  : 2008 © LA-team
 Author     : Gr1ph00n (08.12.2008)
 Editors    : Gr1ph00n
 Last edit  : 08.03.2013 [...]
--]] ----------------------------------------------------------------------------------------------
-- to do: nothing
--/ -----------------------------------------------------------------
--/ VARIABLEs
--/ -----------------------------------------------------------------
local RUN_GAME = false --/ these 5 variables are updated by dialog script
local selected_difficult = -1
local selected_level = -1
local selected_mode = nil
local RESUME = false

local STATUS_IDLE    = 1
local STATUS_LOADED  = 2
local STATUS_STOPPED = 0

local NORMAL_MODE = 0
local RECORD_MODE = 1

local EASY   = 1
local NORMAL = 2
local HARD   = 3

local pCrowHunter = nil
--/ --------------------------
local bInit   = false --/ flag of initialization of the module
local sModule = script_name()
--/ -----------------------------------------------------------------
local log = function(fmt,...) _G.log(sModule..":"..tostring(fmt),...) end
--/------------------------------------------------------------------
--/ Initialize Module
--/------------------------------------------------------------------
function init()
--	log("init:[>]") --/#~#
	if bInit then return end
	event("presets"):register(PreSets)
	bInit = true
end

function PreSets(e)
	event("actor_update"):register(update)
end
--/ -----------------------------------------------------------------------------------------------
class "CrowHunter"
--/ -----------------------------------------------------------------------------------------------
function CrowHunter:__init()
	self:Initialize()
end

function CrowHunter:Initialize()
	self.status = STATUS_IDLE
	self.level = -1
	self.difficult = nil
	self.max_crows = {
		[1] =  3,
		[2] =  5,
		[3] =  8,
		[4] = 10,
		[5] = 12,
		[6] = 15,
		[7] = 17,
		[8] = 20,
		[9] = 30
	}
	self.timer = nil
	self.ui_text_id = "ui_crow_minigame"
	self.custom_static = nil
	self.ncrow_killed = 0
	self.crow_to_hit     = ""
	self.crow_not_killed = ""
	--self.dump_info     = ""
	self.need_ui_update = false
	self.update = time_global() + 10000
	self.center = nil
	self.is_record_mode = false
end

function CrowHunter:__finalize()
end

function CrowHunter:Update()
	if RUN_GAME then
		if self.status == STATUS_IDLE then
			self.status = STATUS_LOADED
			self:LoadScenario(selected_difficult, selected_level, selected_mode)
			SetVar("cr_killed", 0)
			DelVar("cr_won")
		elseif self.status == STATUS_LOADED then
			--self.timer:Update()
			self:UpdateUi()
			if self:HasWon() and not self.timer:check() then --/#?#
				log("Update: has won") --/#~#
				self:ShowInfos(string.upper(game.translate_string("st_cr_you_win")))
				return
			end
			if self.timer:check() then --/#?#
				self.status = STATUS_STOPPED
				RUN_GAME = false
				self:RemoveUi()
				self:StoreValues()
				self:ShowInfos(string.upper(game.translate_string("st_cr_time_elapsed")))
				return
			end
		end
	end
	if self.status == STATUS_STOPPED then
		log("Update: %d", self.status) --/#~#
		if RESUME then
			self.status = STATUS_IDLE
			RESUME = not RESUME
			self.timer = nil
		end
	end
end

function CrowHunter:ShowInfos(info)
	local hud = get_hud()
	hud:AddCustomStatic("main_task", true)
	hud:GetCustomStatic("main_task"):wnd():SetTextST(info)
	hud:GetCustomStatic("main_task").m_endTime = time_global()/1000 + 5
end

function CrowHunter:StoreValues()
	SetVar("cr_won", self:HasWon())
	SetVar("cr_killed", self.ncrow_killed)
	if self:HasWon() then
		if GerVar("cr_hun_lvl", 1) == self.level then
			SetVar("cr_hun_lvl", self.level + 1)
		end
	end
end	

function CrowHunter:UpdateUi()
	local hud = get_hud()
	if self.need_ui_update == true then
		self.custom_static = hud:GetCustomStatic(self.ui_text_id)
		if self.custom_static == nil then
			hud:AddCustomStatic(self.ui_text_id, true)
			self.custom_static = hud:GetCustomStatic(self.ui_text_id)
		end
		self.crow_to_hit = tostring(self.max_crows[self.level])
		self.crow_not_killed = tostring(self.ncrow_killed)
		local dump_info = self.crow_not_killed .. "/" .. self.crow_to_hit
		self.custom_static:wnd():SetText(dump_info)
		self.need_ui_update = false
	end
end

function CrowHunter:RemoveUi()
	local hud = get_hud()
	hud:RemoveCustomStatic(self.ui_text_id)
	self.timer:RemoveHudTimer()
end


	
function CrowHunter:OnCrowDeath(id)

	self.ncrow_killed = self.ncrow_killed + 1
	self.need_ui_update = true
	log("crow killed = %d", self.ncrow_killed) --/#~#
end

function CrowHunter:LoadScenario(difficult, level, mode)
	self.difficult = difficult
	self.level = level
	self:InitializeUi()
--	self:SpawnCrows()
end

function CrowHunter:GetTimeToElapseByLevel()
	if self.difficult == EASY then
		return 2*60 --/> 2 real-minutes
	elseif self.difficult == NORMAL then
		return 1.5*60 --/> 1.5 real-minutes
	elseif self.difficult == HARD then
		return 1.25*60 --/> 1.25 real-minutes
	end
	return 5*60 --/> 5 real-minutes
end

function CrowHunter:InitializeUi()
	local hud = get_hud()
	self.custom_static = hud:GetCustomStatic(self.ui_text_id)
	if self.custom_static == nil then
		hud:AddCustomStatic(self.ui_text_id, true)
		self.custom_static = hud:GetCustomStatic(self.ui_text_id)
	end
	self.crow_to_hit = tostring(self.max_crows[self.level])
	local dump_info = "0/" .. self.crow_to_hit
	self.custom_static:wnd():SetText(dump_info)
	self.timer = timer_rt("tm_CrowHunter"):start(self:GetTimeToElapseByLevel(), FuncStub):hud(true)
	self.timer:hud_caption("CrowHunter") --/#?#
end

function CrowHunter:GetRemainingCrow()
	return (self.max_crows[self.level] - self.ncrow_killed)
end



function CrowHunter:HasWon()
	return self.max_crows[self.level] == self.ncrow_killed
end

function CrowHunter:GetStatus()
	return self.status 
end

function CrowHunter:SetStatus(status)
	self.status = status
end

--************************************************


function is_ready(speaker, actor)
	log("is_ready :: %s", tostring(GetCrowHunter():GetStatus() == STATUS_IDLE and not RUN_GAME)) --/#~#
	return GetCrowHunter():GetStatus() == STATUS_IDLE and not RUN_GAME
end
	
function is_stopped(speaker, actor)
	log("is_stopped :: %s", tostring(GetCrowHunter():GetStatus() == STATUS_STOPPED and not RUN_GAME)) --/#~#
	return GetCrowHunter():GetStatus() == STATUS_STOPPED and not RUN_GAME
end	
	
function select_mode_one(p1, p2)
	selected_mode = NORMAL_MODE
end

function select_mode_two(p1, p2)
	selected_mode = RECORD_MODE
end

function select_easy(p1, p2)
	selected_difficult = EASY
end

function select_normal(p1, p2)
	selected_difficult = NORMAL
end

function select_hard(p1, p2)
	selected_difficult = HARD
end

function check_l1(p1, p2)
	return GerVar("cr_hun_lvl", 0) >= 1
end

function check_l2(p1, p2)
	return GerVar("cr_hun_lvl", 0) >= 2
end

function check_l3(p1, p2)
	return GerVar("cr_hun_lvl", 0) >= 3
end

function check_l4(p1, p2)
	return GerVar("cr_hun_lvl", 0) >= 4
end

function check_l5(p1, p2)
	return GerVar("cr_hun_lvl", 0) >= 5
end

function check_l6(p1, p2)
	return GerVar("cr_hun_lvl", 0) >= 6
end

function check_l7(p1, p2)
	return GerVar("cr_hun_lvl", 0) >= 7
end

function check_l8(p1, p2)
	return GerVar("cr_hun_lvl", 0) >= 8
end

function init_if_needed(p1, p2)
	if GerVar("cr_hun_lvl", "<no_value>") == "<no_value>" then
		SetVar( "cr_hun_lvl", 1)
	end
end

function select_l1(p1, p2)
	selected_level = 1
end

function select_l2(p1, p2)
	selected_level = 2
end

function select_l3(p1, p2)
	selected_level = 3
end

function select_l4(p1, p2)
	selected_level = 4
end

function select_l5(p1, p2)
	selected_level = 5
end

function select_l6(p1, p2)
	selected_level = 6
end

function select_l7(p1, p2)
	selected_level = 7
end

function select_l8(p1, p2)
	selected_level = 8
end

function start_mgame(p1, p2)
	RUN_GAME = true
end

function show_result(p1, p2)
	local crow_killed = GerVar("cr_killed", 0)
	local has_won =	GerVar("cr_won", false)
	if has_won == true then
		news_manager.send_tip_hud("INFO:", game.translate_string("st_cr_you_win"))
		news_manager.send_tip_hud("INFO:", game.translate_string("st_cr_you_killed") .. " " .. crow_killed)
		news_manager.send_tip_hud("INFO:", game.translate_string("st_cr_lvl_un"))
		give_award()
	elseif has_won == false then
		news_manager.send_tip_hud("INFO:", game.translate_string("st_cr_you_lose"))
	elseif has_won == nil then
		news_manager.send_tip_hud("INFO:", game.translate_string("st_cr_you_killed") .. " " .. crow_killed)
	end
end

function resume(p1, p2)
	RESUME   = true
	RUN_GAME = false
	dialogs.break_dialog(p1, p2, 0)
	log("resumed") --/#~#
end

local awards = {
	["vodka"]   = 70,
	["breads"]  = 70,
	["medkit"]  = 40,
	["bandage"] = 50
}

function give_award()
	local cnt = 0
	local max_cnt = math.random(6)
	for section, prob in pairs(awards) do
		if cnt >= max_cnt then
			break
		elseif prob > math.random(100) then
			dialogs.give_items(section, 1)
			cnt = cnt + 1
		end
	end
end

function GetCrowHunter()
	if not pCrowHunter then
		pCrowHunter = CrowHunter()
	end
	return pCrowHunter
end

function del()
	pCrowHunter = nil
end

function update(e)
	GetCrowHunter():Update()
end

function is_running()
	return RUN_GAME == true
end
--/ ------------------------------------------------------------------------------------------------